<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\stm32f4Demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\stm32f4Demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Fri Apr 06 18:41:10 2018
<BR><P>
<H3>Maximum Stack Usage =       2124 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Desktop::openPhoto() &rArr; UserPhoto::UserPhoto(const char*, TApplication*, const char*, TWidget*) &rArr; UserPhoto::scanfile(const char*) &rArr;  UserPhoto::scanfile(const char*) (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[34]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">ADC_IRQHandler</a><BR>
 <LI><a href="#[1c]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">BusFault_Handler</a><BR>
 <LI><a href="#[1a]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">HardFault_Handler</a><BR>
 <LI><a href="#[1b]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">MemManage_Handler</a><BR>
 <LI><a href="#[1d]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">UsageFault_Handler</a><BR>
 <LI><a href="#[321]">TWidget::rectCut(TRect*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[321]">TWidget::rectCut(TRect*)</a><BR>
 <LI><a href="#[35e]">disk_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35e]">disk_write</a><BR>
 <LI><a href="#[35d]">disk_read</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35d]">disk_read</a><BR>
 <LI><a href="#[239]">color_tree_cleanup(ColorTree*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[239]">color_tree_cleanup(ColorTree*)</a><BR>
 <LI><a href="#[319]">TWidget::chgAllInValid(TObjList*, TWidget*, TRect*, TRect*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[319]">TWidget::chgAllInValid(TObjList*, TWidget*, TRect*, TRect*)</a><BR>
 <LI><a href="#[2c2]">TWidget::showAll(TWidget*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c2]">TWidget::showAll(TWidget*)</a><BR>
 <LI><a href="#[326]">UserPhoto::scanfile(const char*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[326]">UserPhoto::scanfile(const char*)</a><BR>
 <LI><a href="#[2fc]">TWidget::chgChildsXY(TWidget*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2fc]">TWidget::chgChildsXY(TWidget*)</a><BR>
 <LI><a href="#[2c0]">TApplication::visitAll(TObject*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c0]">TApplication::visitAll(TObject*)</a><BR>
 <LI><a href="#[8a]">task3_driver(void*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8a]">task3_driver(void*)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[34]">ADC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1c]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[36]">CAN1_RX0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[37]">CAN1_RX1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[38]">CAN1_SCE_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[35]">CAN1_TX_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[62]">CAN2_RX0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[63]">CAN2_RX1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[64]">CAN2_SCE_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[61]">CAN2_TX_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[71]">CRYP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[70]">DCMI_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[30]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[31]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[32]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[33]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[51]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7c]">DMA2D_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Stream3_IRQHandler</a> from sdio_sd_conf.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[66]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[67]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[68]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1f]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[5f]">ETH_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[60]">ETH_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[28]">EXTI0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4a]">EXTI15_10_IRQHandler</a> from stm32f4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[29]">EXTI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2a]">EXTI2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2b]">EXTI3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[2c]">EXTI4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[39]">EXTI9_5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[26]">FLASH_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[52]">FMC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[73]">FPU_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[72]">HASH_RNG_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1a]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[42]">I2C1_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[41]">I2C1_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[44]">I2C2_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[43]">I2C2_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6b]">I2C3_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6a]">I2C3_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7b]">LTDC_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7a]">LTDC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1b]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[19]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[65]">OTG_FS_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4c]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6d]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6c]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6f]">OTG_HS_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[6e]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[23]">PVD_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[20]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[27]">RCC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4b]">RTC_Alarm_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[25]">RTC_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[18]">Reset_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[79]">SAI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[53]">SDIO_IRQHandler</a> from sdio_sd_conf.o(i.SDIO_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7f]">SDRAMConfig</a> from sdram_conf.o(i.SDRAMConfig) referenced from startup_stm32f429_439xx.o(.text)
 <LI><a href="#[45]">SPI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[46]">SPI2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[55]">SPI3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[76]">SPI4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[77]">SPI5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[78]">SPI6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1e]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[21]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[7e]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429_439xx.o(.text)
 <LI><a href="#[24]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3a]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3d]">TIM1_CC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3c]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3b]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3e]">TIM2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[3f]">TIM3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[40]">TIM4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[54]">TIM5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[58]">TIM6_DAC_IRQHandler</a> from stm32f4xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[59]">TIM7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4d]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[50]">TIM8_CC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4f]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[4e]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[56]">UART4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[57]">UART5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[74]">UART7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[75]">UART8_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[47]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[48]">USART2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[49]">USART3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[69]">USART6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1d]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[22]">WWDG_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[89]">task2_tgui(void*)</a> from main.o(i._Z10task2_tguiPv) referenced from main.o(i.main)
 <LI><a href="#[8a]">task3_driver(void*)</a> from main.o(i._Z12task3_driverPv) referenced from main.o(i.main)
 <LI><a href="#[82]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[88]">task1_led(void*)</a> from main.o(i._Z9task1_ledPv) referenced from main.o(i.main)
 <LI><a href="#[a0]">TCloseEvent::~TCloseEvent__deallocating()</a> from tapplication.o(i._ZN11TCloseEventD0Ev) referenced from tapplication.o(.constdata__ZTV11TCloseEvent)
 <LI><a href="#[b8]">TIconButton::sig_depress(long, long)</a> from ticonbutton.o(i._ZN11TIconButton11sig_depressEll) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[b9]">TIconButton::sig_release(long, long)</a> from ticonbutton.o(i._ZN11TIconButton11sig_releaseEll) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[a4]">TIconButton::show()</a> from ticonbutton.o(i._ZN11TIconButton4showEv) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[ba]">TIconButton::release()</a> from ticonbutton.o(i._ZN11TIconButton7releaseEv) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[a2]">TIconButton::~TIconButton__deallocating()</a> from ticonbutton.o(i._ZN11TIconButtonD0Ev) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[a1]">TIconButton::~TIconButton()</a> from ticonbutton.o(i._ZN11TIconButtonD1Ev) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[be]">TPushButton::sig_depress(long, long)</a> from tpushbutton.o(i._ZN11TPushButton11sig_depressEll) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[bf]">TPushButton::sig_release(long, long)</a> from tpushbutton.o(i._ZN11TPushButton11sig_releaseEll) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[bd]">TPushButton::show()</a> from tpushbutton.o(i._ZN11TPushButton4showEv) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[c0]">TPushButton::release()</a> from tpushbutton.o(i._ZN11TPushButton7releaseEv) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[bc]">TPushButton::~TPushButton__deallocating()</a> from tpushbutton.o(i._ZN11TPushButtonD0Ev) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[bb]">TPushButton::~TPushButton()</a> from tpushbutton.o(i._ZN11TPushButtonD1Ev) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[c2]">TTouchEvent::~TTouchEvent__deallocating()</a> from tapplication.o(i._ZN11TTouchEventD0Ev) referenced from tapplication.o(.constdata__ZTV11TTouchEvent)
 <LI><a href="#[c1]">TTouchEvent::~TTouchEvent()</a> from tapplication.o(i._ZN11TTouchEventD1Ev) referenced from tapplication.o(.constdata__ZTV11TTouchEvent)
 <LI><a href="#[c3]">TWidgetList::clear()</a> from twidget.o(i._ZN11TWidgetList5clearEv) referenced from twidget.o(.constdata__ZTV11TWidgetList)
 <LI><a href="#[c7]">TWidgetList::count()</a> from twidget.o(i._ZN11TWidgetList5countEv) referenced from twidget.o(.constdata__ZTV11TWidgetList)
 <LI><a href="#[c4]">TWidgetList::~TWidgetList__deallocating()</a> from twidget.o(i._ZN11TWidgetListD0Ev) referenced from twidget.o(.constdata__ZTV11TWidgetList)
 <LI><a href="#[cb]">TConnectList::count()</a> from tobject.o(i._ZN12TConnectList5countEv) referenced from tobject.o(.constdata__ZTV12TConnectList)
 <LI><a href="#[c8]">TConnectList::~TConnectList__deallocating()</a> from tobject.o(i._ZN12TConnectListD0Ev) referenced from tobject.o(.constdata__ZTV12TConnectList)
 <LI><a href="#[ce]">TTouchDirver::obtainData()</a> from tdirver.o(i._ZN12TTouchDirver10obtainDataEv) referenced from tdirver.o(.constdata__ZTV12TTouchDirver)
 <LI><a href="#[cd]">TTouchDirver::dataBack()</a> from tdirver.o(i._ZN12TTouchDirver8dataBackEv) referenced from tdirver.o(.constdata__ZTV12TTouchDirver)
 <LI><a href="#[cc]">TTouchDirver::dataFront()</a> from tdirver.o(i._ZN12TTouchDirver9dataFrontEv) referenced from tdirver.o(.constdata__ZTV12TTouchDirver)
 <LI><a href="#[d1]">UserCalendar::show()</a> from usercalendar.o(i._ZN12UserCalendar4showEv) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[9f]">UserCalendar::nextMonth()</a> from usercalendar.o(i._ZN12UserCalendar9nextMonthEv) referenced from usercalendar.o(.constdata)
 <LI><a href="#[9e]">UserCalendar::prevMonth()</a> from usercalendar.o(i._ZN12UserCalendar9prevMonthEv) referenced from usercalendar.o(.constdata)
 <LI><a href="#[d0]">UserCalendar::~UserCalendar__deallocating()</a> from usercalendar.o(i._ZN12UserCalendarD0Ev) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[cf]">UserCalendar::~UserCalendar()</a> from usercalendar.o(i._ZN12UserCalendarD1Ev) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[e7]">UserCalculate::show()</a> from usercalculate.o(i._ZN13UserCalculate4showEv) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[e6]">UserCalculate::~UserCalculate__deallocating()</a> from usercalculate.o(i._ZN13UserCalculateD0Ev) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[e5]">UserCalculate::~UserCalculate()</a> from usercalculate.o(i._ZN13UserCalculateD1Ev) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[b7]">TAbstractButton::closeEvent(TCloseEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton10closeEventEP11TCloseEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[b7]">TAbstractButton::closeEvent(TCloseEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton10closeEventEP11TCloseEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[b7]">TAbstractButton::closeEvent(TCloseEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton10closeEventEP11TCloseEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[b2]">TAbstractButton::enterEvent(TEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton10enterEventEP6TEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[b2]">TAbstractButton::enterEvent(TEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton10enterEventEP6TEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[b2]">TAbstractButton::enterEvent(TEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton10enterEventEP6TEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[b3]">TAbstractButton::leaveEvent(TEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton10leaveEventEP6TEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[b3]">TAbstractButton::leaveEvent(TEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton10leaveEventEP6TEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[b3]">TAbstractButton::leaveEvent(TEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton10leaveEventEP6TEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[b4]">TAbstractButton::painTEvent(TPainTEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton10painTEventEP11TPainTEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[b4]">TAbstractButton::painTEvent(TPainTEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton10painTEventEP11TPainTEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[b4]">TAbstractButton::painTEvent(TPainTEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton10painTEventEP11TPainTEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[b6]">TAbstractButton::resizeEvent(TResizeEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton11resizeEventEP12TResizeEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[b6]">TAbstractButton::resizeEvent(TResizeEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton11resizeEventEP12TResizeEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[b6]">TAbstractButton::resizeEvent(TResizeEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton11resizeEventEP12TResizeEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[b0]">TAbstractButton::focusInEvent(TFocusEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton12focusInEventEP11TFocusEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[b0]">TAbstractButton::focusInEvent(TFocusEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton12focusInEventEP11TFocusEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[b0]">TAbstractButton::focusInEvent(TFocusEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton12focusInEventEP11TFocusEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[b1]">TAbstractButton::focusOuTEvent(TFocusEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton13focusOuTEventEP11TFocusEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[b1]">TAbstractButton::focusOuTEvent(TFocusEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton13focusOuTEventEP11TFocusEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[b1]">TAbstractButton::focusOuTEvent(TFocusEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton13focusOuTEventEP11TFocusEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[ae]">TAbstractButton::keyPressEvent(TKeyEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton13keyPressEventEP9TKeyEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[ae]">TAbstractButton::keyPressEvent(TKeyEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton13keyPressEventEP9TKeyEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[ae]">TAbstractButton::keyPressEvent(TKeyEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton13keyPressEventEP9TKeyEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[ad]">TAbstractButton::mouseMoveEvent(TMouseEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton14mouseMoveEventEP11TMouseEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[ad]">TAbstractButton::mouseMoveEvent(TMouseEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton14mouseMoveEventEP11TMouseEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[ad]">TAbstractButton::mouseMoveEvent(TMouseEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton14mouseMoveEventEP11TMouseEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[a8]">TAbstractButton::touchMoveEvent(TTouchEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton14touchMoveEventEP11TTouchEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[a8]">TAbstractButton::touchMoveEvent(TTouchEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton14touchMoveEventEP11TTouchEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[a8]">TAbstractButton::touchMoveEvent(TTouchEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton14touchMoveEventEP11TTouchEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[af]">TAbstractButton::keyReleaseEvent(TKeyEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton15keyReleaseEventEP9TKeyEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[af]">TAbstractButton::keyReleaseEvent(TKeyEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton15keyReleaseEventEP9TKeyEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[af]">TAbstractButton::keyReleaseEvent(TKeyEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton15keyReleaseEventEP9TKeyEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[ac]">TAbstractButton::mouseClickEvent(TMouseEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton15mouseClickEventEP11TMouseEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[ac]">TAbstractButton::mouseClickEvent(TMouseEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton15mouseClickEventEP11TMouseEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[ac]">TAbstractButton::mouseClickEvent(TMouseEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton15mouseClickEventEP11TMouseEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[a9]">TAbstractButton::mousePressEvent(TMouseEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton15mousePressEventEP11TMouseEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[a9]">TAbstractButton::mousePressEvent(TMouseEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton15mousePressEventEP11TMouseEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[a9]">TAbstractButton::mousePressEvent(TMouseEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton15mousePressEventEP11TMouseEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[a7]">TAbstractButton::touchClickEvent(TTouchEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton15touchClickEventEP11TTouchEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[a7]">TAbstractButton::touchClickEvent(TTouchEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton15touchClickEventEP11TTouchEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[a7]">TAbstractButton::touchClickEvent(TTouchEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton15touchClickEventEP11TTouchEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[a5]">TAbstractButton::touchPressEvent(TTouchEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton15touchPressEventEP11TTouchEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[a5]">TAbstractButton::touchPressEvent(TTouchEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton15touchPressEventEP11TTouchEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[a5]">TAbstractButton::touchPressEvent(TTouchEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton15touchPressEventEP11TTouchEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[aa]">TAbstractButton::mouseReleaseEvent(TMouseEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton17mouseReleaseEventEP11TMouseEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[aa]">TAbstractButton::mouseReleaseEvent(TMouseEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton17mouseReleaseEventEP11TMouseEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[aa]">TAbstractButton::mouseReleaseEvent(TMouseEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton17mouseReleaseEventEP11TMouseEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[a6]">TAbstractButton::touchReleaseEvent(TTouchEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton17touchReleaseEventEP11TTouchEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[a6]">TAbstractButton::touchReleaseEvent(TTouchEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton17touchReleaseEventEP11TTouchEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[a6]">TAbstractButton::touchReleaseEvent(TTouchEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton17touchReleaseEventEP11TTouchEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[ab]">TAbstractButton::mouseDoubleClickEvent(TMouseEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton21mouseDoubleClickEventEP11TMouseEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[ab]">TAbstractButton::mouseDoubleClickEvent(TMouseEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton21mouseDoubleClickEventEP11TMouseEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[ab]">TAbstractButton::mouseDoubleClickEvent(TMouseEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton21mouseDoubleClickEventEP11TMouseEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[b5]">TAbstractButton::moveEvent(TMoveEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton9moveEventEP10TMoveEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[b5]">TAbstractButton::moveEvent(TMoveEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton9moveEventEP10TMoveEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[b5]">TAbstractButton::moveEvent(TMoveEvent*)</a> from tabstractbutton.o(i._ZN15TAbstractButton9moveEventEP10TMoveEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[e9]">TAbstractButton::~TAbstractButton__deallocating()</a> from tabstractbutton.o(i._ZN15TAbstractButtonD0Ev) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[e8]">TAbstractButton::~TAbstractButton__sub_object()</a> from tabstractbutton.o(i._ZN15TAbstractButtonD2Ev) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[81]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[84]">__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()</a> from rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev) referenced from rwcats.o(i.__sti___10_rwcats_cpp_64e8068e)
 <LI><a href="#[ec]">TFont::~TFont__deallocating()</a> from tfont.o(i._ZN5TFontD0Ev) referenced from tfont.o(.constdata__ZTV5TFont)
 <LI><a href="#[eb]">TFont::~TFont()</a> from tfont.o(i._ZN5TFontD1Ev) referenced from tfont.o(.constdata__ZTV5TFont)
 <LI><a href="#[c9]">TList&lang;TConnection*&rang;::deleteItem(void*)</a> from tobject.o(t._ZN5TListIP11TConnectionE10deleteItemEPv) referenced from tobject.o(.constdata__ZTV12TConnectList)
 <LI><a href="#[c9]">TList&lang;TConnection*&rang;::deleteItem(void*)</a> from tobject.o(t._ZN5TListIP11TConnectionE10deleteItemEPv) referenced from tobject.o(.constdata__ZTV5TListIP11TConnectionE)
 <LI><a href="#[ca]">TList&lang;TConnection*&rang;::compareItems(TConnection*, TConnection*)</a> from tobject.o(t._ZN5TListIP11TConnectionE12compareItemsES1_S1_) referenced from tobject.o(.constdata__ZTV12TConnectList)
 <LI><a href="#[ca]">TList&lang;TConnection*&rang;::compareItems(TConnection*, TConnection*)</a> from tobject.o(t._ZN5TListIP11TConnectionE12compareItemsES1_S1_) referenced from tobject.o(.constdata__ZTV5TListIP11TConnectionE)
 <LI><a href="#[ed]">TList&lang;TConnection*&rang;::clear()</a> from tobject.o(t._ZN5TListIP11TConnectionE5clearEv) referenced from tobject.o(.constdata__ZTV5TListIP11TConnectionE)
 <LI><a href="#[ef]">TList&lang;TConnection*&rang;::~TList__deallocating()</a> from tobject.o(t._ZN5TListIP11TConnectionED0Ev) referenced from tobject.o(.constdata__ZTV5TListIP11TConnectionE)
 <LI><a href="#[ee]">TList&lang;TConnection*&rang;::~TList()</a> from tobject.o(t._ZN5TListIP11TConnectionED1Ev) referenced from tobject.o(.constdata__ZTV5TListIP11TConnectionE)
 <LI><a href="#[f3]">TList&lang;TObject*&rang;::deleteItem(void*)</a> from tconnection.o(t._ZN5TListIP7TObjectE10deleteItemEPv) referenced from tconnection.o(.constdata__ZTV5TListIP7TObjectE)
 <LI><a href="#[f3]">TList&lang;TObject*&rang;::deleteItem(void*)</a> from tconnection.o(t._ZN5TListIP7TObjectE10deleteItemEPv) referenced from tconnection.o(.constdata__ZTV8TObjList)
 <LI><a href="#[f4]">TList&lang;TObject*&rang;::compareItems(TObject*, TObject*)</a> from tconnection.o(t._ZN5TListIP7TObjectE12compareItemsES1_S1_) referenced from tconnection.o(.constdata__ZTV5TListIP7TObjectE)
 <LI><a href="#[f0]">TList&lang;TObject*&rang;::clear()</a> from tconnection.o(t._ZN5TListIP7TObjectE5clearEv) referenced from tconnection.o(.constdata__ZTV5TListIP7TObjectE)
 <LI><a href="#[f2]">TList&lang;TObject*&rang;::~TList__deallocating()</a> from tconnection.o(t._ZN5TListIP7TObjectED0Ev) referenced from tconnection.o(.constdata__ZTV5TListIP7TObjectE)
 <LI><a href="#[f1]">TList&lang;TObject*&rang;::~TList()</a> from tconnection.o(t._ZN5TListIP7TObjectED1Ev) referenced from tconnection.o(.constdata__ZTV5TListIP7TObjectE)
 <LI><a href="#[c5]">TList&lang;TWidget*&rang;::deleteItem(void*)</a> from twidget.o(t._ZN5TListIP7TWidgetE10deleteItemEPv) referenced from twidget.o(.constdata__ZTV11TWidgetList)
 <LI><a href="#[c5]">TList&lang;TWidget*&rang;::deleteItem(void*)</a> from twidget.o(t._ZN5TListIP7TWidgetE10deleteItemEPv) referenced from twidget.o(.constdata__ZTV5TListIP7TWidgetE)
 <LI><a href="#[c6]">TList&lang;TWidget*&rang;::compareItems(TWidget*, TWidget*)</a> from twidget.o(t._ZN5TListIP7TWidgetE12compareItemsES1_S1_) referenced from twidget.o(.constdata__ZTV11TWidgetList)
 <LI><a href="#[c6]">TList&lang;TWidget*&rang;::compareItems(TWidget*, TWidget*)</a> from twidget.o(t._ZN5TListIP7TWidgetE12compareItemsES1_S1_) referenced from twidget.o(.constdata__ZTV5TListIP7TWidgetE)
 <LI><a href="#[f5]">TList&lang;TWidget*&rang;::clear()</a> from twidget.o(t._ZN5TListIP7TWidgetE5clearEv) referenced from twidget.o(.constdata__ZTV5TListIP7TWidgetE)
 <LI><a href="#[f7]">TList&lang;TWidget*&rang;::~TList__deallocating()</a> from twidget.o(t._ZN5TListIP7TWidgetED0Ev) referenced from twidget.o(.constdata__ZTV5TListIP7TWidgetE)
 <LI><a href="#[f6]">TList&lang;TWidget*&rang;::~TList()</a> from twidget.o(t._ZN5TListIP7TWidgetED1Ev) referenced from twidget.o(.constdata__ZTV5TListIP7TWidgetE)
 <LI><a href="#[f9]">TArray::newData()</a> from tarray.o(i._ZN6TArray7newDataEv) referenced from tarray.o(.constdata__ZTV6TArray)
 <LI><a href="#[f9]">TArray::newData()</a> from tarray.o(i._ZN6TArray7newDataEv) referenced from tstring.o(.constdata__ZTV7TString)
 <LI><a href="#[f8]">TArray::~TArray()</a> from tarray.o(i._ZN6TArrayD1Ev) referenced from tarray.o(.constdata__ZTV6TArray)
 <LI><a href="#[fb]">TEvent::~TEvent__deallocating()</a> from tapplication.o(i._ZN6TEventD0Ev) referenced from tapplication.o(.constdata__ZTV6TEvent)
 <LI><a href="#[fa]">TEvent::~TEvent()</a> from tapplication.o(i._ZN6TEventD1Ev) referenced from tapplication.o(.constdata__ZTV6TEvent)
 <LI><a href="#[110]">TFrame::closeEvent(TCloseEvent*)</a> from tframe.o(i._ZN6TFrame10closeEventEP11TCloseEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[110]">TFrame::closeEvent(TCloseEvent*)</a> from tframe.o(i._ZN6TFrame10closeEventEP11TCloseEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[10b]">TFrame::enterEvent(TEvent*)</a> from tframe.o(i._ZN6TFrame10enterEventEP6TEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[10b]">TFrame::enterEvent(TEvent*)</a> from tframe.o(i._ZN6TFrame10enterEventEP6TEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[10c]">TFrame::leaveEvent(TEvent*)</a> from tframe.o(i._ZN6TFrame10leaveEventEP6TEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[10c]">TFrame::leaveEvent(TEvent*)</a> from tframe.o(i._ZN6TFrame10leaveEventEP6TEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[10d]">TFrame::painTEvent(TPainTEvent*)</a> from tframe.o(i._ZN6TFrame10painTEventEP11TPainTEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[10d]">TFrame::painTEvent(TPainTEvent*)</a> from tframe.o(i._ZN6TFrame10painTEventEP11TPainTEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[10f]">TFrame::resizeEvent(TResizeEvent*)</a> from tframe.o(i._ZN6TFrame11resizeEventEP12TResizeEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[10f]">TFrame::resizeEvent(TResizeEvent*)</a> from tframe.o(i._ZN6TFrame11resizeEventEP12TResizeEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[109]">TFrame::focusInEvent(TFocusEvent*)</a> from tframe.o(i._ZN6TFrame12focusInEventEP11TFocusEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[109]">TFrame::focusInEvent(TFocusEvent*)</a> from tframe.o(i._ZN6TFrame12focusInEventEP11TFocusEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[10a]">TFrame::focusOuTEvent(TFocusEvent*)</a> from tframe.o(i._ZN6TFrame13focusOuTEventEP11TFocusEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[10a]">TFrame::focusOuTEvent(TFocusEvent*)</a> from tframe.o(i._ZN6TFrame13focusOuTEventEP11TFocusEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[107]">TFrame::keyPressEvent(TKeyEvent*)</a> from tframe.o(i._ZN6TFrame13keyPressEventEP9TKeyEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[107]">TFrame::keyPressEvent(TKeyEvent*)</a> from tframe.o(i._ZN6TFrame13keyPressEventEP9TKeyEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[106]">TFrame::mouseMoveEvent(TMouseEvent*)</a> from tframe.o(i._ZN6TFrame14mouseMoveEventEP11TMouseEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[106]">TFrame::mouseMoveEvent(TMouseEvent*)</a> from tframe.o(i._ZN6TFrame14mouseMoveEventEP11TMouseEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[101]">TFrame::touchMoveEvent(TTouchEvent*)</a> from tframe.o(i._ZN6TFrame14touchMoveEventEP11TTouchEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[101]">TFrame::touchMoveEvent(TTouchEvent*)</a> from tframe.o(i._ZN6TFrame14touchMoveEventEP11TTouchEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[108]">TFrame::keyReleaseEvent(TKeyEvent*)</a> from tframe.o(i._ZN6TFrame15keyReleaseEventEP9TKeyEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[108]">TFrame::keyReleaseEvent(TKeyEvent*)</a> from tframe.o(i._ZN6TFrame15keyReleaseEventEP9TKeyEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[105]">TFrame::mouseClickEvent(TMouseEvent*)</a> from tframe.o(i._ZN6TFrame15mouseClickEventEP11TMouseEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[105]">TFrame::mouseClickEvent(TMouseEvent*)</a> from tframe.o(i._ZN6TFrame15mouseClickEventEP11TMouseEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[102]">TFrame::mousePressEvent(TMouseEvent*)</a> from tframe.o(i._ZN6TFrame15mousePressEventEP11TMouseEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[102]">TFrame::mousePressEvent(TMouseEvent*)</a> from tframe.o(i._ZN6TFrame15mousePressEventEP11TMouseEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[100]">TFrame::touchClickEvent(TTouchEvent*)</a> from tframe.o(i._ZN6TFrame15touchClickEventEP11TTouchEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[100]">TFrame::touchClickEvent(TTouchEvent*)</a> from tframe.o(i._ZN6TFrame15touchClickEventEP11TTouchEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[fe]">TFrame::touchPressEvent(TTouchEvent*)</a> from tframe.o(i._ZN6TFrame15touchPressEventEP11TTouchEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[fe]">TFrame::touchPressEvent(TTouchEvent*)</a> from tframe.o(i._ZN6TFrame15touchPressEventEP11TTouchEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[103]">TFrame::mouseReleaseEvent(TMouseEvent*)</a> from tframe.o(i._ZN6TFrame17mouseReleaseEventEP11TMouseEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[103]">TFrame::mouseReleaseEvent(TMouseEvent*)</a> from tframe.o(i._ZN6TFrame17mouseReleaseEventEP11TMouseEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[ff]">TFrame::touchReleaseEvent(TTouchEvent*)</a> from tframe.o(i._ZN6TFrame17touchReleaseEventEP11TTouchEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[ff]">TFrame::touchReleaseEvent(TTouchEvent*)</a> from tframe.o(i._ZN6TFrame17touchReleaseEventEP11TTouchEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[104]">TFrame::mouseDoubleClickEvent(TMouseEvent*)</a> from tframe.o(i._ZN6TFrame21mouseDoubleClickEventEP11TMouseEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[104]">TFrame::mouseDoubleClickEvent(TMouseEvent*)</a> from tframe.o(i._ZN6TFrame21mouseDoubleClickEventEP11TMouseEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[10e]">TFrame::moveEvent(TMoveEvent*)</a> from tframe.o(i._ZN6TFrame9moveEventEP10TMoveEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[10e]">TFrame::moveEvent(TMoveEvent*)</a> from tframe.o(i._ZN6TFrame9moveEventEP10TMoveEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[fd]">TFrame::~TFrame__deallocating()</a> from tframe.o(i._ZN6TFrameD0Ev) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[fc]">TFrame::~TFrame__sub_object()</a> from tframe.o(i._ZN6TFrameD2Ev) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[113]">TLabel::show()</a> from tlabel.o(i._ZN6TLabel4showEv) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[112]">TLabel::~TLabel__deallocating()</a> from tlabel.o(i._ZN6TLabelD0Ev) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[111]">TLabel::~TLabel()</a> from tlabel.o(i._ZN6TLabelD1Ev) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[99]">Desktop::closeSetup()</a> from desktop.o(i._ZN7Desktop10closeSetupEv) referenced from desktop.o(.constdata)
 <LI><a href="#[96]">Desktop::openCalculate()</a> from desktop.o(i._ZN7Desktop13openCalculateEv) referenced from desktop.o(.constdata)
 <LI><a href="#[116]">Desktop::show()</a> from desktop.o(i._ZN7Desktop4showEv) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[94]">Desktop::openDate()</a> from desktop.o(i._ZN7Desktop8openDateEv) referenced from desktop.o(.constdata)
 <LI><a href="#[98]">Desktop::openGame()</a> from desktop.o(i._ZN7Desktop8openGameEv) referenced from desktop.o(.constdata)
 <LI><a href="#[97]">Desktop::openPhoto()</a> from desktop.o(i._ZN7Desktop9openPhotoEv) referenced from desktop.o(.constdata)
 <LI><a href="#[95]">Desktop::openSetup()</a> from desktop.o(i._ZN7Desktop9openSetupEv) referenced from desktop.o(.constdata)
 <LI><a href="#[93]">Desktop::openTimer()</a> from desktop.o(i._ZN7Desktop9openTimerEv) referenced from desktop.o(.constdata)
 <LI><a href="#[115]">Desktop::~Desktop__deallocating()</a> from desktop.o(i._ZN7DesktopD0Ev) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[114]">Desktop::~Desktop()</a> from desktop.o(i._ZN7DesktopD1Ev) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[e4]">TDialog::closeEvent(TCloseEvent*)</a> from tdialog.o(i._ZN7TDialog10closeEventEP11TCloseEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[e4]">TDialog::closeEvent(TCloseEvent*)</a> from tdialog.o(i._ZN7TDialog10closeEventEP11TCloseEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[e4]">TDialog::closeEvent(TCloseEvent*)</a> from tdialog.o(i._ZN7TDialog10closeEventEP11TCloseEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[e4]">TDialog::closeEvent(TCloseEvent*)</a> from tdialog.o(i._ZN7TDialog10closeEventEP11TCloseEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[df]">TDialog::enterEvent(TEvent*)</a> from tdialog.o(i._ZN7TDialog10enterEventEP6TEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[df]">TDialog::enterEvent(TEvent*)</a> from tdialog.o(i._ZN7TDialog10enterEventEP6TEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[df]">TDialog::enterEvent(TEvent*)</a> from tdialog.o(i._ZN7TDialog10enterEventEP6TEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[df]">TDialog::enterEvent(TEvent*)</a> from tdialog.o(i._ZN7TDialog10enterEventEP6TEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[e0]">TDialog::leaveEvent(TEvent*)</a> from tdialog.o(i._ZN7TDialog10leaveEventEP6TEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[e0]">TDialog::leaveEvent(TEvent*)</a> from tdialog.o(i._ZN7TDialog10leaveEventEP6TEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[e0]">TDialog::leaveEvent(TEvent*)</a> from tdialog.o(i._ZN7TDialog10leaveEventEP6TEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[e0]">TDialog::leaveEvent(TEvent*)</a> from tdialog.o(i._ZN7TDialog10leaveEventEP6TEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[e1]">TDialog::painTEvent(TPainTEvent*)</a> from tdialog.o(i._ZN7TDialog10painTEventEP11TPainTEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[e1]">TDialog::painTEvent(TPainTEvent*)</a> from tdialog.o(i._ZN7TDialog10painTEventEP11TPainTEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[e1]">TDialog::painTEvent(TPainTEvent*)</a> from tdialog.o(i._ZN7TDialog10painTEventEP11TPainTEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[e1]">TDialog::painTEvent(TPainTEvent*)</a> from tdialog.o(i._ZN7TDialog10painTEventEP11TPainTEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[e3]">TDialog::resizeEvent(TResizeEvent*)</a> from tdialog.o(i._ZN7TDialog11resizeEventEP12TResizeEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[e3]">TDialog::resizeEvent(TResizeEvent*)</a> from tdialog.o(i._ZN7TDialog11resizeEventEP12TResizeEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[e3]">TDialog::resizeEvent(TResizeEvent*)</a> from tdialog.o(i._ZN7TDialog11resizeEventEP12TResizeEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[e3]">TDialog::resizeEvent(TResizeEvent*)</a> from tdialog.o(i._ZN7TDialog11resizeEventEP12TResizeEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[dd]">TDialog::focusInEvent(TFocusEvent*)</a> from tdialog.o(i._ZN7TDialog12focusInEventEP11TFocusEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[dd]">TDialog::focusInEvent(TFocusEvent*)</a> from tdialog.o(i._ZN7TDialog12focusInEventEP11TFocusEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[dd]">TDialog::focusInEvent(TFocusEvent*)</a> from tdialog.o(i._ZN7TDialog12focusInEventEP11TFocusEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[dd]">TDialog::focusInEvent(TFocusEvent*)</a> from tdialog.o(i._ZN7TDialog12focusInEventEP11TFocusEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[de]">TDialog::focusOuTEvent(TFocusEvent*)</a> from tdialog.o(i._ZN7TDialog13focusOuTEventEP11TFocusEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[de]">TDialog::focusOuTEvent(TFocusEvent*)</a> from tdialog.o(i._ZN7TDialog13focusOuTEventEP11TFocusEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[de]">TDialog::focusOuTEvent(TFocusEvent*)</a> from tdialog.o(i._ZN7TDialog13focusOuTEventEP11TFocusEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[de]">TDialog::focusOuTEvent(TFocusEvent*)</a> from tdialog.o(i._ZN7TDialog13focusOuTEventEP11TFocusEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[db]">TDialog::keyPressEvent(TKeyEvent*)</a> from tdialog.o(i._ZN7TDialog13keyPressEventEP9TKeyEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[db]">TDialog::keyPressEvent(TKeyEvent*)</a> from tdialog.o(i._ZN7TDialog13keyPressEventEP9TKeyEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[db]">TDialog::keyPressEvent(TKeyEvent*)</a> from tdialog.o(i._ZN7TDialog13keyPressEventEP9TKeyEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[db]">TDialog::keyPressEvent(TKeyEvent*)</a> from tdialog.o(i._ZN7TDialog13keyPressEventEP9TKeyEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[da]">TDialog::mouseMoveEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog14mouseMoveEventEP11TMouseEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[da]">TDialog::mouseMoveEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog14mouseMoveEventEP11TMouseEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[da]">TDialog::mouseMoveEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog14mouseMoveEventEP11TMouseEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[da]">TDialog::mouseMoveEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog14mouseMoveEventEP11TMouseEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[d5]">TDialog::touchMoveEvent(TTouchEvent*)</a> from tdialog.o(i._ZN7TDialog14touchMoveEventEP11TTouchEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[d5]">TDialog::touchMoveEvent(TTouchEvent*)</a> from tdialog.o(i._ZN7TDialog14touchMoveEventEP11TTouchEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[d5]">TDialog::touchMoveEvent(TTouchEvent*)</a> from tdialog.o(i._ZN7TDialog14touchMoveEventEP11TTouchEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[d5]">TDialog::touchMoveEvent(TTouchEvent*)</a> from tdialog.o(i._ZN7TDialog14touchMoveEventEP11TTouchEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[dc]">TDialog::keyReleaseEvent(TKeyEvent*)</a> from tdialog.o(i._ZN7TDialog15keyReleaseEventEP9TKeyEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[dc]">TDialog::keyReleaseEvent(TKeyEvent*)</a> from tdialog.o(i._ZN7TDialog15keyReleaseEventEP9TKeyEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[dc]">TDialog::keyReleaseEvent(TKeyEvent*)</a> from tdialog.o(i._ZN7TDialog15keyReleaseEventEP9TKeyEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[dc]">TDialog::keyReleaseEvent(TKeyEvent*)</a> from tdialog.o(i._ZN7TDialog15keyReleaseEventEP9TKeyEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[d9]">TDialog::mouseClickEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog15mouseClickEventEP11TMouseEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[d9]">TDialog::mouseClickEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog15mouseClickEventEP11TMouseEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[d9]">TDialog::mouseClickEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog15mouseClickEventEP11TMouseEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[d9]">TDialog::mouseClickEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog15mouseClickEventEP11TMouseEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[d6]">TDialog::mousePressEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog15mousePressEventEP11TMouseEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[d6]">TDialog::mousePressEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog15mousePressEventEP11TMouseEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[d6]">TDialog::mousePressEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog15mousePressEventEP11TMouseEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[d6]">TDialog::mousePressEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog15mousePressEventEP11TMouseEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[d4]">TDialog::touchClickEvent(TTouchEvent*)</a> from tdialog.o(i._ZN7TDialog15touchClickEventEP11TTouchEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[d4]">TDialog::touchClickEvent(TTouchEvent*)</a> from tdialog.o(i._ZN7TDialog15touchClickEventEP11TTouchEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[d4]">TDialog::touchClickEvent(TTouchEvent*)</a> from tdialog.o(i._ZN7TDialog15touchClickEventEP11TTouchEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[d4]">TDialog::touchClickEvent(TTouchEvent*)</a> from tdialog.o(i._ZN7TDialog15touchClickEventEP11TTouchEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[d2]">TDialog::touchPressEvent(TTouchEvent*)</a> from tdialog.o(i._ZN7TDialog15touchPressEventEP11TTouchEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[d2]">TDialog::touchPressEvent(TTouchEvent*)</a> from tdialog.o(i._ZN7TDialog15touchPressEventEP11TTouchEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[d2]">TDialog::touchPressEvent(TTouchEvent*)</a> from tdialog.o(i._ZN7TDialog15touchPressEventEP11TTouchEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[d2]">TDialog::touchPressEvent(TTouchEvent*)</a> from tdialog.o(i._ZN7TDialog15touchPressEventEP11TTouchEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[d7]">TDialog::mouseReleaseEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog17mouseReleaseEventEP11TMouseEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[d7]">TDialog::mouseReleaseEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog17mouseReleaseEventEP11TMouseEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[d7]">TDialog::mouseReleaseEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog17mouseReleaseEventEP11TMouseEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[d7]">TDialog::mouseReleaseEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog17mouseReleaseEventEP11TMouseEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[d3]">TDialog::touchReleaseEvent(TTouchEvent*)</a> from tdialog.o(i._ZN7TDialog17touchReleaseEventEP11TTouchEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[d3]">TDialog::touchReleaseEvent(TTouchEvent*)</a> from tdialog.o(i._ZN7TDialog17touchReleaseEventEP11TTouchEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[d3]">TDialog::touchReleaseEvent(TTouchEvent*)</a> from tdialog.o(i._ZN7TDialog17touchReleaseEventEP11TTouchEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[d3]">TDialog::touchReleaseEvent(TTouchEvent*)</a> from tdialog.o(i._ZN7TDialog17touchReleaseEventEP11TTouchEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[d8]">TDialog::mouseDoubleClickEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog21mouseDoubleClickEventEP11TMouseEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[d8]">TDialog::mouseDoubleClickEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog21mouseDoubleClickEventEP11TMouseEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[d8]">TDialog::mouseDoubleClickEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog21mouseDoubleClickEventEP11TMouseEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[d8]">TDialog::mouseDoubleClickEvent(TMouseEvent*)</a> from tdialog.o(i._ZN7TDialog21mouseDoubleClickEventEP11TMouseEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[12c]">TDialog::show()</a> from tdialog.o(i._ZN7TDialog4showEv) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[e2]">TDialog::moveEvent(TMoveEvent*)</a> from tdialog.o(i._ZN7TDialog9moveEventEP10TMoveEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[e2]">TDialog::moveEvent(TMoveEvent*)</a> from tdialog.o(i._ZN7TDialog9moveEventEP10TMoveEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[e2]">TDialog::moveEvent(TMoveEvent*)</a> from tdialog.o(i._ZN7TDialog9moveEventEP10TMoveEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[e2]">TDialog::moveEvent(TMoveEvent*)</a> from tdialog.o(i._ZN7TDialog9moveEventEP10TMoveEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[12b]">TDialog::~TDialog__deallocating()</a> from tdialog.o(i._ZN7TDialogD0Ev) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[12a]">TDialog::~TDialog()</a> from tdialog.o(i._ZN7TDialogD1Ev) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[12e]">TObject::~TObject__deallocating()</a> from tobject.o(i._ZN7TObjectD0Ev) referenced from tobject.o(.constdata__ZTV7TObject)
 <LI><a href="#[12d]">TObject::~TObject__sub_object()</a> from tobject.o(i._ZN7TObjectD2Ev) referenced from tobject.o(.constdata__ZTV7TObject)
 <LI><a href="#[130]">TString::~TString__deallocating()</a> from tstring.o(i._ZN7TStringD0Ev) referenced from tstring.o(.constdata__ZTV7TString)
 <LI><a href="#[12f]">TString::~TString()</a> from tstring.o(i._ZN7TStringD1Ev) referenced from tstring.o(.constdata__ZTV7TString)
 <LI><a href="#[133]">TWidget::closeEvent(TCloseEvent*)</a> from twidget.o(i._ZN7TWidget10closeEventEP11TCloseEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[133]">TWidget::closeEvent(TCloseEvent*)</a> from twidget.o(i._ZN7TWidget10closeEventEP11TCloseEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[124]">TWidget::enterEvent(TEvent*)</a> from twidget.o(i._ZN7TWidget10enterEventEP6TEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[124]">TWidget::enterEvent(TEvent*)</a> from twidget.o(i._ZN7TWidget10enterEventEP6TEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[124]">TWidget::enterEvent(TEvent*)</a> from twidget.o(i._ZN7TWidget10enterEventEP6TEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[124]">TWidget::enterEvent(TEvent*)</a> from twidget.o(i._ZN7TWidget10enterEventEP6TEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[124]">TWidget::enterEvent(TEvent*)</a> from twidget.o(i._ZN7TWidget10enterEventEP6TEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[124]">TWidget::enterEvent(TEvent*)</a> from twidget.o(i._ZN7TWidget10enterEventEP6TEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[125]">TWidget::leaveEvent(TEvent*)</a> from twidget.o(i._ZN7TWidget10leaveEventEP6TEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[125]">TWidget::leaveEvent(TEvent*)</a> from twidget.o(i._ZN7TWidget10leaveEventEP6TEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[125]">TWidget::leaveEvent(TEvent*)</a> from twidget.o(i._ZN7TWidget10leaveEventEP6TEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[125]">TWidget::leaveEvent(TEvent*)</a> from twidget.o(i._ZN7TWidget10leaveEventEP6TEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[125]">TWidget::leaveEvent(TEvent*)</a> from twidget.o(i._ZN7TWidget10leaveEventEP6TEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[125]">TWidget::leaveEvent(TEvent*)</a> from twidget.o(i._ZN7TWidget10leaveEventEP6TEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[126]">TWidget::painTEvent(TPainTEvent*)</a> from twidget.o(i._ZN7TWidget10painTEventEP11TPainTEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[126]">TWidget::painTEvent(TPainTEvent*)</a> from twidget.o(i._ZN7TWidget10painTEventEP11TPainTEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[126]">TWidget::painTEvent(TPainTEvent*)</a> from twidget.o(i._ZN7TWidget10painTEventEP11TPainTEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[126]">TWidget::painTEvent(TPainTEvent*)</a> from twidget.o(i._ZN7TWidget10painTEventEP11TPainTEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[126]">TWidget::painTEvent(TPainTEvent*)</a> from twidget.o(i._ZN7TWidget10painTEventEP11TPainTEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[126]">TWidget::painTEvent(TPainTEvent*)</a> from twidget.o(i._ZN7TWidget10painTEventEP11TPainTEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[a3]">TWidget::eventFilter(TEvent*)</a> from twidget.o(i._ZN7TWidget11eventFilterEP6TEvent) referenced from ticonbutton.o(.constdata__ZTV11TIconButton)
 <LI><a href="#[a3]">TWidget::eventFilter(TEvent*)</a> from twidget.o(i._ZN7TWidget11eventFilterEP6TEvent) referenced from tpushbutton.o(.constdata__ZTV11TPushButton)
 <LI><a href="#[a3]">TWidget::eventFilter(TEvent*)</a> from twidget.o(i._ZN7TWidget11eventFilterEP6TEvent) referenced from usercalendar.o(.constdata__ZTV12UserCalendar)
 <LI><a href="#[a3]">TWidget::eventFilter(TEvent*)</a> from twidget.o(i._ZN7TWidget11eventFilterEP6TEvent) referenced from usercalculate.o(.constdata__ZTV13UserCalculate)
 <LI><a href="#[a3]">TWidget::eventFilter(TEvent*)</a> from twidget.o(i._ZN7TWidget11eventFilterEP6TEvent) referenced from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[a3]">TWidget::eventFilter(TEvent*)</a> from twidget.o(i._ZN7TWidget11eventFilterEP6TEvent) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[a3]">TWidget::eventFilter(TEvent*)</a> from twidget.o(i._ZN7TWidget11eventFilterEP6TEvent) referenced from tlabel.o(.constdata__ZTV6TLabel)
 <LI><a href="#[a3]">TWidget::eventFilter(TEvent*)</a> from twidget.o(i._ZN7TWidget11eventFilterEP6TEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[a3]">TWidget::eventFilter(TEvent*)</a> from twidget.o(i._ZN7TWidget11eventFilterEP6TEvent) referenced from tdialog.o(.constdata__ZTV7TDialog)
 <LI><a href="#[a3]">TWidget::eventFilter(TEvent*)</a> from twidget.o(i._ZN7TWidget11eventFilterEP6TEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[a3]">TWidget::eventFilter(TEvent*)</a> from twidget.o(i._ZN7TWidget11eventFilterEP6TEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[a3]">TWidget::eventFilter(TEvent*)</a> from twidget.o(i._ZN7TWidget11eventFilterEP6TEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[a3]">TWidget::eventFilter(TEvent*)</a> from twidget.o(i._ZN7TWidget11eventFilterEP6TEvent) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[a3]">TWidget::eventFilter(TEvent*)</a> from twidget.o(i._ZN7TWidget11eventFilterEP6TEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[a3]">TWidget::eventFilter(TEvent*)</a> from twidget.o(i._ZN7TWidget11eventFilterEP6TEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[128]">TWidget::resizeEvent(TResizeEvent*)</a> from twidget.o(i._ZN7TWidget11resizeEventEP12TResizeEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[128]">TWidget::resizeEvent(TResizeEvent*)</a> from twidget.o(i._ZN7TWidget11resizeEventEP12TResizeEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[128]">TWidget::resizeEvent(TResizeEvent*)</a> from twidget.o(i._ZN7TWidget11resizeEventEP12TResizeEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[128]">TWidget::resizeEvent(TResizeEvent*)</a> from twidget.o(i._ZN7TWidget11resizeEventEP12TResizeEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[128]">TWidget::resizeEvent(TResizeEvent*)</a> from twidget.o(i._ZN7TWidget11resizeEventEP12TResizeEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[128]">TWidget::resizeEvent(TResizeEvent*)</a> from twidget.o(i._ZN7TWidget11resizeEventEP12TResizeEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[122]">TWidget::focusInEvent(TFocusEvent*)</a> from twidget.o(i._ZN7TWidget12focusInEventEP11TFocusEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[122]">TWidget::focusInEvent(TFocusEvent*)</a> from twidget.o(i._ZN7TWidget12focusInEventEP11TFocusEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[122]">TWidget::focusInEvent(TFocusEvent*)</a> from twidget.o(i._ZN7TWidget12focusInEventEP11TFocusEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[122]">TWidget::focusInEvent(TFocusEvent*)</a> from twidget.o(i._ZN7TWidget12focusInEventEP11TFocusEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[122]">TWidget::focusInEvent(TFocusEvent*)</a> from twidget.o(i._ZN7TWidget12focusInEventEP11TFocusEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[122]">TWidget::focusInEvent(TFocusEvent*)</a> from twidget.o(i._ZN7TWidget12focusInEventEP11TFocusEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[123]">TWidget::focusOuTEvent(TFocusEvent*)</a> from twidget.o(i._ZN7TWidget13focusOuTEventEP11TFocusEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[123]">TWidget::focusOuTEvent(TFocusEvent*)</a> from twidget.o(i._ZN7TWidget13focusOuTEventEP11TFocusEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[123]">TWidget::focusOuTEvent(TFocusEvent*)</a> from twidget.o(i._ZN7TWidget13focusOuTEventEP11TFocusEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[123]">TWidget::focusOuTEvent(TFocusEvent*)</a> from twidget.o(i._ZN7TWidget13focusOuTEventEP11TFocusEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[123]">TWidget::focusOuTEvent(TFocusEvent*)</a> from twidget.o(i._ZN7TWidget13focusOuTEventEP11TFocusEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[123]">TWidget::focusOuTEvent(TFocusEvent*)</a> from twidget.o(i._ZN7TWidget13focusOuTEventEP11TFocusEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[120]">TWidget::keyPressEvent(TKeyEvent*)</a> from twidget.o(i._ZN7TWidget13keyPressEventEP9TKeyEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[120]">TWidget::keyPressEvent(TKeyEvent*)</a> from twidget.o(i._ZN7TWidget13keyPressEventEP9TKeyEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[120]">TWidget::keyPressEvent(TKeyEvent*)</a> from twidget.o(i._ZN7TWidget13keyPressEventEP9TKeyEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[120]">TWidget::keyPressEvent(TKeyEvent*)</a> from twidget.o(i._ZN7TWidget13keyPressEventEP9TKeyEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[120]">TWidget::keyPressEvent(TKeyEvent*)</a> from twidget.o(i._ZN7TWidget13keyPressEventEP9TKeyEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[120]">TWidget::keyPressEvent(TKeyEvent*)</a> from twidget.o(i._ZN7TWidget13keyPressEventEP9TKeyEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[11f]">TWidget::mouseMoveEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget14mouseMoveEventEP11TMouseEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[11f]">TWidget::mouseMoveEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget14mouseMoveEventEP11TMouseEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[11f]">TWidget::mouseMoveEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget14mouseMoveEventEP11TMouseEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[11f]">TWidget::mouseMoveEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget14mouseMoveEventEP11TMouseEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[11f]">TWidget::mouseMoveEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget14mouseMoveEventEP11TMouseEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[11f]">TWidget::mouseMoveEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget14mouseMoveEventEP11TMouseEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[11a]">TWidget::touchMoveEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget14touchMoveEventEP11TTouchEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[11a]">TWidget::touchMoveEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget14touchMoveEventEP11TTouchEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[11a]">TWidget::touchMoveEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget14touchMoveEventEP11TTouchEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[11a]">TWidget::touchMoveEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget14touchMoveEventEP11TTouchEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[11a]">TWidget::touchMoveEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget14touchMoveEventEP11TTouchEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[11a]">TWidget::touchMoveEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget14touchMoveEventEP11TTouchEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[121]">TWidget::keyReleaseEvent(TKeyEvent*)</a> from twidget.o(i._ZN7TWidget15keyReleaseEventEP9TKeyEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[121]">TWidget::keyReleaseEvent(TKeyEvent*)</a> from twidget.o(i._ZN7TWidget15keyReleaseEventEP9TKeyEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[121]">TWidget::keyReleaseEvent(TKeyEvent*)</a> from twidget.o(i._ZN7TWidget15keyReleaseEventEP9TKeyEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[121]">TWidget::keyReleaseEvent(TKeyEvent*)</a> from twidget.o(i._ZN7TWidget15keyReleaseEventEP9TKeyEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[121]">TWidget::keyReleaseEvent(TKeyEvent*)</a> from twidget.o(i._ZN7TWidget15keyReleaseEventEP9TKeyEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[121]">TWidget::keyReleaseEvent(TKeyEvent*)</a> from twidget.o(i._ZN7TWidget15keyReleaseEventEP9TKeyEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[11e]">TWidget::mouseClickEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget15mouseClickEventEP11TMouseEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[11e]">TWidget::mouseClickEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget15mouseClickEventEP11TMouseEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[11e]">TWidget::mouseClickEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget15mouseClickEventEP11TMouseEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[11e]">TWidget::mouseClickEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget15mouseClickEventEP11TMouseEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[11e]">TWidget::mouseClickEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget15mouseClickEventEP11TMouseEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[11e]">TWidget::mouseClickEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget15mouseClickEventEP11TMouseEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[11b]">TWidget::mousePressEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget15mousePressEventEP11TMouseEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[11b]">TWidget::mousePressEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget15mousePressEventEP11TMouseEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[11b]">TWidget::mousePressEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget15mousePressEventEP11TMouseEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[11b]">TWidget::mousePressEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget15mousePressEventEP11TMouseEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[11b]">TWidget::mousePressEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget15mousePressEventEP11TMouseEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[11b]">TWidget::mousePressEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget15mousePressEventEP11TMouseEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[119]">TWidget::touchClickEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget15touchClickEventEP11TTouchEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[119]">TWidget::touchClickEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget15touchClickEventEP11TTouchEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[119]">TWidget::touchClickEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget15touchClickEventEP11TTouchEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[119]">TWidget::touchClickEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget15touchClickEventEP11TTouchEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[119]">TWidget::touchClickEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget15touchClickEventEP11TTouchEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[119]">TWidget::touchClickEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget15touchClickEventEP11TTouchEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[117]">TWidget::touchPressEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget15touchPressEventEP11TTouchEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[117]">TWidget::touchPressEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget15touchPressEventEP11TTouchEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[117]">TWidget::touchPressEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget15touchPressEventEP11TTouchEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[117]">TWidget::touchPressEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget15touchPressEventEP11TTouchEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[117]">TWidget::touchPressEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget15touchPressEventEP11TTouchEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[117]">TWidget::touchPressEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget15touchPressEventEP11TTouchEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[11c]">TWidget::mouseReleaseEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget17mouseReleaseEventEP11TMouseEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[11c]">TWidget::mouseReleaseEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget17mouseReleaseEventEP11TMouseEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[11c]">TWidget::mouseReleaseEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget17mouseReleaseEventEP11TMouseEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[11c]">TWidget::mouseReleaseEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget17mouseReleaseEventEP11TMouseEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[11c]">TWidget::mouseReleaseEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget17mouseReleaseEventEP11TMouseEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[11c]">TWidget::mouseReleaseEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget17mouseReleaseEventEP11TMouseEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[118]">TWidget::touchReleaseEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget17touchReleaseEventEP11TTouchEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[118]">TWidget::touchReleaseEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget17touchReleaseEventEP11TTouchEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[118]">TWidget::touchReleaseEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget17touchReleaseEventEP11TTouchEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[118]">TWidget::touchReleaseEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget17touchReleaseEventEP11TTouchEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[118]">TWidget::touchReleaseEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget17touchReleaseEventEP11TTouchEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[118]">TWidget::touchReleaseEvent(TTouchEvent*)</a> from twidget.o(i._ZN7TWidget17touchReleaseEventEP11TTouchEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[11d]">TWidget::mouseDoubleClickEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget21mouseDoubleClickEventEP11TMouseEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[11d]">TWidget::mouseDoubleClickEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget21mouseDoubleClickEventEP11TMouseEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[11d]">TWidget::mouseDoubleClickEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget21mouseDoubleClickEventEP11TMouseEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[11d]">TWidget::mouseDoubleClickEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget21mouseDoubleClickEventEP11TMouseEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[11d]">TWidget::mouseDoubleClickEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget21mouseDoubleClickEventEP11TMouseEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[11d]">TWidget::mouseDoubleClickEvent(TMouseEvent*)</a> from twidget.o(i._ZN7TWidget21mouseDoubleClickEventEP11TMouseEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[127]">TWidget::moveEvent(TMoveEvent*)</a> from twidget.o(i._ZN7TWidget9moveEventEP10TMoveEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[127]">TWidget::moveEvent(TMoveEvent*)</a> from twidget.o(i._ZN7TWidget9moveEventEP10TMoveEvent) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[127]">TWidget::moveEvent(TMoveEvent*)</a> from twidget.o(i._ZN7TWidget9moveEventEP10TMoveEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[127]">TWidget::moveEvent(TMoveEvent*)</a> from twidget.o(i._ZN7TWidget9moveEventEP10TMoveEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[127]">TWidget::moveEvent(TMoveEvent*)</a> from twidget.o(i._ZN7TWidget9moveEventEP10TMoveEvent) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[127]">TWidget::moveEvent(TMoveEvent*)</a> from twidget.o(i._ZN7TWidget9moveEventEP10TMoveEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[132]">TWidget::~TWidget__deallocating()</a> from twidget.o(i._ZN7TWidgetD0Ev) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[131]">TWidget::~TWidget__sub_object()</a> from twidget.o(i._ZN7TWidgetD2Ev) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[129]">TWindow::closeEvent(TCloseEvent*)</a> from twindow.o(i._ZN7TWindow10closeEventEP11TCloseEvent) referenced from desktop.o(.constdata__ZTV7Desktop)
 <LI><a href="#[129]">TWindow::closeEvent(TCloseEvent*)</a> from twindow.o(i._ZN7TWindow10closeEventEP11TCloseEvent) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[129]">TWindow::closeEvent(TCloseEvent*)</a> from twindow.o(i._ZN7TWindow10closeEventEP11TCloseEvent) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[129]">TWindow::closeEvent(TCloseEvent*)</a> from twindow.o(i._ZN7TWindow10closeEventEP11TCloseEvent) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[136]">TWindow::show()</a> from twindow.o(i._ZN7TWindow4showEv) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[135]">TWindow::~TWindow__deallocating()</a> from twindow.o(i._ZN7TWindowD0Ev) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[134]">TWindow::~TWindow()</a> from twindow.o(i._ZN7TWindowD1Ev) referenced from twindow.o(.constdata__ZTV7TWindow)
 <LI><a href="#[139]">TObjList::compareItems(TObject*, TObject*)</a> from tconnection.o(i._ZN8TObjList12compareItemsEP7TObjectS1_) referenced from tconnection.o(.constdata__ZTV8TObjList)
 <LI><a href="#[137]">TObjList::clear()</a> from tconnection.o(i._ZN8TObjList5clearEv) referenced from tconnection.o(.constdata__ZTV8TObjList)
 <LI><a href="#[13a]">TObjList::count()</a> from tconnection.o(i._ZN8TObjList5countEv) referenced from tconnection.o(.constdata__ZTV8TObjList)
 <LI><a href="#[138]">TObjList::~TObjList__deallocating()</a> from tconnection.o(i._ZN8TObjListD0Ev) referenced from tconnection.o(.constdata__ZTV8TObjList)
 <LI><a href="#[13d]">UserGame::show()</a> from usergame.o(i._ZN8UserGame4showEv) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[9d]">UserGame::closeGame()</a> from usergame.o(i._ZN8UserGame9closeGameEv) referenced from usergame.o(.constdata)
 <LI><a href="#[13c]">UserGame::~UserGame__deallocating()</a> from usergame.o(i._ZN8UserGameD0Ev) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[13b]">UserGame::~UserGame()</a> from usergame.o(i._ZN8UserGameD1Ev) referenced from usergame.o(.constdata__ZTV8UserGame)
 <LI><a href="#[140]">UserTime::show()</a> from usertime.o(i._ZN8UserTime4showEv) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[13f]">UserTime::~UserTime__deallocating()</a> from usertime.o(i._ZN8UserTimeD0Ev) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[13e]">UserTime::~UserTime()</a> from usertime.o(i._ZN8UserTimeD1Ev) referenced from usertime.o(.constdata__ZTV8UserTime)
 <LI><a href="#[143]">TImageBox::show()</a> from timagebox.o(i._ZN9TImageBox4showEv) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[142]">TImageBox::~TImageBox__deallocating()</a> from timagebox.o(i._ZN9TImageBoxD0Ev) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[141]">TImageBox::~TImageBox()</a> from timagebox.o(i._ZN9TImageBoxD1Ev) referenced from timagebox.o(.constdata__ZTV9TImageBox)
 <LI><a href="#[9a]">UserPhoto::closePhoto()</a> from userphoto.o(i._ZN9UserPhoto10closePhotoEv) referenced from userphoto.o(.constdata)
 <LI><a href="#[146]">UserPhoto::show()</a> from userphoto.o(i._ZN9UserPhoto4showEv) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[9c]">UserPhoto::nextPhoto()</a> from userphoto.o(i._ZN9UserPhoto9nextPhotoEv) referenced from userphoto.o(.constdata)
 <LI><a href="#[9b]">UserPhoto::prevPhoto()</a> from userphoto.o(i._ZN9UserPhoto9prevPhotoEv) referenced from userphoto.o(.constdata)
 <LI><a href="#[145]">UserPhoto::~UserPhoto__deallocating()</a> from userphoto.o(i._ZN9UserPhotoD0Ev) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[144]">UserPhoto::~UserPhoto()</a> from userphoto.o(i._ZN9UserPhotoD1Ev) referenced from userphoto.o(.constdata__ZTV9UserPhoto)
 <LI><a href="#[ea]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from tabstractbutton.o(.constdata__ZTV15TAbstractButton)
 <LI><a href="#[ea]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from tframe.o(.constdata__ZTV6TFrame)
 <LI><a href="#[ea]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from tobject.o(.constdata__ZTV7TObject)
 <LI><a href="#[ea]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from twidget.o(.constdata__ZTV7TWidget)
 <LI><a href="#[80]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429_439xx.o(.text)
 <LI><a href="#[148]">__sti___10_locale_cpp_ff99fc7b</a> from locale.o(i.__sti___10_locale_cpp_ff99fc7b) referenced from locale.o(.init_array)
 <LI><a href="#[149]">__sti___10_rwcats_cpp_64e8068e</a> from rwcats.o(i.__sti___10_rwcats_cpp_64e8068e) referenced from rwcats.o(.init_array)
 <LI><a href="#[147]">__sti___8_char_cpp_a3dc957a</a> from char.o(i.__sti___8_char_cpp_a3dc957a) referenced from char.o(.init_array)
 <LI><a href="#[83]">fputc</a> from usart_conf.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[85]">jpeg_in_func</a> from tjpgd.o(i.jpeg_in_func) referenced from tjpgd.o(i.jpg_decode)
 <LI><a href="#[85]">jpeg_in_func</a> from tjpgd.o(i.jpeg_in_func) referenced from tjpgd.o(i.jpg_decode_buf)
 <LI><a href="#[87]">jpeg_out_func_fill</a> from tjpgd.o(i.jpeg_out_func_fill) referenced from tjpgd.o(i.jpg_decode)
 <LI><a href="#[87]">jpeg_out_func_fill</a> from tjpgd.o(i.jpeg_out_func_fill) referenced from tjpgd.o(i.jpg_decode_buf)
 <LI><a href="#[86]">jpeg_out_func_point</a> from tjpgd.o(i.jpeg_out_func_point) referenced from tjpgd.o(i.jpg_decode)
 <LI><a href="#[86]">jpeg_out_func_point</a> from tjpgd.o(i.jpeg_out_func_point) referenced from tjpgd.o(i.jpg_decode_buf)
 <LI><a href="#[7d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[8e]">piclib_draw_hline</a> from piclib.o(i.piclib_draw_hline) referenced from piclib.o(i.piclib_init)
 <LI><a href="#[8c]">piclib_draw_point</a> from piclib.o(i.piclib_draw_point) referenced from piclib.o(i.piclib_init)
 <LI><a href="#[8d]">piclib_fill_color</a> from piclib.o(i.piclib_fill_color) referenced from piclib.o(i.piclib_init)
 <LI><a href="#[8f]">piclib_fill_colors</a> from piclib.o(i.piclib_fill_colors) referenced from piclib.o(i.piclib_init)
 <LI><a href="#[8b]">piclib_read_point</a> from piclib.o(i.piclib_read_point) referenced from piclib.o(i.piclib_init)
 <LI><a href="#[91]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[90]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[92]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[80]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(.text)
</UL>
<P><STRONG><a name="[3d1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[14b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[15c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3d2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[14d]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[3d3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3d4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3d5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[14e]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[3d6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1e]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3c2]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[3c1]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[20]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3ba]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[18]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[151]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3d7]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[3d8]"></a>___aeabi_memmove4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[3d9]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::duplicate(const char*, unsigned long)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::store(const char*, unsigned long)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned, unsigned)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[279]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_copy(LodePNGColorMode*, const LodePNGColorMode*)
</UL>

<P><STRONG><a name="[3da]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[37b]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memcpy
</UL>

<P><STRONG><a name="[3db]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3dc]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3dd]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getnextbyte
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::TApplication(TDirver*)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::addChild(TObject*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::connect(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection::TConnection(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::addAchgInvalid(TWidget*, TRect*, TRect*)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_initlzw
</UL>

<P><STRONG><a name="[3de]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[328]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::scanfile(const char*)
</UL>

<P><STRONG><a name="[206]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::TString(const char*)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::setStr(const char*)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_type_equals(const unsigned char*, const char*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_set(char**, const char*)
</UL>

<P><STRONG><a name="[2e7]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::ObFileType(const char*)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_filetype
</UL>

<P><STRONG><a name="[32a]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::scanfile(const char*)
</UL>

<P><STRONG><a name="[2e6]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::ObFileType(const char*)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_filetype
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::scanfile(const char*)
</UL>

<P><STRONG><a name="[82]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[153]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[3df]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[3e0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>__rt_new_handler_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[159]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[331]"></a>__rt_SIGPVFN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[157]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[158]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[14c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3e1]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[3e2]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[3e3]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_rwcats_cpp_64e8068e
</UL>

<P><STRONG><a name="[15e]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[14f]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[3e4]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[3e5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3e6]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[16a]"></a>DMA2D_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_dma2d.o(i.DMA2D_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2D_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_set_rect
</UL>

<P><STRONG><a name="[37e]"></a>DMA2D_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(i.DMA2D_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_set_rect
</UL>

<P><STRONG><a name="[37c]"></a>DMA2D_Init</STRONG> (Thumb, 174 bytes, Stack size 12 bytes, stm32f4xx_dma2d.o(i.DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA2D_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_set_rect
</UL>

<P><STRONG><a name="[37d]"></a>DMA2D_StartTransfer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_dma2d.o(i.DMA2D_StartTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_set_rect
</UL>

<P><STRONG><a name="[5d]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdio_sd_conf.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1d6]"></a>DMA_ClearFlag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[1d7]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[1d8]"></a>DMA_DeInit</STRONG> (Thumb, 278 bytes, Stack size 28 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[1db]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_FlowControllerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[1da]"></a>DMA_ITConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[1d9]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[1f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[186]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, delay_conf.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1_led(void*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[4a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = EXTI15_10_IRQHandler &rArr; GTP_TouchProcess &rArr; Goodix_TS_Work_Func &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_ReadBytes &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GREEN_Toggle
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_TouchProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[170]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>EXTI_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[191]"></a>EXTI_Init</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IRQEnable
</UL>

<P><STRONG><a name="[171]"></a>FLASHConfig</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, flash_conf.o(i.FLASHConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FLASHConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[1c4]"></a>FMC_GetFlagStatus</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_fmc.o(i.FMC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_InitSequence
</UL>

<P><STRONG><a name="[1c5]"></a>FMC_SDRAMCmdConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_fmc.o(i.FMC_SDRAMCmdConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_InitSequence
</UL>

<P><STRONG><a name="[1c2]"></a>FMC_SDRAMInit</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, stm32f4xx_fmc.o(i.FMC_SDRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_SDRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAMConfig
</UL>

<P><STRONG><a name="[1c7]"></a>FMC_SetRefreshCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_fmc.o(i.FMC_SetRefreshCount))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_InitSequence
</UL>

<P><STRONG><a name="[175]"></a>GPIO_Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_close()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1Config
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_GPIO_Config
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RED_Config
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GREEN_Config
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_BLUE_Config
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASHConfig
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetChip
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IRQEnable
</UL>

<P><STRONG><a name="[174]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1Config
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_GPIO_Config
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASHConfig
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
</UL>

<P><STRONG><a name="[1a2]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_close()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetChip
</UL>

<P><STRONG><a name="[1a4]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetChip
</UL>

<P><STRONG><a name="[1b9]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ToggleBits))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RED_Toggle
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GREEN_Toggle
</UL>

<P><STRONG><a name="[1b7]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RED_Config
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GREEN_Config
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_BLUE_Config
</UL>

<P><STRONG><a name="[182]"></a>GTP_Init_Panel</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, gt9xx.o(i.GTP_Init_Panel))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GTP_Init_Panel &rArr; GTP_Read_Version &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_ReadBytes &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IRQEnable
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Read_Version
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Write
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Test
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Get_Info
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>GTP_Read_Version</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, gt9xx.o(i.GTP_Read_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GTP_Read_Version &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_ReadBytes &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[16f]"></a>GTP_TouchProcess</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt9xx.o(i.GTP_TouchProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GTP_TouchProcess &rArr; Goodix_TS_Work_Func &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_ReadBytes &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[1a]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[198]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_AcknowledgeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mode_Config
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[19d]"></a>I2C_CheckEvent</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_CheckEvent))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[197]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mode_Config
</UL>

<P><STRONG><a name="[187]"></a>I2C_GTP_IRQEnable</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, touch_i2c.o(i.I2C_GTP_IRQEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_GTP_IRQEnable &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
</UL>

<P><STRONG><a name="[19c]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[19f]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[19b]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, stm32f4xx_i2c.o(i.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[194]"></a>I2C_Init</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, stm32f4xx_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mode_Config
</UL>

<P><STRONG><a name="[199]"></a>I2C_ReadBytes</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, touch_i2c.o(i.I2C_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_ReadBytes &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
</UL>

<P><STRONG><a name="[1a0]"></a>I2C_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[1a1]"></a>I2C_ResetChip</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, touch_i2c.o(i.I2C_ResetChip))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_ResetChip &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
</UL>

<P><STRONG><a name="[19e]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[1a6]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
</UL>

<P><STRONG><a name="[183]"></a>I2C_Touch_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, touch_i2c.o(i.I2C_Touch_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_Touch_Init &rArr; I2C_Mode_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Mode_Config
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetChip
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IRQEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[1a5]"></a>I2C_WriteBytes</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, touch_i2c.o(i.I2C_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_WriteBytes &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
</UL>

<P><STRONG><a name="[1a8]"></a>LCD_Init</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, lcd_conf.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LCD_Init &rArr; SDRAMConfig &rArr; SDRAM_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAMConfig
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Cmd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLSAIConfig
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLSAICmd
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LTDCCLKDivConfig
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTransparency
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLayer
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LayerInit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1af]"></a>LCD_LayerInit</STRONG> (Thumb, 136 bytes, Stack size 80 bytes, lcd_conf.o(i.LCD_LayerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_LayerInit &rArr; LTDC_LayerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_ReloadConfig
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_LayerInit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_LayerCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1b0]"></a>LCD_SetLayer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lcd_conf.o(i.LCD_SetLayer))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1b1]"></a>LCD_SetTransparency</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lcd_conf.o(i.LCD_SetTransparency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetTransparency
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_ReloadConfig
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_LayerAlpha
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1b6]"></a>LED_BLUE_Config</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, led_conf.o(i.LED_BLUE_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LED_BLUE_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b8]"></a>LED_GREEN_Config</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, led_conf.o(i.LED_GREEN_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LED_GREEN_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16e]"></a>LED_GREEN_Toggle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_conf.o(i.LED_GREEN_Toggle))
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[1ba]"></a>LED_RED_Config</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, led_conf.o(i.LED_RED_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LED_RED_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bb]"></a>LED_RED_Toggle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_conf.o(i.LED_RED_Toggle))
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1_led(void*)
</UL>

<P><STRONG><a name="[1ae]"></a>LTDC_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1ad]"></a>LTDC_Init</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, stm32f4xx_ltdc.o(i.LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LTDC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1b5]"></a>LTDC_LayerAlpha</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_LayerAlpha))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTransparency
</UL>

<P><STRONG><a name="[1b4]"></a>LTDC_LayerCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_LayerCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LayerInit
</UL>

<P><STRONG><a name="[1b2]"></a>LTDC_LayerInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f4xx_ltdc.o(i.LTDC_LayerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LTDC_LayerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LayerInit
</UL>

<P><STRONG><a name="[1b3]"></a>LTDC_ReloadConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ltdc.o(i.LTDC_ReloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTransparency
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LayerInit
</UL>

<P><STRONG><a name="[1b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[193]"></a>NVIC_Init</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_NVICConfig
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_NVIC_Config
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IRQEnable
</UL>

<P><STRONG><a name="[192]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_NVICConfig
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_NVIC_Config
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IRQEnable
</UL>

<P><STRONG><a name="[172]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_close()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1Config
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_GPIO_Config
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RED_Config
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GREEN_Config
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_BLUE_Config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASHConfig
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
</UL>

<P><STRONG><a name="[16b]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_DeInit
</UL>

<P><STRONG><a name="[1c1]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB3PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAMConfig
</UL>

<P><STRONG><a name="[18f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Mode_Config
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
</UL>

<P><STRONG><a name="[173]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1Config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASHConfig
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
</UL>

<P><STRONG><a name="[1be]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
</UL>

<P><STRONG><a name="[195]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1ac]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1aa]"></a>RCC_LTDCCLKDivConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_LTDCCLKDivConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1ab]"></a>RCC_PLLSAICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_PLLSAICmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1a9]"></a>RCC_PLLSAIConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_PLLSAIConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[162]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[1e0]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[1de]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1e3]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
</UL>

<P><STRONG><a name="[17a]"></a>SDIO_DataConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DataConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[1bd]"></a>SDIO_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[164]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[161]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[1df]"></a>SDIO_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[1d4]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[165]"></a>SDIO_GetResponse</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[53]"></a>SDIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdio_sd_conf.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1e1]"></a>SDIO_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[1c9]"></a>SDIO_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_sdio.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[17b]"></a>SDIO_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[179]"></a>SDIO_SendCommand</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[1dd]"></a>SDIO_SetPowerState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[7f]"></a>SDRAMConfig</STRONG> (Thumb, 88 bytes, Stack size 80 bytes, sdram_conf.o(i.SDRAMConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SDRAMConfig &rArr; SDRAM_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAMInit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_InitSequence
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(.text)
</UL>
<P><STRONG><a name="[1cb]"></a>SD_Detect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sdio_sd_conf.o(i.SD_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[1c8]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sdio_sd_conf.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1d2]"></a>SD_GetCardInfo</STRONG> (Thumb, 612 bytes, Stack size 28 bytes, sdio_sd_conf.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1ca]"></a>SD_GetState</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sdio_sd_conf.o(i.SD_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>

<P><STRONG><a name="[1cd]"></a>SD_GetStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sdio_sd_conf.o(i.SD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_GetStatus &rArr; SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1ce]"></a>SD_Init</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, sdio_sd_conf.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[1d1]"></a>SD_InitializeCards</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, sdio_sd_conf.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1d5]"></a>SD_LowLevel_DMA_RxConfig</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, sdio_sd_conf.o(i.SD_LowLevel_DMA_RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SD_LowLevel_DMA_RxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
</UL>

<P><STRONG><a name="[1dc]"></a>SD_LowLevel_DMA_TxConfig</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, sdio_sd_conf.o(i.SD_LowLevel_DMA_TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
</UL>

<P><STRONG><a name="[1cf]"></a>SD_LowLevel_Init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, sdio_sd_conf.o(i.SD_LowLevel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_LowLevel_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1d0]"></a>SD_PowerON</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, sdio_sd_conf.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_PowerON &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[16c]"></a>SD_ProcessDMAIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sdio_sd_conf.o(i.SD_ProcessDMAIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[1bf]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, sdio_sd_conf.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[1e2]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, sdio_sd_conf.o(i.SD_ReadMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1d3]"></a>SD_SelectDeselect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sdio_sd_conf.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1cc]"></a>SD_SendStatus</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sdio_sd_conf.o(i.SD_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[1e4]"></a>SD_StopTransfer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sdio_sd_conf.o(i.SD_StopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
</UL>

<P><STRONG><a name="[1e5]"></a>SD_WaitReadOperation</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sdio_sd_conf.o(i.SD_WaitReadOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_WaitReadOperation &rArr; SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1e6]"></a>SD_WaitWriteOperation</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sdio_sd_conf.o(i.SD_WaitWriteOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_WaitWriteOperation &rArr; SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[1e7]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, sdio_sd_conf.o(i.SD_WriteMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[177]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASHConfig
</UL>

<P><STRONG><a name="[1e8]"></a>SPI_FLASH_BufferRead</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, flash_conf.o(i.SPI_FLASH_BufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1ea]"></a>SPI_FLASH_BufferWrite</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, flash_conf.o(i.SPI_FLASH_BufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[1eb]"></a>SPI_FLASH_PageWrite</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, flash_conf.o(i.SPI_FLASH_PageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
</UL>

<P><STRONG><a name="[1ee]"></a>SPI_FLASH_ReadID</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, flash_conf.o(i.SPI_FLASH_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_FLASH_ReadID &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>

<P><STRONG><a name="[1ef]"></a>SPI_FLASH_SectorErase</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, flash_conf.o(i.SPI_FLASH_SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_FLASH_SectorErase &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[1e9]"></a>SPI_FLASH_SendByte</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, flash_conf.o(i.SPI_FLASH_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WAKEUP
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>

<P><STRONG><a name="[1ed]"></a>SPI_FLASH_WaitForWriteEnd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, flash_conf.o(i.SPI_FLASH_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[1ec]"></a>SPI_FLASH_WriteEnable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, flash_conf.o(i.SPI_FLASH_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[1f4]"></a>SPI_Flash_WAKEUP</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, flash_conf.o(i.SPI_Flash_WAKEUP))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_Flash_WAKEUP &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[1f1]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[1f3]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[1f2]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[176]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASHConfig
</UL>

<P><STRONG><a name="[190]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GTP_IRQEnable
</UL>

<P><STRONG><a name="[21]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM6_DAC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1f9]"></a>TIM_Basic_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tim_conf.o(i.TIM_Basic_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIM_Basic_Config &rArr; TIM_Mode_Config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_NVIC_Config
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Mode_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fd]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Mode_Config
</UL>

<P><STRONG><a name="[1f8]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[1ff]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Mode_Config
</UL>

<P><STRONG><a name="[1f7]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[1fe]"></a>TIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Mode_Config
</UL>

<P><STRONG><a name="[1fc]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Mode_Config
</UL>

<P><STRONG><a name="[200]"></a>USART1Config</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, usart_conf.o(i.USART1Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART1Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_NVICConfig
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[203]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1Config
</UL>

<P><STRONG><a name="[36b]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[204]"></a>USART_ITConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1Config
</UL>

<P><STRONG><a name="[201]"></a>USART_Init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1Config
</UL>

<P><STRONG><a name="[36a]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[242]"></a>lodepng_crc32(const unsigned char*, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, lodepng.o(i._Z13lodepng_crc32PKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lodepng_crc32(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_check_crc(const unsigned char*)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect(unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[22d]"></a>lodepng_decode(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, lodepng.o(i._Z14lodepng_decodePPhPjS1_P12LodePNGStatePKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = lodepng_decode(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned) &rArr; decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned) &rArr; postProcessScanlines(unsigned char*, unsigned char*, unsigned, unsigned, const LodePNGInfo*) &rArr; Adam7_deinterlace(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned) &rArr; Adam7_getpassvalues(unsigned*, unsigned*, unsigned*, unsigned*, unsigned*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_copy(LodePNGColorMode*, const LodePNGColorMode*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size(unsigned, unsigned, const LodePNGColorMode*)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert(unsigned char*, const unsigned char*, const LodePNGColorMode*, const LodePNGColorMode*, unsigned, unsigned)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_equal(const LodePNGColorMode*, const LodePNGColorMode*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc(unsigned)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory(unsigned char**, unsigned*, unsigned*, const unsigned char*, unsigned, LodePNGColorType, unsigned)
</UL>

<P><STRONG><a name="[230]"></a>lodepng_convert(unsigned char*, const unsigned char*, const LodePNGColorMode*, const LodePNGColorMode*, unsigned, unsigned)</STRONG> (Thumb, 398 bytes, Stack size 152 bytes, lodepng.o(i._Z15lodepng_convertPhPKhPK16LodePNGColorModeS4_jj))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lodepng_convert(unsigned char*, const unsigned char*, const LodePNGColorMode*, const LodePNGColorMode*, unsigned, unsigned) &rArr; color_tree_add(ColorTree*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned) &rArr; lodepng_malloc(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size(unsigned, unsigned, const LodePNGColorMode*)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_equal(const LodePNGColorMode*, const LodePNGColorMode*)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorsRGBA8(unsigned char*, unsigned, unsigned, const unsigned char*, const LodePNGColorMode*)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorRGBA16(unsigned short*, unsigned short*, unsigned short*, unsigned short*, const unsigned char*, unsigned, const LodePNGColorMode*)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorRGBA8(unsigned char*, unsigned char*, unsigned char*, unsigned char*, const unsigned char*, unsigned, const LodePNGColorMode*)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup(ColorTree*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_init(ColorTree*)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_add(ColorTree*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgba16ToPixel(unsigned char*, unsigned, const LodePNGColorMode*, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgba8ToPixel(unsigned char*, unsigned, const LodePNGColorMode*, ColorTree*, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[23a]"></a>lodepng_get_bpp(const LodePNGColorMode*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lodepng.o(i._Z15lodepng_get_bppPK16LodePNGColorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lodepng_get_bpp(const LodePNGColorMode*) &rArr; lodepng_get_bpp_lct(LodePNGColorType, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp_lct(LodePNGColorType, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size(unsigned, unsigned, const LodePNGColorMode*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size_idat(unsigned, unsigned, const LodePNGColorMode*)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines(unsigned char*, unsigned char*, unsigned, unsigned, const LodePNGInfo*)
</UL>

<P><STRONG><a name="[23c]"></a>lodepng_inflate(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, lodepng.o(i._Z15lodepng_inflatePPhPjPKhjPK25LodePNGDecompressSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lodepng_inflate(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; lodepng_inflatev(ucvector*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; inflateHuffmanBlock(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned, unsigned) &rArr; getTreeInflateDynamic(HuffmanTree*, HuffmanTree*, const unsigned char*, unsigned*, unsigned) &rArr; HuffmanTree_makeFromLengths(HuffmanTree*, const unsigned*, unsigned, unsigned) &rArr; lodepng_malloc(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_init_buffer(ucvector*, unsigned char*, unsigned)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev(ucvector*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)
</UL>

<P><STRONG><a name="[211]"></a>lodepng_inspect(unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, lodepng.o(i._Z15lodepng_inspectPjS_P12LodePNGStatePKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lodepng_inspect(unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned) &rArr; lodepng_info_cleanup(LodePNGInfo*) &rArr; LodePNGIText_cleanup(LodePNGInfo*) &rArr; string_cleanup(char**) &rArr; lodepng_free(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_type_equals(const unsigned char*, const char*)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_read32bitInt(const unsigned char*)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup(LodePNGInfo*)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length(const unsigned char*)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init(LodePNGInfo*)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_crc32(const unsigned char*, unsigned)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkColorValidity(LodePNGColorType, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[233]"></a>lodepng_add_text(LodePNGInfo*, const char*, const char*)</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lodepng.o(i._Z16lodepng_add_textP11LodePNGInfoPKcS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lodepng_add_text(LodePNGInfo*, const char*, const char*) &rArr; string_set(char**, const char*) &rArr; string_resize(char**, unsigned) &rArr; lodepng_realloc(void*, unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc(void*, unsigned)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_init(char**)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_set(char**, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt(LodePNGInfo*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[232]"></a>lodepng_add_itext(LodePNGInfo*, const char*, const char*, const char*, const char*)</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, lodepng.o(i._Z17lodepng_add_itextP11LodePNGInfoPKcS2_S2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lodepng_add_itext(LodePNGInfo*, const char*, const char*, const char*, const char*) &rArr; string_set(char**, const char*) &rArr; string_resize(char**, unsigned) &rArr; lodepng_realloc(void*, unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc(void*, unsigned)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_init(char**)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_set(char**, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[240]"></a>lodepng_info_init(LodePNGInfo*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lodepng.o(i._Z17lodepng_info_initP11LodePNGInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lodepng_info_init(LodePNGInfo*)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_init(LodePNGColorMode*)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGUnknownChunks_init(LodePNGInfo*)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGIText_init(LodePNGInfo*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGText_init(LodePNGInfo*)
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_init(LodePNGState*)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect(unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[25b]"></a>lodepng_load_file(unsigned char**, unsigned*, const char*)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lodepng.o(i._Z17lodepng_load_filePPhPjPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1516<LI>Call Chain = lodepng_load_file(unsigned char**, unsigned*, const char*) &rArr; lodepng_buffer_file(unsigned char*, unsigned, const char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_buffer_file(unsigned char*, unsigned, const char*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_filesize(const char*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_file(unsigned char**, unsigned*, unsigned*, const char*, LodePNGColorType, unsigned)
</UL>

<P><STRONG><a name="[260]"></a>lodepng_state_init(LodePNGState*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lodepng.o(i._Z18lodepng_state_initP12LodePNGState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lodepng_state_init(LodePNGState*) &rArr; lodepng_info_init(LodePNGInfo*)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_encoder_settings_init(LodePNGEncoderSettings*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decoder_settings_init(LodePNGDecoderSettings*)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_init(LodePNGColorMode*)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init(LodePNGInfo*)
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory(unsigned char**, unsigned*, unsigned*, const unsigned char*, unsigned, LodePNGColorType, unsigned)
</UL>

<P><STRONG><a name="[26d]"></a>lodepng_decode_file(unsigned char**, unsigned*, unsigned*, const char*, LodePNGColorType, unsigned)</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, lodepng.o(i._Z19lodepng_decode_filePPhPjS1_PKc16LodePNGColorTypej))
<BR><BR>[Stack]<UL><LI>Max Depth = 1564<LI>Call Chain = lodepng_decode_file(unsigned char**, unsigned*, unsigned*, const char*, LodePNGColorType, unsigned) &rArr; lodepng_load_file(unsigned char**, unsigned*, const char*) &rArr; lodepng_buffer_file(unsigned char*, unsigned, const char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory(unsigned char**, unsigned*, unsigned*, const unsigned char*, unsigned, LodePNGColorType, unsigned)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file(unsigned char**, unsigned*, const char*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode32_file(unsigned char**, unsigned*, unsigned*, const char*)
</UL>

<P><STRONG><a name="[220]"></a>lodepng_chunk_append(unsigned char**, unsigned*, const unsigned char*)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lodepng.o(i._Z20lodepng_chunk_appendPPhPjPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lodepng_chunk_append(unsigned char**, unsigned*, const unsigned char*) &rArr; lodepng_realloc(void*, unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length(const unsigned char*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc(void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[213]"></a>lodepng_chunk_length(const unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lodepng.o(i._Z20lodepng_chunk_lengthPKh))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_read32bitInt(const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_next_const(const unsigned char*)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_check_crc(const unsigned char*)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_append(unsigned char**, unsigned*, const unsigned char*)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect(unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[227]"></a>lodepng_get_raw_size(unsigned, unsigned, const LodePNGColorMode*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lodepng.o(i._Z20lodepng_get_raw_sizejjPK16LodePNGColorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lodepng_get_raw_size(unsigned, unsigned, const LodePNGColorMode*) &rArr; lodepng_get_bpp(const LodePNGColorMode*) &rArr; lodepng_get_bpp_lct(LodePNGColorType, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp(const LodePNGColorMode*)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert(unsigned char*, const unsigned char*, const LodePNGColorMode*, const LodePNGColorMode*, unsigned, unsigned)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[23f]"></a>lodepng_info_cleanup(LodePNGInfo*)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lodepng.o(i._Z20lodepng_info_cleanupP11LodePNGInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lodepng_info_cleanup(LodePNGInfo*) &rArr; LodePNGIText_cleanup(LodePNGInfo*) &rArr; string_cleanup(char**) &rArr; lodepng_free(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_cleanup(LodePNGColorMode*)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGUnknownChunks_cleanup(LodePNGInfo*)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGIText_cleanup(LodePNGInfo*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGText_cleanup(LodePNGInfo*)
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_cleanup(LodePNGState*)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect(unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[241]"></a>lodepng_read32bitInt(const unsigned char*)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lodepng.o(i._Z20lodepng_read32bitIntPKh))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompress(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_check_crc(const unsigned char*)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length(const unsigned char*)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect(unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[275]"></a>lodepng_decode32_file(unsigned char**, unsigned*, unsigned*, const char*)</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, lodepng.o(i._Z21lodepng_decode32_filePPhPjS1_PKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1588<LI>Call Chain = lodepng_decode32_file(unsigned char**, unsigned*, unsigned*, const char*) &rArr; lodepng_decode_file(unsigned char**, unsigned*, unsigned*, const char*, LodePNGColorType, unsigned) &rArr; lodepng_load_file(unsigned char**, unsigned*, const char*) &rArr; lodepng_buffer_file(unsigned char*, unsigned, const char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_file(unsigned char**, unsigned*, unsigned*, const char*, LodePNGColorType, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::Decode()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::TImage(unsigned char*, unsigned short, unsigned short, const char*)
</UL>

<P><STRONG><a name="[26e]"></a>lodepng_decode_memory(unsigned char**, unsigned*, unsigned*, const unsigned char*, unsigned, LodePNGColorType, unsigned)</STRONG> (Thumb, 72 bytes, Stack size 352 bytes, lodepng.o(i._Z21lodepng_decode_memoryPPhPjS1_PKhj16LodePNGColorTypej))
<BR><BR>[Stack]<UL><LI>Max Depth = 972<LI>Call Chain = lodepng_decode_memory(unsigned char**, unsigned*, unsigned*, const unsigned char*, unsigned, LodePNGColorType, unsigned) &rArr; lodepng_decode(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned) &rArr; decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned) &rArr; postProcessScanlines(unsigned char*, unsigned char*, unsigned, unsigned, const LodePNGInfo*) &rArr; Adam7_deinterlace(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned) &rArr; Adam7_getpassvalues(unsigned*, unsigned*, unsigned*, unsigned*, unsigned*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_cleanup(LodePNGState*)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_init(LodePNGState*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_file(unsigned char**, unsigned*, unsigned*, const char*, LodePNGColorType, unsigned)
</UL>

<P><STRONG><a name="[277]"></a>lodepng_palette_clear(LodePNGColorMode*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lodepng.o(i._Z21lodepng_palette_clearP16LodePNGColorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lodepng_palette_clear(LodePNGColorMode*) &rArr; lodepng_free(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_cleanup(LodePNGColorMode*)
</UL>

<P><STRONG><a name="[276]"></a>lodepng_state_cleanup(LodePNGState*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lodepng.o(i._Z21lodepng_state_cleanupP12LodePNGState))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lodepng_state_cleanup(LodePNGState*) &rArr; lodepng_info_cleanup(LodePNGInfo*) &rArr; LodePNGIText_cleanup(LodePNGInfo*) &rArr; string_cleanup(char**) &rArr; lodepng_free(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_cleanup(LodePNGColorMode*)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup(LodePNGInfo*)
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory(unsigned char**, unsigned*, unsigned*, const unsigned char*, unsigned, LodePNGColorType, unsigned)
</UL>

<P><STRONG><a name="[21f]"></a>lodepng_chunk_ancillary(const unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lodepng.o(i._Z23lodepng_chunk_ancillaryPKh))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[221]"></a>lodepng_chunk_check_crc(const unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, lodepng.o(i._Z23lodepng_chunk_check_crcPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lodepng_chunk_check_crc(const unsigned char*) &rArr; lodepng_crc32(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_read32bitInt(const unsigned char*)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length(const unsigned char*)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_crc32(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[22f]"></a>lodepng_color_mode_copy(LodePNGColorMode*, const LodePNGColorMode*)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lodepng.o(i._Z23lodepng_color_mode_copyP16LodePNGColorModePKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lodepng_color_mode_copy(LodePNGColorMode*, const LodePNGColorMode*) &rArr; lodepng_malloc(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_cleanup(LodePNGColorMode*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[257]"></a>lodepng_color_mode_init(LodePNGColorMode*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lodepng.o(i._Z23lodepng_color_mode_initP16LodePNGColorMode))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_init(LodePNGState*)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init(LodePNGInfo*)
</UL>

<P><STRONG><a name="[247]"></a>lodepng_zlib_decompress(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lodepng.o(i._Z23lodepng_zlib_decompressPPhPjPKhjPK25LodePNGDecompressSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lodepng_zlib_decompress(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; inflate(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; lodepng_inflate(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; lodepng_inflatev(ucvector*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; inflateHuffmanBlock(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned, unsigned) &rArr; getTreeInflateDynamic(HuffmanTree*, HuffmanTree*, const unsigned char*, unsigned*, unsigned) &rArr; HuffmanTree_makeFromLengths(HuffmanTree*, const unsigned*, unsigned, unsigned) &rArr; lodepng_malloc(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_read32bitInt(const unsigned char*)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adler32(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)
</UL>

<P><STRONG><a name="[214]"></a>lodepng_chunk_data_const(const unsigned char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lodepng.o(i._Z24lodepng_chunk_data_constPKh))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[222]"></a>lodepng_chunk_next_const(const unsigned char*)</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lodepng.o(i._Z24lodepng_chunk_next_constPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lodepng_chunk_next_const(const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length(const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[215]"></a>lodepng_chunk_type_equals(const unsigned char*, const char*)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lodepng.o(i._Z25lodepng_chunk_type_equalsPKhPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lodepng_chunk_type_equals(const unsigned char*, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect(unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[271]"></a>lodepng_color_mode_cleanup(LodePNGColorMode*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lodepng.o(i._Z26lodepng_color_mode_cleanupP16LodePNGColorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lodepng_color_mode_cleanup(LodePNGColorMode*) &rArr; lodepng_palette_clear(LodePNGColorMode*) &rArr; lodepng_free(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_palette_clear(LodePNGColorMode*)
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_copy(LodePNGColorMode*, const LodePNGColorMode*)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_cleanup(LodePNGState*)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup(LodePNGInfo*)
</UL>

<P><STRONG><a name="[261]"></a>lodepng_decoder_settings_init(LodePNGDecoderSettings*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lodepng.o(i._Z29lodepng_decoder_settings_initP22LodePNGDecoderSettings))
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decompress_settings_init(LodePNGDecompressSettings*)
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_init(LodePNGState*)
</UL>

<P><STRONG><a name="[262]"></a>lodepng_encoder_settings_init(LodePNGEncoderSettings*)</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, lodepng.o(i._Z29lodepng_encoder_settings_initP22LodePNGEncoderSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lodepng_encoder_settings_init(LodePNGEncoderSettings*)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_compress_settings_init(LodePNGCompressSettings*)
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_init(LodePNGState*)
</UL>

<P><STRONG><a name="[27f]"></a>lodepng_compress_settings_init(LodePNGCompressSettings*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lodepng.o(i._Z30lodepng_compress_settings_initP23LodePNGCompressSettings))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_encoder_settings_init(LodePNGEncoderSettings*)
</UL>

<P><STRONG><a name="[27e]"></a>lodepng_decompress_settings_init(LodePNGDecompressSettings*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lodepng.o(i._Z32lodepng_decompress_settings_initP25LodePNGDecompressSettings))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decoder_settings_init(LodePNGDecoderSettings*)
</UL>

<P><STRONG><a name="[209]"></a>TGuiRun()</STRONG> (Thumb, 76 bytes, Stack size 160 bytes, tguimain.o(i._Z7TGuiRunv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1892<LI>Call Chain = TGuiRun() &rArr; Desktop::Desktop(const char*, TApplication*, const char*, TWidget*) &rArr; TIconButton::TIconButton(long, long, TImage*, TImage*, const char*, TWidget*) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::~Desktop()
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::Desktop(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::~TApplication()
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::TApplication(TDirver*)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::addWindow(TWidget*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::show()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2_tgui(void*)
</UL>

<P><STRONG><a name="[287]"></a>TBufPainter::drawButton(long, long, long, long, const char*, bool)</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, tbufpainter.o(i._ZN11TBufPainter10drawButtonEllllPKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1676<LI>Call Chain = TBufPainter::drawButton(long, long, long, long, const char*, bool) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawWinShades(long, long, long, long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::release()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_release(long, long)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_depress(long, long)
</UL>

<P><STRONG><a name="[28a]"></a>TBufPainter::drawString(long, long, const char*, unsigned long)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tbufpainter.o(i._ZN11TBufPainter10drawStringEllPKcm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1572<LI>Call Chain = TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::displayEnChar(long, long, unsigned char, bool)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::displayCHChar(long, long, unsigned char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawAlignText(long, long, const char*, unsigned char, unsigned long)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool)
</UL>

<P><STRONG><a name="[28d]"></a>TBufPainter::drawFullRect(long, long, long, long)</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, tbufpainter.o(i._ZN11TBufPainter12drawFullRectEllll))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = TBufPainter::drawFullRect(long, long, long, long) &rArr; TBufPainter::paintMeta(TRect*) &rArr; gui_set_rect &rArr; DMA2D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::TRect(int, int, int, int)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::paintMeta(TRect*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::TLabel(long, long, long, long, const char*, TWidget*, unsigned char, bool, unsigned long, unsigned long)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawDialogTitle(long, long, long, const char*, bool)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawWinShades(long, long, long, long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, bool)
</UL>

<P><STRONG><a name="[28b]"></a>TBufPainter::displayCHChar(long, long, unsigned char*, bool)</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, tbufpainter.o(i._ZN11TBufPainter13displayCHCharEllPhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1540<LI>Call Chain = TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFont::getWordCode(unsigned char*)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawPoint(long, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawString(long, long, const char*, unsigned long)
</UL>

<P><STRONG><a name="[28c]"></a>TBufPainter::displayEnChar(long, long, unsigned char, bool)</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, tbufpainter.o(i._ZN11TBufPainter13displayEnCharEllhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TBufPainter::displayEnChar(long, long, unsigned char, bool) &rArr; TBufPainter::drawPoint(long, long) &rArr; TBufPainter::paintMeta(TRect*) &rArr; gui_set_rect &rArr; DMA2D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawPoint(long, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawString(long, long, const char*, unsigned long)
</UL>

<P><STRONG><a name="[292]"></a>TBufPainter::drawAlignText(long, long, const char*, unsigned char, unsigned long)</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, tbufpainter.o(i._ZN11TBufPainter13drawAlignTextEllPKchm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612<LI>Call Chain = TBufPainter::drawAlignText(long, long, const char*, unsigned char, unsigned long) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::height() const
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::width() const
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawString(long, long, const char*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::TLabel(long, long, long, long, const char*, TWidget*, unsigned char, bool, unsigned long, unsigned long)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::TLabel(long, long, TImage*, const char*, unsigned char, TWidget*)
</UL>

<P><STRONG><a name="[288]"></a>TBufPainter::drawWinShades(long, long, long, long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, bool)</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, tbufpainter.o(i._ZN11TBufPainter13drawWinShadesEllllmmmmmb))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = TBufPainter::drawWinShades(long, long, long, long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawLine(long, long, long, long) &rArr; TBufPainter::drawVLine(long, long, long) &rArr; TBufPainter::paintMeta(TRect*) &rArr; gui_set_rect &rArr; DMA2D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawFullRect(long, long, long, long)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawLine(long, long, long, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawButton(long, long, long, long, const char*, bool)
</UL>

<P><STRONG><a name="[289]"></a>TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool)</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, tbufpainter.o(i._ZN11TBufPainter14drawCenterTextEllllPKcmmb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612<LI>Call Chain = TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::width() const
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawString(long, long, const char*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawButton(long, long, long, long, const char*, bool)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::release()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_release(long, long)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_depress(long, long)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawDialogTitle(long, long, long, const char*, bool)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::TDialog(long, long, TImage*, const char*, TWidget*, unsigned short)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchMoveEvent(TTouchEvent*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, unsigned short, unsigned short, const char*, const char*, TWidget*, bool)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, unsigned char, const char*, TWidget*)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, const char*, TWidget*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::TIconButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::release()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_release(long, long)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_depress(long, long)
</UL>

<P><STRONG><a name="[296]"></a>TBufPainter::drawDialogTitle(long, long, long, const char*, bool)</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, tbufpainter.o(i._ZN11TBufPainter15drawDialogTitleElllPKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668<LI>Call Chain = TBufPainter::drawDialogTitle(long, long, long, const char*, bool) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawFullRect(long, long, long, long)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchPressEvent(TTouchEvent*)
</UL>

<P><STRONG><a name="[295]"></a>TBufPainter::drawLine(long, long, long, long)</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, tbufpainter.o(i._ZN11TBufPainter8drawLineEllll))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = TBufPainter::drawLine(long, long, long, long) &rArr; TBufPainter::drawVLine(long, long, long) &rArr; TBufPainter::paintMeta(TRect*) &rArr; gui_set_rect &rArr; DMA2D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawVLine(long, long, long)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawPoint(long, long)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawHLine(long, long, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawWinShades(long, long, long, long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, bool)
</UL>

<P><STRONG><a name="[298]"></a>TBufPainter::drawHLine(long, long, long)</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, tbufpainter.o(i._ZN11TBufPainter9drawHLineElll))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = TBufPainter::drawHLine(long, long, long) &rArr; TBufPainter::paintMeta(TRect*) &rArr; gui_set_rect &rArr; DMA2D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::TRect(int, int, int, int)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::paintMeta(TRect*)
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawLine(long, long, long, long)
</UL>

<P><STRONG><a name="[291]"></a>TBufPainter::drawPoint(long, long)</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, tbufpainter.o(i._ZN11TBufPainter9drawPointEll))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = TBufPainter::drawPoint(long, long) &rArr; TBufPainter::paintMeta(TRect*) &rArr; gui_set_rect &rArr; DMA2D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::TRect(int, int, int, int)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::paintMeta(TRect*)
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawLine(long, long, long, long)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::displayEnChar(long, long, unsigned char, bool)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::displayCHChar(long, long, unsigned char*, bool)
</UL>

<P><STRONG><a name="[297]"></a>TBufPainter::drawVLine(long, long, long)</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, tbufpainter.o(i._ZN11TBufPainter9drawVLineElll))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = TBufPainter::drawVLine(long, long, long) &rArr; TBufPainter::paintMeta(TRect*) &rArr; gui_set_rect &rArr; DMA2D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::TRect(int, int, int, int)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::paintMeta(TRect*)
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawLine(long, long, long, long)
</UL>

<P><STRONG><a name="[28f]"></a>TBufPainter::paintMeta(TRect*)</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, tbufpainter.o(i._ZN11TBufPainter9paintMetaEP5TRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = TBufPainter::paintMeta(TRect*) &rArr; gui_set_rect &rArr; DMA2D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_set_rect
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawFullRect(long, long, long, long)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawVLine(long, long, long)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawPoint(long, long)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawHLine(long, long, long)
</UL>

<P><STRONG><a name="[29a]"></a>TBufPainter::TBufPainter(unsigned char*, TRect*)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tbufpainter.o(i._ZN11TBufPainterC1EPhP5TRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TBufPainter::TBufPainter(unsigned char*, TRect*) &rArr; TFont::TFont(const char*, unsigned short, unsigned short, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFont::TFont(const char*, unsigned short, unsigned short, unsigned char)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::release()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_release(long, long)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_depress(long, long)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::TLabel(long, long, long, long, const char*, TWidget*, unsigned char, bool, unsigned long, unsigned long)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::TLabel(long, long, TImage*, const char*, unsigned char, TWidget*)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::TDialog(long, long, TImage*, const char*, TWidget*, unsigned short)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchPressEvent(TTouchEvent*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchMoveEvent(TTouchEvent*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, unsigned short, unsigned short, const char*, const char*, TWidget*, bool)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, unsigned char, const char*, TWidget*)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, const char*, TWidget*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::TIconButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::release()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_release(long, long)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_depress(long, long)
</UL>

<P><STRONG><a name="[3e7]"></a>TBufPainter::TBufPainter__sub_object(unsigned char*, TRect*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, tbufpainter.o(i._ZN11TBufPainterC1EPhP5TRect), UNUSED)

<P><STRONG><a name="[2ae]"></a>TBufPainter::~TBufPainter()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tbufpainter.o(i._ZN11TBufPainterD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TBufPainter::~TBufPainter()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::release()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_release(long, long)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_depress(long, long)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::TLabel(long, long, long, long, const char*, TWidget*, unsigned char, bool, unsigned long, unsigned long)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::TLabel(long, long, TImage*, const char*, unsigned char, TWidget*)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::TDialog(long, long, TImage*, const char*, TWidget*, unsigned short)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchPressEvent(TTouchEvent*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchMoveEvent(TTouchEvent*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, unsigned short, unsigned short, const char*, const char*, TWidget*, bool)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, unsigned char, const char*, TWidget*)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, const char*, TWidget*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::TIconButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::release()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_release(long, long)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_depress(long, long)
</UL>

<P><STRONG><a name="[3e8]"></a>TBufPainter::~TBufPainter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tbufpainter.o(i._ZN11TBufPainterD1Ev), UNUSED)

<P><STRONG><a name="[a0]"></a>TCloseEvent::~TCloseEvent__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tapplication.o(i._ZN11TCloseEventD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TCloseEvent::~TCloseEvent__deallocating() &rArr; TEvent::~TEvent() &rArr; TEvent::peErrMsg() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEvent::~TEvent()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tapplication.o(.constdata__ZTV11TCloseEvent)
</UL>
<P><STRONG><a name="[29e]"></a>TConnection::active(long, long)</STRONG> (Thumb, 162 bytes, Stack size 72 bytes, tconnection.o(i._ZN11TConnection6activeEll))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TConnection::active(long, long) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFuncList::locate(unsigned long)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::locate(unsigned long)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::callSlot(void(TObject::*)(long, long), long, long)
</UL>

<P><STRONG><a name="[2a1]"></a>TConnection::TConnection(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, tconnection.o(i._ZN11TConnectionC1EM7TObjectFvllEPS0_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TConnection::TConnection(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long)) &rArr; TFuncList::append(void(TObject::*)(long, long)) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFuncList::TFuncList()
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFuncList::append(void(TObject::*)(long, long))
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::append(TObject*)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObjList::TObjList()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::connect(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
</UL>

<P><STRONG><a name="[3e9]"></a>TConnection::TConnection__sub_object(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, tconnection.o(i._ZN11TConnectionC1EM7TObjectFvllEPS0_S2_), UNUSED)

<P><STRONG><a name="[2a6]"></a>TConnection::~TConnection()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tconnection.o(i._ZN11TConnectionD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TConnection::~TConnection() &rArr; TFuncList::~TFuncList() &rArr; TFuncList::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFuncList::~TFuncList()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFuncList::clear()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::~TObject__sub_object()
</UL>

<P><STRONG><a name="[3ea]"></a>TConnection::~TConnection__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tconnection.o(i._ZN11TConnectionD1Ev), UNUSED)

<P><STRONG><a name="[b8]"></a>TIconButton::sig_depress(long, long)</STRONG> (Thumb, 338 bytes, Stack size 112 bytes, ticonbutton.o(i._ZN11TIconButton11sig_depressEll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1724<LI>Call Chain = TIconButton::sig_depress(long, long) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::imgLoadInterface(long, long, TImage*, TRect*, unsigned char)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::callSlot(void(TObject::*)(long, long), long, long)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBuffer::obPareBack(unsigned char*, unsigned long, long, long, unsigned short, unsigned short)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::~TBufPainter()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::TBufPainter(unsigned char*, TRect*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::width()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::getName()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::blendPoint(unsigned long, unsigned char*, TSize*, unsigned char*, TSize*, TRect*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::getPareBufCorreAddr()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[b9]"></a>TIconButton::sig_release(long, long)</STRONG> (Thumb, 172 bytes, Stack size 80 bytes, ticonbutton.o(i._ZN11TIconButton11sig_releaseEll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1692<LI>Call Chain = TIconButton::sig_release(long, long) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::imgLoadInterface(long, long, TImage*, TRect*, unsigned char)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::callSlot(void(TObject::*)(long, long), long, long)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBuffer::obPareBack(unsigned char*, unsigned long, long, long, unsigned short, unsigned short)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::~TBufPainter()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::TBufPainter(unsigned char*, TRect*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::width()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::getName()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::getPareBufCorreAddr()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[a4]"></a>TIconButton::show()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ticonbutton.o(i._ZN11TIconButton4showEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIconButton::show() &rArr; TWidget::refresh() &rArr; TWidget::rectCut(TRect*) &rArr;  TWidget::rectCut(TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[ba]"></a>TIconButton::release()</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, ticonbutton.o(i._ZN11TIconButton7releaseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1684<LI>Call Chain = TIconButton::release() &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::imgLoadInterface(long, long, TImage*, TRect*, unsigned char)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBuffer::obPareBack(unsigned char*, unsigned long, long, long, unsigned short, unsigned short)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::~TBufPainter()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::TBufPainter(unsigned char*, TRect*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::width()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::getName()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::getPareBufCorreAddr()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[2b2]"></a>TIconButton::TIconButton(long, long, TImage*, TImage*, const char*, TWidget*)</STRONG> (Thumb, 178 bytes, Stack size 80 bytes, ticonbutton.o(i._ZN11TIconButtonC1EllP6TImageS1_PKcP7TWidget))
<BR><BR>[Stack]<UL><LI>Max Depth = 1692<LI>Call Chain = TIconButton::TIconButton(long, long, TImage*, TImage*, const char*, TWidget*) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::imgLoadInterface(long, long, TImage*, TRect*, unsigned char)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBuffer::obPareBack(unsigned char*, unsigned long, long, long, unsigned short, unsigned short)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::~TBufPainter()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::TBufPainter(unsigned char*, TRect*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::width()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::getName()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAbstractButton::TAbstractButton__sub_object(long, long, long, long, bool, const char*, TWidget*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::getPareBufCorreAddr()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::Desktop(const char*, TApplication*, const char*, TWidget*)
</UL>

<P><STRONG><a name="[3eb]"></a>TIconButton::TIconButton__sub_object(long, long, TImage*, TImage*, const char*, TWidget*)</STRONG> (Thumb, 0 bytes, Stack size 80 bytes, ticonbutton.o(i._ZN11TIconButtonC1EllP6TImageS1_PKcP7TWidget), UNUSED)

<P><STRONG><a name="[a2]"></a>TIconButton::~TIconButton__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ticonbutton.o(i._ZN11TIconButtonD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIconButton::~TIconButton__deallocating() &rArr; TIconButton::~TIconButton() &rArr; TAbstractButton::~TAbstractButton__sub_object() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::~TIconButton()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[a1]"></a>TIconButton::~TIconButton()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ticonbutton.o(i._ZN11TIconButtonD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIconButton::~TIconButton() &rArr; TAbstractButton::~TAbstractButton__sub_object() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAbstractButton::~TAbstractButton__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::~TIconButton__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[3ec]"></a>TIconButton::~TIconButton__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ticonbutton.o(i._ZN11TIconButtonD1Ev), UNUSED)

<P><STRONG><a name="[be]"></a>TPushButton::sig_depress(long, long)</STRONG> (Thumb, 280 bytes, Stack size 104 bytes, tpushbutton.o(i._ZN11TPushButton11sig_depressEll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1780<LI>Call Chain = TPushButton::sig_depress(long, long) &rArr; TBufPainter::drawButton(long, long, long, long, const char*, bool) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::imgLoadInterface(long, long, TImage*, TRect*, unsigned char)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::callSlot(void(TObject::*)(long, long), long, long)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::~TBufPainter()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::TBufPainter(unsigned char*, TRect*)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::height()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::width()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::getName()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::blendPoint(unsigned long, unsigned char*, TSize*, unsigned char*, TSize*, TRect*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawButton(long, long, long, long, const char*, bool)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tpushbutton.o(.constdata__ZTV11TPushButton)
</UL>
<P><STRONG><a name="[bf]"></a>TPushButton::sig_release(long, long)</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, tpushbutton.o(i._ZN11TPushButton11sig_releaseEll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1748<LI>Call Chain = TPushButton::sig_release(long, long) &rArr; TBufPainter::drawButton(long, long, long, long, const char*, bool) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::imgLoadInterface(long, long, TImage*, TRect*, unsigned char)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::callSlot(void(TObject::*)(long, long), long, long)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::~TBufPainter()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::TBufPainter(unsigned char*, TRect*)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::height()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::width()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::getName()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawButton(long, long, long, long, const char*, bool)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tpushbutton.o(.constdata__ZTV11TPushButton)
</UL>
<P><STRONG><a name="[bd]"></a>TPushButton::show()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tpushbutton.o(i._ZN11TPushButton4showEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TPushButton::show() &rArr; TWidget::refresh() &rArr; TWidget::rectCut(TRect*) &rArr;  TWidget::rectCut(TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tpushbutton.o(.constdata__ZTV11TPushButton)
</UL>
<P><STRONG><a name="[c0]"></a>TPushButton::release()</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, tpushbutton.o(i._ZN11TPushButton7releaseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1740<LI>Call Chain = TPushButton::release() &rArr; TBufPainter::drawButton(long, long, long, long, const char*, bool) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::imgLoadInterface(long, long, TImage*, TRect*, unsigned char)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::~TBufPainter()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::TBufPainter(unsigned char*, TRect*)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::height()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::width()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::getName()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawButton(long, long, long, long, const char*, bool)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tpushbutton.o(.constdata__ZTV11TPushButton)
</UL>
<P><STRONG><a name="[2b5]"></a>TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*)</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, tpushbutton.o(i._ZN11TPushButtonC1EllP6TImageS1_PKcP7TWidget))
<BR><BR>[Stack]<UL><LI>Max Depth = 1684<LI>Call Chain = TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::imgLoadInterface(long, long, TImage*, TRect*, unsigned char)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::~TBufPainter()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::TBufPainter(unsigned char*, TRect*)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::height()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::width()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::getName()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAbstractButton::TAbstractButton__sub_object(long, long, long, long, bool, const char*, TWidget*)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::UserPhoto(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserGame::UserGame(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalculate::UserCalculate(long, long, TImage*, const char*, TWidget*, int)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalendar::UserCalendar(long, long, TImage*, const char*, TWidget*, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openSetup()
</UL>

<P><STRONG><a name="[3ed]"></a>TPushButton::TPushButton__sub_object(long, long, TImage*, TImage*, const char*, TWidget*)</STRONG> (Thumb, 0 bytes, Stack size 72 bytes, tpushbutton.o(i._ZN11TPushButtonC1EllP6TImageS1_PKcP7TWidget), UNUSED)

<P><STRONG><a name="[bc]"></a>TPushButton::~TPushButton__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tpushbutton.o(i._ZN11TPushButtonD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TPushButton::~TPushButton__deallocating() &rArr; TPushButton::~TPushButton() &rArr; TAbstractButton::~TAbstractButton__sub_object() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::~TPushButton()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tpushbutton.o(.constdata__ZTV11TPushButton)
</UL>
<P><STRONG><a name="[bb]"></a>TPushButton::~TPushButton()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tpushbutton.o(i._ZN11TPushButtonD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TPushButton::~TPushButton() &rArr; TAbstractButton::~TAbstractButton__sub_object() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAbstractButton::~TAbstractButton__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::~TPushButton__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tpushbutton.o(.constdata__ZTV11TPushButton)
</UL>
<P><STRONG><a name="[3ee]"></a>TPushButton::~TPushButton__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tpushbutton.o(i._ZN11TPushButtonD1Ev), UNUSED)

<P><STRONG><a name="[c2]"></a>TTouchEvent::~TTouchEvent__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tapplication.o(i._ZN11TTouchEventD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TTouchEvent::~TTouchEvent__deallocating() &rArr; TTouchEvent::~TTouchEvent() &rArr; TEvent::~TEvent() &rArr; TEvent::peErrMsg() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTouchEvent::~TTouchEvent()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tapplication.o(.constdata__ZTV11TTouchEvent)
</UL>
<P><STRONG><a name="[c1]"></a>TTouchEvent::~TTouchEvent()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tapplication.o(i._ZN11TTouchEventD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TTouchEvent::~TTouchEvent() &rArr; TEvent::~TEvent() &rArr; TEvent::peErrMsg() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEvent::~TEvent()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTouchEvent::~TTouchEvent__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tapplication.o(.constdata__ZTV11TTouchEvent)
</UL>
<P><STRONG><a name="[3ef]"></a>TTouchEvent::~TTouchEvent__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tapplication.o(i._ZN11TTouchEventD1Ev), UNUSED)

<P><STRONG><a name="[c3]"></a>TWidgetList::clear()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, twidget.o(i._ZN11TWidgetList5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TWidgetList::clear() &rArr; TList&lang;TWidget*&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::clear()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> twidget.o(.constdata__ZTV11TWidgetList)
</UL>
<P><STRONG><a name="[c7]"></a>TWidgetList::count()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, twidget.o(i._ZN11TWidgetList5countEv))
<BR>[Address Reference Count : 1]<UL><LI> twidget.o(.constdata__ZTV11TWidgetList)
</UL>
<P><STRONG><a name="[2b6]"></a>TWidgetList::remove(TWidget*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tdialog.o(i._ZN11TWidgetList6removeEP7TWidget))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TWidgetList::remove(TWidget*) &rArr; TList&lang;TWidget*&rang;::remove(TWidget*) &rArr; TList&lang;TWidget*&rang;::find(TWidget*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::remove(TWidget*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::~TDialog()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchPressEvent(TTouchEvent*)
</UL>

<P><STRONG><a name="[c4]"></a>TWidgetList::~TWidgetList__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, twidget.o(i._ZN11TWidgetListD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TWidgetList::~TWidgetList__deallocating() &rArr; TList&lang;TWidget*&rang;::~TList() &rArr; TList&lang;TWidget*&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::~TList()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> twidget.o(.constdata__ZTV11TWidgetList)
</UL>
<P><STRONG><a name="[2b8]"></a>TApplication::chgWidRoot(TWidget*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tapplication.o(i._ZN12TApplication10chgWidRootEP7TWidget))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TApplication::chgWidRoot(TWidget*) &rArr; TList&lang;TWidget*&rang;::append(TWidget*) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::show()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::findRef(TWidget*, bool)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::append(TWidget*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::translate()
</UL>

<P><STRONG><a name="[2bb]"></a>TApplication::chgWidRoot()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tapplication.o(i._ZN12TApplication10chgWidRootEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TApplication::chgWidRoot() &rArr; TApplication::show() &rArr; TWidget::showAll(TWidget*) &rArr;  TWidget::showAll(TWidget*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::show()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::first()
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::delWidRoot()
</UL>

<P><STRONG><a name="[2bd]"></a>TApplication::delWidRoot()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tapplication.o(i._ZN12TApplication10delWidRootEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TApplication::delWidRoot() &rArr; TApplication::remWindow(TWidget*) &rArr; TList&lang;TWidget*&rang;::remove(TWidget*) &rArr; TList&lang;TWidget*&rang;::find(TWidget*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::remWindow(TWidget*)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::chgWidRoot()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::translate()
</UL>

<P><STRONG><a name="[2bf]"></a>TApplication::distribute()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tapplication.o(i._ZN12TApplication10distributeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TApplication::distribute() &rArr; TApplication::visitAll(TObject*) &rArr;  TApplication::visitAll(TObject*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::visitAll(TObject*)
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::run()
</UL>

<P><STRONG><a name="[284]"></a>TApplication::run()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tapplication.o(i._ZN12TApplication3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TApplication::run() &rArr; TApplication::translate() &rArr; TApplication::chgWidRoot(TWidget*) &rArr; TList&lang;TWidget*&rang;::append(TWidget*) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::translate()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::distribute()
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGuiRun()
</UL>

<P><STRONG><a name="[2c3]"></a>TApplication::emit(TObject*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tapplication.o(i._ZN12TApplication4emitEP7TObject))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::visitAll(TObject*)
</UL>

<P><STRONG><a name="[283]"></a>TApplication::show()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tapplication.o(i._ZN12TApplication4showEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TApplication::show() &rArr; TWidget::showAll(TWidget*) &rArr;  TWidget::showAll(TWidget*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::showAll(TWidget*)
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGuiRun()
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::chgWidRoot()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::chgWidRoot(TWidget*)
</UL>

<P><STRONG><a name="[2c0]"></a>TApplication::visitAll(TObject*)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tapplication.o(i._ZN12TApplication8visitAllEP7TObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = TApplication::visitAll(TObject*) &rArr;  TApplication::visitAll(TObject*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::first()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::next()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::visitAll(TObject*)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::emit(TObject*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::visitAll(TObject*)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::distribute()
</UL>

<P><STRONG><a name="[282]"></a>TApplication::addWindow(TWidget*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tapplication.o(i._ZN12TApplication9addWindowEP7TWidget))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TApplication::addWindow(TWidget*) &rArr; TList&lang;TWidget*&rang;::append(TWidget*) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::append(TWidget*)
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGuiRun()
</UL>

<P><STRONG><a name="[2be]"></a>TApplication::remWindow(TWidget*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tapplication.o(i._ZN12TApplication9remWindowEP7TWidget))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TApplication::remWindow(TWidget*) &rArr; TList&lang;TWidget*&rang;::remove(TWidget*) &rArr; TList&lang;TWidget*&rang;::find(TWidget*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::remove(TWidget*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::translate()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::delWidRoot()
</UL>

<P><STRONG><a name="[2f1]"></a>TApplication::setSignal(TWidget*, long, unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tapplication.o(i._ZN12TApplication9setSignalEP7TWidgetlh))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWindow::slot_close()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openPhoto()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openGame()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::closeSetup()
</UL>

<P><STRONG><a name="[2c1]"></a>TApplication::translate()</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, tapplication.o(i._ZN12TApplication9translateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TApplication::translate() &rArr; TApplication::chgWidRoot(TWidget*) &rArr; TList&lang;TWidget*&rang;::append(TWidget*) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEvent::TEvent(long)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::remWindow(TWidget*)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::delWidRoot()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::chgWidRoot(TWidget*)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::run()
</UL>

<P><STRONG><a name="[280]"></a>TApplication::TApplication(TDirver*)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, tapplication.o(i._ZN12TApplicationC1EP7TDirver))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TApplication::TApplication(TDirver*) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::TList()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGuiRun()
</UL>

<P><STRONG><a name="[3f0]"></a>TApplication::TApplication__sub_object(TDirver*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, tapplication.o(i._ZN12TApplicationC1EP7TDirver), UNUSED)

<P><STRONG><a name="[285]"></a>TApplication::~TApplication()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tapplication.o(i._ZN12TApplicationD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TApplication::~TApplication() &rArr; TList&lang;TWidget*&rang;::remove(TWidget*) &rArr; TList&lang;TWidget*&rang;::find(TWidget*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::remove(TWidget*)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::last()
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGuiRun()
</UL>

<P><STRONG><a name="[3f1]"></a>TApplication::~TApplication__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, tapplication.o(i._ZN12TApplicationD1Ev), UNUSED)

<P><STRONG><a name="[2c9]"></a>TConnectList::at(unsigned long)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tobject.o(i._ZN12TConnectList2atEm))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TConnectList::at(unsigned long) &rArr; TList&lang;TConnection*&rang;::locate(unsigned long)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::locate(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::callSlot(void(TObject::*)(long, long), long, long)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::connect(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
</UL>

<P><STRONG><a name="[2cb]"></a>TConnectList::find(void(TObject::*)(long, long))</STRONG> (Thumb, 116 bytes, Stack size 96 bytes, tconnectlist.o(i._ZN12TConnectList4findEM7TObjectFvllE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TConnectList::find(void(TObject::*)(long, long))
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::first()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::next()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::callSlot(void(TObject::*)(long, long), long, long)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::connect(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
</UL>

<P><STRONG><a name="[cb]"></a>TConnectList::count()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tobject.o(i._ZN12TConnectList5countEv))
<BR>[Address Reference Count : 1]<UL><LI> tobject.o(.constdata__ZTV12TConnectList)
</UL>
<P><STRONG><a name="[c8]"></a>TConnectList::~TConnectList__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tobject.o(i._ZN12TConnectListD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TConnectList::~TConnectList__deallocating() &rArr; TList&lang;TConnection*&rang;::~TList() &rArr; TList&lang;TConnection*&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::~TList()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tobject.o(.constdata__ZTV12TConnectList)
</UL>
<P><STRONG><a name="[2cf]"></a>TTouchDirver::changeLock()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tdirver.o(i._ZN12TTouchDirver10changeLockEv))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTouchDirver::obtainData()
</UL>

<P><STRONG><a name="[ce]"></a>TTouchDirver::obtainData()</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, tdirver.o(i._ZN12TTouchDirver10obtainDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TTouchDirver::obtainData()
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTouchY
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTouchX
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getState
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTouchDirver::changeLock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tdirver.o(.constdata__ZTV12TTouchDirver)
</UL>
<P><STRONG><a name="[cd]"></a>TTouchDirver::dataBack()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tdirver.o(i._ZN12TTouchDirver8dataBackEv))
<BR>[Address Reference Count : 1]<UL><LI> tdirver.o(.constdata__ZTV12TTouchDirver)
</UL>
<P><STRONG><a name="[cc]"></a>TTouchDirver::dataFront()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tdirver.o(i._ZN12TTouchDirver9dataFrontEv))
<BR>[Address Reference Count : 1]<UL><LI> tdirver.o(.constdata__ZTV12TTouchDirver)
</UL>
<P><STRONG><a name="[d1]"></a>UserCalendar::show()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usercalendar.o(i._ZN12UserCalendar4showEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UserCalendar::show() &rArr; TWidget::refresh() &rArr; TWidget::rectCut(TRect*) &rArr;  TWidget::rectCut(TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usercalendar.o(.constdata__ZTV12UserCalendar)
</UL>
<P><STRONG><a name="[9f]"></a>UserCalendar::nextMonth()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usercalendar.o(i._ZN12UserCalendar9nextMonthEv))
<BR>[Address Reference Count : 1]<UL><LI> usercalendar.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>UserCalendar::prevMonth()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usercalendar.o(i._ZN12UserCalendar9prevMonthEv))
<BR>[Address Reference Count : 1]<UL><LI> usercalendar.o(.constdata)
</UL>
<P><STRONG><a name="[2d2]"></a>UserCalendar::UserCalendar(long, long, TImage*, const char*, TWidget*, int)</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, usercalendar.o(i._ZN12UserCalendarC1EllP6TImagePKcP7TWidgeti))
<BR><BR>[Stack]<UL><LI>Max Depth = 1716<LI>Call Chain = UserCalendar::UserCalendar(long, long, TImage*, const char*, TWidget*, int) &rArr; TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::TDialog(long, long, TImage*, const char*, TWidget*, unsigned short)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::connect(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::TImage(const char*)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, const char*, TWidget*)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openDate()
</UL>

<P><STRONG><a name="[3f2]"></a>UserCalendar::UserCalendar__sub_object(long, long, TImage*, const char*, TWidget*, int)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, usercalendar.o(i._ZN12UserCalendarC1EllP6TImagePKcP7TWidgeti), UNUSED)

<P><STRONG><a name="[d0]"></a>UserCalendar::~UserCalendar__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usercalendar.o(i._ZN12UserCalendarD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UserCalendar::~UserCalendar__deallocating() &rArr; UserCalendar::~UserCalendar() &rArr; TDialog::~TDialog() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalendar::~UserCalendar()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usercalendar.o(.constdata__ZTV12UserCalendar)
</UL>
<P><STRONG><a name="[cf]"></a>UserCalendar::~UserCalendar()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usercalendar.o(i._ZN12UserCalendarD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UserCalendar::~UserCalendar() &rArr; TDialog::~TDialog() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::~TDialog()
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalendar::~UserCalendar__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usercalendar.o(.constdata__ZTV12UserCalendar)
</UL>
<P><STRONG><a name="[3f3]"></a>UserCalendar::~UserCalendar__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, usercalendar.o(i._ZN12UserCalendarD1Ev), UNUSED)

<P><STRONG><a name="[e7]"></a>UserCalculate::show()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usercalculate.o(i._ZN13UserCalculate4showEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UserCalculate::show() &rArr; TWidget::refresh() &rArr; TWidget::rectCut(TRect*) &rArr;  TWidget::rectCut(TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usercalculate.o(.constdata__ZTV13UserCalculate)
</UL>
<P><STRONG><a name="[2d7]"></a>UserCalculate::UserCalculate(long, long, TImage*, const char*, TWidget*, int)</STRONG> (Thumb, 976 bytes, Stack size 48 bytes, usercalculate.o(i._ZN13UserCalculateC1EllP6TImagePKcP7TWidgeti))
<BR><BR>[Stack]<UL><LI>Max Depth = 1732<LI>Call Chain = UserCalculate::UserCalculate(long, long, TImage*, const char*, TWidget*, int) &rArr; TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::TLabel(long, long, TImage*, const char*, unsigned char, TWidget*)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::TDialog(long, long, TImage*, const char*, TWidget*, unsigned short)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::TImage(const char*)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openCalculate()
</UL>

<P><STRONG><a name="[3f4]"></a>UserCalculate::UserCalculate__sub_object(long, long, TImage*, const char*, TWidget*, int)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, usercalculate.o(i._ZN13UserCalculateC1EllP6TImagePKcP7TWidgeti), UNUSED)

<P><STRONG><a name="[e6]"></a>UserCalculate::~UserCalculate__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usercalculate.o(i._ZN13UserCalculateD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UserCalculate::~UserCalculate__deallocating() &rArr; UserCalculate::~UserCalculate() &rArr; TDialog::~TDialog() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalculate::~UserCalculate()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usercalculate.o(.constdata__ZTV13UserCalculate)
</UL>
<P><STRONG><a name="[e5]"></a>UserCalculate::~UserCalculate()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usercalculate.o(i._ZN13UserCalculateD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UserCalculate::~UserCalculate() &rArr; TDialog::~TDialog() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::~TDialog()
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalculate::~UserCalculate__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usercalculate.o(.constdata__ZTV13UserCalculate)
</UL>
<P><STRONG><a name="[3f5]"></a>UserCalculate::~UserCalculate__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, usercalculate.o(i._ZN13UserCalculateD1Ev), UNUSED)

<P><STRONG><a name="[b7]"></a>TAbstractButton::closeEvent(TCloseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tabstractbutton.o(i._ZN15TAbstractButton10closeEventEP11TCloseEvent))
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[b2]"></a>TAbstractButton::enterEvent(TEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tabstractbutton.o(i._ZN15TAbstractButton10enterEventEP6TEvent))
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[b3]"></a>TAbstractButton::leaveEvent(TEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tabstractbutton.o(i._ZN15TAbstractButton10leaveEventEP6TEvent))
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[b4]"></a>TAbstractButton::painTEvent(TPainTEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tabstractbutton.o(i._ZN15TAbstractButton10painTEventEP11TPainTEvent))
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[b6]"></a>TAbstractButton::resizeEvent(TResizeEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tabstractbutton.o(i._ZN15TAbstractButton11resizeEventEP12TResizeEvent))
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[b0]"></a>TAbstractButton::focusInEvent(TFocusEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tabstractbutton.o(i._ZN15TAbstractButton12focusInEventEP11TFocusEvent))
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[b1]"></a>TAbstractButton::focusOuTEvent(TFocusEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tabstractbutton.o(i._ZN15TAbstractButton13focusOuTEventEP11TFocusEvent))
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[ae]"></a>TAbstractButton::keyPressEvent(TKeyEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tabstractbutton.o(i._ZN15TAbstractButton13keyPressEventEP9TKeyEvent))
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[ad]"></a>TAbstractButton::mouseMoveEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tabstractbutton.o(i._ZN15TAbstractButton14mouseMoveEventEP11TMouseEvent))
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[a8]"></a>TAbstractButton::touchMoveEvent(TTouchEvent*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tabstractbutton.o(i._ZN15TAbstractButton14touchMoveEventEP11TTouchEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TAbstractButton::touchMoveEvent(TTouchEvent*) &rArr; TWidget::isInRealArea(long, long) &rArr; TWidget::isInArea(long, long)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::isInRealArea(long, long)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[af]"></a>TAbstractButton::keyReleaseEvent(TKeyEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tabstractbutton.o(i._ZN15TAbstractButton15keyReleaseEventEP9TKeyEvent))
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[ac]"></a>TAbstractButton::mouseClickEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tabstractbutton.o(i._ZN15TAbstractButton15mouseClickEventEP11TMouseEvent))
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[a9]"></a>TAbstractButton::mousePressEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tabstractbutton.o(i._ZN15TAbstractButton15mousePressEventEP11TMouseEvent))
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[a7]"></a>TAbstractButton::touchClickEvent(TTouchEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tabstractbutton.o(i._ZN15TAbstractButton15touchClickEventEP11TTouchEvent))
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[a5]"></a>TAbstractButton::touchPressEvent(TTouchEvent*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tabstractbutton.o(i._ZN15TAbstractButton15touchPressEventEP11TTouchEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TAbstractButton::touchPressEvent(TTouchEvent*) &rArr; TWidget::isInRealArea(long, long) &rArr; TWidget::isInArea(long, long)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::isInRealArea(long, long)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[aa]"></a>TAbstractButton::mouseReleaseEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tabstractbutton.o(i._ZN15TAbstractButton17mouseReleaseEventEP11TMouseEvent))
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[a6]"></a>TAbstractButton::touchReleaseEvent(TTouchEvent*)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tabstractbutton.o(i._ZN15TAbstractButton17touchReleaseEventEP11TTouchEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TAbstractButton::touchReleaseEvent(TTouchEvent*) &rArr; TWidget::isInRealArea(long, long) &rArr; TWidget::isInArea(long, long)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::isInRealArea(long, long)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[ab]"></a>TAbstractButton::mouseDoubleClickEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tabstractbutton.o(i._ZN15TAbstractButton21mouseDoubleClickEventEP11TMouseEvent))
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[b5]"></a>TAbstractButton::moveEvent(TMoveEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tabstractbutton.o(i._ZN15TAbstractButton9moveEventEP10TMoveEvent))
<BR>[Address Reference Count : 3]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
</UL>
<P><STRONG><a name="[2b3]"></a>TAbstractButton::TAbstractButton__sub_object(long, long, long, long, bool, const char*, TWidget*)</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, tabstractbutton.o(i._ZN15TAbstractButtonC2EllllbPKcP7TWidget))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TAbstractButton::TAbstractButton__sub_object(long, long, long, long, bool, const char*, TWidget*) &rArr; TWidget::TWidget__sub_object(long, long, long, long, const char*, TWidget*, bool) &rArr; TObject::TObject__sub_object(const char*, TObject*) &rArr; TObject::setName(const char*) &rArr; TString::setStr(const char*) &rArr; TString::resize(unsigned long) &rArr; TArray::resize(unsigned long) &rArr; TArray::duplicate(const char*, unsigned long) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::TWidget__sub_object(long, long, long, long, const char*, TWidget*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::TIconButton(long, long, TImage*, TImage*, const char*, TWidget*)
</UL>

<P><STRONG><a name="[e9]"></a>TAbstractButton::~TAbstractButton__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tabstractbutton.o(i._ZN15TAbstractButtonD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TAbstractButton::~TAbstractButton__deallocating() &rArr; TAbstractButton::~TAbstractButton__sub_object() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAbstractButton::~TAbstractButton__sub_object()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
</UL>
<P><STRONG><a name="[3f6]"></a>TAbstractButton::~TAbstractButton()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tabstractbutton.o(i._ZN15TAbstractButtonD2Ev), UNUSED)

<P><STRONG><a name="[e8]"></a>TAbstractButton::~TAbstractButton__sub_object()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tabstractbutton.o(i._ZN15TAbstractButtonD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TAbstractButton::~TAbstractButton__sub_object() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::~TWidget__sub_object()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::~TImage()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAbstractButton::~TAbstractButton__deallocating()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::~TPushButton()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::~TIconButton()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
</UL>
<P><STRONG><a name="[290]"></a>TFont::getWordCode(unsigned char*)</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, tfont.o(i._ZN5TFont11getWordCodeEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1500<LI>Call Chain = TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::displayCHChar(long, long, unsigned char*, bool)
</UL>

<P><STRONG><a name="[29c]"></a>TFont::TFont(const char*, unsigned short, unsigned short, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tfont.o(i._ZN5TFontC1EPKctth))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TFont::TFont(const char*, unsigned short, unsigned short, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::TBufPainter(unsigned char*, TRect*)
</UL>

<P><STRONG><a name="[3f7]"></a>TFont::TFont__sub_object(const char*, unsigned short, unsigned short, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, tfont.o(i._ZN5TFontC1EPKctth), UNUSED)

<P><STRONG><a name="[ec]"></a>TFont::~TFont__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tfont.o(i._ZN5TFontD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TFont::~TFont__deallocating() &rArr; TFont::~TFont() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFont::~TFont()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tfont.o(.constdata__ZTV5TFont)
</UL>
<P><STRONG><a name="[eb]"></a>TFont::~TFont()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tfont.o(i._ZN5TFontD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TFont::~TFont() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFont::~TFont__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tfont.o(.constdata__ZTV5TFont)
</UL>
<P><STRONG><a name="[3f8]"></a>TFont::~TFont__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfont.o(i._ZN5TFontD1Ev), UNUSED)

<P><STRONG><a name="[2fb]"></a>TRect::moveTopLeft(long, long)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, trect.o(i._ZN5TRect11moveTopLeftEll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TRect::moveTopLeft(long, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgChildsXY(TWidget*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchMoveEvent(TTouchEvent*)
</UL>

<P><STRONG><a name="[300]"></a>TRect::setWidth(int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, trect.o(i._ZN5TRect8setWidthEi))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::TWidget__sub_object(long, long, long, long, const char*, TWidget*, bool)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::restRect(long, long, long, long, TRect&, TRect&)
</UL>

<P><STRONG><a name="[301]"></a>TRect::setHeight(int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, trect.o(i._ZN5TRect9setHeightEi))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::TWidget__sub_object(long, long, long, long, const char*, TWidget*, bool)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::restRect(long, long, long, long, TRect&, TRect&)
</UL>

<P><STRONG><a name="[28e]"></a>TRect::TRect(int, int, int, int)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tdialog.o(i._ZN5TRectC1Eiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TRect::TRect(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::blendPoint(unsigned long, unsigned char*, TSize*, unsigned char*, TSize*, TRect*)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawFullRect(long, long, long, long)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchMoveEvent(TTouchEvent*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::imgLoad(unsigned char*, TSize*, unsigned char*, TSize*, TRect*)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawVLine(long, long, long)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawPoint(long, long)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawHLine(long, long, long)
</UL>

<P><STRONG><a name="[3f9]"></a>TRect::TRect__sub_object(int, int, int, int)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tdialog.o(i._ZN5TRectC1Eiiii), UNUSED)

<P><STRONG><a name="[320]"></a>TRect::TRect()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, twidget.o(i._ZN5TRectC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::TWidget__sub_object(long, long, long, long, const char*, TWidget*, bool)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::intersect(const TRect&) const
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::rectCut(TRect*)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::repaintInvaild(TRect*, TRect*)
</UL>

<P><STRONG><a name="[3fa]"></a>TRect::TRect__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, twidget.o(i._ZN5TRectC1Ev), UNUSED)

<P><STRONG><a name="[2de]"></a>TArray::store(const char*, unsigned long)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tarray.o(i._ZN6TArray5storeEPKcm))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TArray::store(const char*, unsigned long) &rArr; TArray::resize(unsigned long) &rArr; TArray::duplicate(const char*, unsigned long) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::resize(unsigned long)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::setStr(const char*)
</UL>

<P><STRONG><a name="[2df]"></a>TArray::resize(unsigned long)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tarray.o(i._ZN6TArray6resizeEm))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TArray::resize(unsigned long) &rArr; TArray::duplicate(const char*, unsigned long) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::duplicate(const char*, unsigned long)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::resize(unsigned long)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::store(const char*, unsigned long)
</UL>

<P><STRONG><a name="[f9]"></a>TArray::newData()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tarray.o(i._ZN6TArray7newDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TArray::newData() &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::TArray()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tarray.o(.constdata__ZTV6TArray)
<LI> tstring.o(.constdata__ZTV7TString)
</UL>
<P><STRONG><a name="[2e0]"></a>TArray::duplicate(const char*, unsigned long)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tarray.o(i._ZN6TArray9duplicateEPKcm))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TArray::duplicate(const char*, unsigned long) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::TString(const char*)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::resize(unsigned long)
</UL>

<P><STRONG><a name="[2e1]"></a>TArray::TArray()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tarray.o(i._ZN6TArrayC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TArray::TArray() &rArr; TArray::newData() &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::newData()
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::TString(const char*)
</UL>

<P><STRONG><a name="[3fb]"></a>TArray::TArray__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tarray.o(i._ZN6TArrayC1Ev), UNUSED)

<P><STRONG><a name="[f8]"></a>TArray::~TArray()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tarray.o(i._ZN6TArrayD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TArray::~TArray() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tShared::deref()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::~TString()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tarray.o(.constdata__ZTV6TArray)
</UL>
<P><STRONG><a name="[3fc]"></a>TArray::~TArray__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tarray.o(i._ZN6TArrayD1Ev), UNUSED)

<P><STRONG><a name="[2e3]"></a>TEvent::peErrMsg()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, teven.o(i._ZN6TEvent8peErrMsgEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TEvent::peErrMsg() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEvent::~TEvent()
</UL>

<P><STRONG><a name="[2c6]"></a>TEvent::TEvent(long)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tapplication.o(i._ZN6TEventC1El))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::translate()
</UL>

<P><STRONG><a name="[3fd]"></a>TEvent::TEvent__sub_object(long)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tapplication.o(i._ZN6TEventC1El), UNUSED)

<P><STRONG><a name="[fb]"></a>TEvent::~TEvent__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tapplication.o(i._ZN6TEventD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TEvent::~TEvent__deallocating() &rArr; TEvent::~TEvent() &rArr; TEvent::peErrMsg() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEvent::~TEvent()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tapplication.o(.constdata__ZTV6TEvent)
</UL>
<P><STRONG><a name="[fa]"></a>TEvent::~TEvent()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tapplication.o(i._ZN6TEventD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TEvent::~TEvent() &rArr; TEvent::peErrMsg() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEvent::peErrMsg()
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEvent::~TEvent__deallocating()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTouchEvent::~TTouchEvent()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCloseEvent::~TCloseEvent__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tapplication.o(.constdata__ZTV6TEvent)
</UL>
<P><STRONG><a name="[3fe]"></a>TEvent::~TEvent__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tapplication.o(i._ZN6TEventD1Ev), UNUSED)

<P><STRONG><a name="[110]"></a>TFrame::closeEvent(TCloseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame10closeEventEP11TCloseEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[10b]"></a>TFrame::enterEvent(TEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame10enterEventEP6TEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[10c]"></a>TFrame::leaveEvent(TEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame10leaveEventEP6TEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[10d]"></a>TFrame::painTEvent(TPainTEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame10painTEventEP11TPainTEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[10f]"></a>TFrame::resizeEvent(TResizeEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame11resizeEventEP12TResizeEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[109]"></a>TFrame::focusInEvent(TFocusEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame12focusInEventEP11TFocusEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[10a]"></a>TFrame::focusOuTEvent(TFocusEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame13focusOuTEventEP11TFocusEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[107]"></a>TFrame::keyPressEvent(TKeyEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame13keyPressEventEP9TKeyEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[106]"></a>TFrame::mouseMoveEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame14mouseMoveEventEP11TMouseEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[101]"></a>TFrame::touchMoveEvent(TTouchEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame14touchMoveEventEP11TTouchEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[108]"></a>TFrame::keyReleaseEvent(TKeyEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame15keyReleaseEventEP9TKeyEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[105]"></a>TFrame::mouseClickEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame15mouseClickEventEP11TMouseEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[102]"></a>TFrame::mousePressEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame15mousePressEventEP11TMouseEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[100]"></a>TFrame::touchClickEvent(TTouchEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame15touchClickEventEP11TTouchEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[fe]"></a>TFrame::touchPressEvent(TTouchEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame15touchPressEventEP11TTouchEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[103]"></a>TFrame::mouseReleaseEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame17mouseReleaseEventEP11TMouseEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[ff]"></a>TFrame::touchReleaseEvent(TTouchEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame17touchReleaseEventEP11TTouchEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[104]"></a>TFrame::mouseDoubleClickEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame21mouseDoubleClickEventEP11TMouseEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[10e]"></a>TFrame::moveEvent(TMoveEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrame9moveEventEP10TMoveEvent))
<BR>[Address Reference Count : 2]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[2e4]"></a>TFrame::TFrame__sub_object(long, long, long, long, const char*, TWidget*)</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, tframe.o(i._ZN6TFrameC2EllllPKcP7TWidget))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TFrame::TFrame__sub_object(long, long, long, long, const char*, TWidget*) &rArr; TWidget::TWidget__sub_object(long, long, long, long, const char*, TWidget*, bool) &rArr; TObject::TObject__sub_object(const char*, TObject*) &rArr; TObject::setName(const char*) &rArr; TString::setStr(const char*) &rArr; TString::resize(unsigned long) &rArr; TArray::resize(unsigned long) &rArr; TArray::duplicate(const char*, unsigned long) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::TWidget__sub_object(long, long, long, long, const char*, TWidget*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::TLabel(long, long, long, long, const char*, TWidget*, unsigned char, bool, unsigned long, unsigned long)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::TLabel(long, long, TImage*, const char*, unsigned char, TWidget*)
</UL>

<P><STRONG><a name="[fd]"></a>TFrame::~TFrame__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tframe.o(i._ZN6TFrameD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TFrame::~TFrame__deallocating() &rArr; TFrame::~TFrame__sub_object() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFrame::~TFrame__sub_object()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
</UL>
<P><STRONG><a name="[3ff]"></a>TFrame::~TFrame()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrameD2Ev), UNUSED)

<P><STRONG><a name="[fc]"></a>TFrame::~TFrame__sub_object()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tframe.o(i._ZN6TFrameD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TFrame::~TFrame__sub_object() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::~TWidget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::~TLabel()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFrame::~TFrame__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tframe.o(.constdata__ZTV6TFrame)
</UL>
<P><STRONG><a name="[2e5]"></a>TImage::ObFileType(const char*)</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, timage.o(i._ZN6TImage10ObFileTypeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TImage::ObFileType(const char*) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::Decode()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::TImage(unsigned char*, unsigned short, unsigned short, const char*)
</UL>

<P><STRONG><a name="[2af]"></a>TImage::blendPoint(unsigned long, unsigned char*, TSize*, unsigned char*, TSize*, TRect*)</STRONG> (Thumb, 606 bytes, Stack size 96 bytes, timage.o(i._ZN6TImage10blendPointEmPhP5TSizeS0_S2_P5TRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TImage::blendPoint(unsigned long, unsigned char*, TSize*, unsigned char*, TSize*, TRect*) &rArr; TRect::TRect(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::TRect(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_depress(long, long)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_depress(long, long)
</UL>

<P><STRONG><a name="[2e8]"></a>TImage::Decode()</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, timage.o(i._ZN6TImage6DecodeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612<LI>Call Chain = TImage::Decode() &rArr; lodepng_decode32_file(unsigned char**, unsigned*, unsigned*, const char*) &rArr; lodepng_decode_file(unsigned char**, unsigned*, unsigned*, const char*, LodePNGColorType, unsigned) &rArr; lodepng_load_file(unsigned char**, unsigned*, const char*) &rArr; lodepng_buffer_file(unsigned char*, unsigned, const char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode_file
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_decode_file
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode32_file(unsigned char**, unsigned*, unsigned*, const char*)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::ObFileType(const char*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::TImage(const char*)
</UL>

<P><STRONG><a name="[2eb]"></a>TImage::imgLoad(unsigned char*, TSize*, unsigned char*, TSize*, TRect*)</STRONG> (Thumb, 290 bytes, Stack size 72 bytes, timage.o(i._ZN6TImage7imgLoadEPhP5TSizeS0_S2_P5TRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TImage::imgLoad(unsigned char*, TSize*, unsigned char*, TSize*, TRect*) &rArr; gui_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memcpy
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::TRect(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::imgLoadInterface(long, long, TImage*, TRect*, unsigned char)
</UL>

<P><STRONG><a name="[2d4]"></a>TImage::TImage(const char*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timage.o(i._ZN6TImageC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1620<LI>Call Chain = TImage::TImage(const char*) &rArr; TImage::Decode() &rArr; lodepng_decode32_file(unsigned char**, unsigned*, unsigned*, const char*) &rArr; lodepng_decode_file(unsigned char**, unsigned*, unsigned*, const char*, LodePNGColorType, unsigned) &rArr; lodepng_load_file(unsigned char**, unsigned*, const char*) &rArr; lodepng_buffer_file(unsigned char*, unsigned, const char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::Decode()
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::Desktop(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::UserPhoto(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserGame::UserGame(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalculate::UserCalculate(long, long, TImage*, const char*, TWidget*, int)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalendar::UserCalendar(long, long, TImage*, const char*, TWidget*, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openTimer()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openSetup()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openPhoto()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openGame()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openDate()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openCalculate()
</UL>

<P><STRONG><a name="[400]"></a>TImage::TImage__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, timage.o(i._ZN6TImageC1EPKc), UNUSED)

<P><STRONG><a name="[2ed]"></a>TImage::TImage(unsigned char*, unsigned short, unsigned short, const char*)</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, timage.o(i._ZN6TImageC1EPhttPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1628<LI>Call Chain = TImage::TImage(unsigned char*, unsigned short, unsigned short, const char*) &rArr; lodepng_decode32_file(unsigned char**, unsigned*, unsigned*, const char*) &rArr; lodepng_decode_file(unsigned char**, unsigned*, unsigned*, const char*, LodePNGColorType, unsigned) &rArr; lodepng_load_file(unsigned char**, unsigned*, const char*) &rArr; lodepng_buffer_file(unsigned char*, unsigned, const char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piclib_init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode32_file(unsigned char**, unsigned*, unsigned*, const char*)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::ObFileType(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, unsigned short, unsigned short, const char*, const char*, TWidget*, bool)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWindow::TWindow(const char*, TApplication*, const char*, TWidget*)
</UL>

<P><STRONG><a name="[401]"></a>TImage::TImage__sub_object(unsigned char*, unsigned short, unsigned short, const char*)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, timage.o(i._ZN6TImageC1EPhttPKc), UNUSED)

<P><STRONG><a name="[2db]"></a>TImage::~TImage()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timage.o(i._ZN6TImageD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TImage::~TImage() &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAbstractButton::~TAbstractButton__sub_object()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::~TLabel()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::~TDialog()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, unsigned short, unsigned short, const char*, const char*, TWidget*, bool)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, unsigned char, const char*, TWidget*)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, const char*, TWidget*)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWindow::TWindow(const char*, TApplication*, const char*, TWidget*)
</UL>

<P><STRONG><a name="[402]"></a>TImage::~TImage__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, timage.o(i._ZN6TImageD1Ev), UNUSED)

<P><STRONG><a name="[113]"></a>TLabel::show()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tlabel.o(i._ZN6TLabel4showEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TLabel::show() &rArr; TWidget::refresh() &rArr; TWidget::rectCut(TRect*) &rArr;  TWidget::rectCut(TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[2d8]"></a>TLabel::TLabel(long, long, TImage*, const char*, unsigned char, TWidget*)</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, tlabel.o(i._ZN6TLabelC1EllP6TImagePKchP7TWidget))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668<LI>Call Chain = TLabel::TLabel(long, long, TImage*, const char*, unsigned char, TWidget*) &rArr; TBufPainter::drawAlignText(long, long, const char*, unsigned char, unsigned long) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::imgLoadInterface(long, long, TImage*, TRect*, unsigned char)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::~TBufPainter()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::TBufPainter(unsigned char*, TRect*)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawAlignText(long, long, const char*, unsigned char, unsigned long)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::getName()
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFrame::TFrame__sub_object(long, long, long, long, const char*, TWidget*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalculate::UserCalculate(long, long, TImage*, const char*, TWidget*, int)
</UL>

<P><STRONG><a name="[403]"></a>TLabel::TLabel__sub_object(long, long, TImage*, const char*, unsigned char, TWidget*)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, tlabel.o(i._ZN6TLabelC1EllP6TImagePKchP7TWidget), UNUSED)

<P><STRONG><a name="[2f0]"></a>TLabel::TLabel(long, long, long, long, const char*, TWidget*, unsigned char, bool, unsigned long, unsigned long)</STRONG> (Thumb, 174 bytes, Stack size 88 bytes, tlabel.o(i._ZN6TLabelC1EllllPKcP7TWidgethbmm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1700<LI>Call Chain = TLabel::TLabel(long, long, long, long, const char*, TWidget*, unsigned char, bool, unsigned long, unsigned long) &rArr; TBufPainter::drawAlignText(long, long, const char*, unsigned char, unsigned long) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBuffer::obPareBack(unsigned char*, unsigned long, long, long, unsigned short, unsigned short)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::~TBufPainter()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::TBufPainter(unsigned char*, TRect*)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawAlignText(long, long, const char*, unsigned char, unsigned long)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::width()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::getName()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawFullRect(long, long, long, long)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::getPareBufCorreAddr()
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFrame::TFrame__sub_object(long, long, long, long, const char*, TWidget*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::UserPhoto(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTime::UserTime(long, long, TImage*, const char*, TWidget*, int)
</UL>

<P><STRONG><a name="[404]"></a>TLabel::TLabel__sub_object(long, long, long, long, const char*, TWidget*, unsigned char, bool, unsigned long, unsigned long)</STRONG> (Thumb, 0 bytes, Stack size 88 bytes, tlabel.o(i._ZN6TLabelC1EllllPKcP7TWidgethbmm), UNUSED)

<P><STRONG><a name="[112]"></a>TLabel::~TLabel__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tlabel.o(i._ZN6TLabelD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TLabel::~TLabel__deallocating() &rArr; TLabel::~TLabel() &rArr; TFrame::~TFrame__sub_object() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::~TLabel()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[111]"></a>TLabel::~TLabel()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tlabel.o(i._ZN6TLabelD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TLabel::~TLabel() &rArr; TFrame::~TFrame__sub_object() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::~TImage()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFrame::~TFrame__sub_object()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::~TLabel__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tlabel.o(.constdata__ZTV6TLabel)
</UL>
<P><STRONG><a name="[405]"></a>TLabel::~TLabel__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tlabel.o(i._ZN6TLabelD1Ev), UNUSED)

<P><STRONG><a name="[99]"></a>Desktop::closeSetup()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, desktop.o(i._ZN7Desktop10closeSetupEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Desktop::closeSetup()
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::setSignal(TWidget*, long, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> desktop.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>Desktop::openCalculate()</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, desktop.o(i._ZN7Desktop13openCalculateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1764<LI>Call Chain = Desktop::openCalculate() &rArr; UserCalculate::UserCalculate(long, long, TImage*, const char*, TWidget*, int) &rArr; TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::TImage(const char*)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, unsigned char, const char*, TWidget*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalculate::UserCalculate(long, long, TImage*, const char*, TWidget*, int)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::showAll()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> desktop.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>Desktop::show()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, desktop.o(i._ZN7Desktop4showEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Desktop::show() &rArr; TWidget::refresh() &rArr; TWidget::rectCut(TRect*) &rArr;  TWidget::rectCut(TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> desktop.o(.constdata__ZTV7Desktop)
</UL>
<P><STRONG><a name="[94]"></a>Desktop::openDate()</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, desktop.o(i._ZN7Desktop8openDateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1748<LI>Call Chain = Desktop::openDate() &rArr; UserCalendar::UserCalendar(long, long, TImage*, const char*, TWidget*, int) &rArr; TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::TImage(const char*)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, unsigned char, const char*, TWidget*)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalendar::UserCalendar(long, long, TImage*, const char*, TWidget*, int)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::showAll()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> desktop.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>Desktop::openGame()</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, desktop.o(i._ZN7Desktop8openGameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1756<LI>Call Chain = Desktop::openGame() &rArr; UserGame::UserGame(const char*, TApplication*, const char*, TWidget*) &rArr; TWindow::TWindow(const char*, TApplication*, const char*, TWidget*) &rArr; TImage::TImage(unsigned char*, unsigned short, unsigned short, const char*) &rArr; lodepng_decode32_file(unsigned char**, unsigned*, unsigned*, const char*) &rArr; lodepng_decode_file(unsigned char**, unsigned*, unsigned*, const char*, LodePNGColorType, unsigned) &rArr; lodepng_load_file(unsigned char**, unsigned*, const char*) &rArr; lodepng_buffer_file(unsigned char*, unsigned, const char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::setSignal(TWidget*, long, unsigned char)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::TImage(const char*)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, unsigned char, const char*, TWidget*)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserGame::UserGame(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> desktop.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>Desktop::openPhoto()</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, desktop.o(i._ZN7Desktop9openPhotoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2124<LI>Call Chain = Desktop::openPhoto() &rArr; UserPhoto::UserPhoto(const char*, TApplication*, const char*, TWidget*) &rArr; UserPhoto::scanfile(const char*) &rArr;  UserPhoto::scanfile(const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::setSignal(TWidget*, long, unsigned char)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::TImage(const char*)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, unsigned char, const char*, TWidget*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::UserPhoto(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> desktop.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>Desktop::openSetup()</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, desktop.o(i._ZN7Desktop9openSetupEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1716<LI>Call Chain = Desktop::openSetup() &rArr; TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::TDialog(long, long, TImage*, const char*, TWidget*, unsigned short)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::connect(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::TImage(const char*)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, unsigned char, const char*, TWidget*)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::showAll()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> desktop.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>Desktop::openTimer()</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, desktop.o(i._ZN7Desktop9openTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1780<LI>Call Chain = Desktop::openTimer() &rArr; UserTime::UserTime(long, long, TImage*, const char*, TWidget*, int) &rArr; TLabel::TLabel(long, long, long, long, const char*, TWidget*, unsigned char, bool, unsigned long, unsigned long) &rArr; TBufPainter::drawAlignText(long, long, const char*, unsigned char, unsigned long) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::TImage(const char*)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, unsigned char, const char*, TWidget*)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTime::UserTime(long, long, TImage*, const char*, TWidget*, int)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::showAll()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> desktop.o(.constdata)
</UL>
<P><STRONG><a name="[281]"></a>Desktop::Desktop(const char*, TApplication*, const char*, TWidget*)</STRONG> (Thumb, 542 bytes, Stack size 40 bytes, desktop.o(i._ZN7DesktopC1EPKcP12TApplicationS1_P7TWidget))
<BR><BR>[Stack]<UL><LI>Max Depth = 1732<LI>Call Chain = Desktop::Desktop(const char*, TApplication*, const char*, TWidget*) &rArr; TIconButton::TIconButton(long, long, TImage*, TImage*, const char*, TWidget*) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::connect(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::TImage(const char*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::TIconButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWindow::TWindow(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGuiRun()
</UL>

<P><STRONG><a name="[406]"></a>Desktop::Desktop__sub_object(const char*, TApplication*, const char*, TWidget*)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, desktop.o(i._ZN7DesktopC1EPKcP12TApplicationS1_P7TWidget), UNUSED)

<P><STRONG><a name="[115]"></a>Desktop::~Desktop__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, desktop.o(i._ZN7DesktopD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Desktop::~Desktop__deallocating() &rArr; Desktop::~Desktop() &rArr; TWindow::~TWindow() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::~Desktop()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> desktop.o(.constdata__ZTV7Desktop)
</UL>
<P><STRONG><a name="[114]"></a>Desktop::~Desktop()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, desktop.o(i._ZN7DesktopD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Desktop::~Desktop() &rArr; TWindow::~TWindow() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWindow::~TWindow()
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGuiRun()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::~Desktop__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> desktop.o(.constdata__ZTV7Desktop)
</UL>
<P><STRONG><a name="[407]"></a>Desktop::~Desktop__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, desktop.o(i._ZN7DesktopD1Ev), UNUSED)

<P><STRONG><a name="[2ac]"></a>TBuffer::obPareBack(unsigned char*, unsigned long, long, long, unsigned short, unsigned short)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, tbuffer.o(i._ZN7TBuffer10obPareBackEPhmlltt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TBuffer::obPareBack(unsigned char*, unsigned long, long, long, unsigned short, unsigned short) &rArr; gui_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::TLabel(long, long, long, long, const char*, TWidget*, unsigned char, bool, unsigned long, unsigned long)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::TIconButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::release()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_release(long, long)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_depress(long, long)
</UL>

<P><STRONG><a name="[2f8]"></a>TBuffer::transform(long, long, TRect*)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tbuffer.o(i._ZN7TBuffer9transformEllP5TRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TBuffer::transform(long, long, TRect*) &rArr; gui_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::rectCut(TRect*)
</UL>

<P><STRONG><a name="[2f9]"></a>TBuffer::TBuffer(unsigned long, unsigned long)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tbuffer.o(i._ZN7TBufferC1Emm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TBuffer::TBuffer(unsigned long, unsigned long) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::TWidget__sub_object(long, long, long, long, const char*, TWidget*, bool)
</UL>

<P><STRONG><a name="[408]"></a>TBuffer::TBuffer__sub_object(unsigned long, unsigned long)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, tbuffer.o(i._ZN7TBufferC1Emm), UNUSED)

<P><STRONG><a name="[2fa]"></a>TBuffer::~TBuffer()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tbuffer.o(i._ZN7TBufferD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TBuffer::~TBuffer() &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::~TWidget__sub_object()
</UL>

<P><STRONG><a name="[409]"></a>TBuffer::~TBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tbuffer.o(i._ZN7TBufferD1Ev), UNUSED)

<P><STRONG><a name="[e4]"></a>TDialog::closeEvent(TCloseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tdialog.o(i._ZN7TDialog10closeEventEP11TCloseEvent))
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[df]"></a>TDialog::enterEvent(TEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tdialog.o(i._ZN7TDialog10enterEventEP6TEvent))
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[e0]"></a>TDialog::leaveEvent(TEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tdialog.o(i._ZN7TDialog10leaveEventEP6TEvent))
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[e1]"></a>TDialog::painTEvent(TPainTEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tdialog.o(i._ZN7TDialog10painTEventEP11TPainTEvent))
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[e3]"></a>TDialog::resizeEvent(TResizeEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tdialog.o(i._ZN7TDialog11resizeEventEP12TResizeEvent))
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[dd]"></a>TDialog::focusInEvent(TFocusEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tdialog.o(i._ZN7TDialog12focusInEventEP11TFocusEvent))
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[de]"></a>TDialog::focusOuTEvent(TFocusEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tdialog.o(i._ZN7TDialog13focusOuTEventEP11TFocusEvent))
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[db]"></a>TDialog::keyPressEvent(TKeyEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tdialog.o(i._ZN7TDialog13keyPressEventEP9TKeyEvent))
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[da]"></a>TDialog::mouseMoveEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tdialog.o(i._ZN7TDialog14mouseMoveEventEP11TMouseEvent))
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[d5]"></a>TDialog::touchMoveEvent(TTouchEvent*)</STRONG> (Thumb, 270 bytes, Stack size 104 bytes, tdialog.o(i._ZN7TDialog14touchMoveEventEP11TTouchEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1716<LI>Call Chain = TDialog::touchMoveEvent(TTouchEvent*) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::imgLoadInterface(long, long, TImage*, TRect*, unsigned char)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::~TBufPainter()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::TBufPainter(unsigned char*, TRect*)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::height()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::width()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::getName()
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::showAll(TWidget*)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgChildsXY(TWidget*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgInValid(TRect*, TRect*)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::moveTopLeft(long, long)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::restRect(long, long, long, long, TRect&, TRect&)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::TRect(int, int, int, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[dc]"></a>TDialog::keyReleaseEvent(TKeyEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tdialog.o(i._ZN7TDialog15keyReleaseEventEP9TKeyEvent))
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[d9]"></a>TDialog::mouseClickEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tdialog.o(i._ZN7TDialog15mouseClickEventEP11TMouseEvent))
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[d6]"></a>TDialog::mousePressEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tdialog.o(i._ZN7TDialog15mousePressEventEP11TMouseEvent))
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[d4]"></a>TDialog::touchClickEvent(TTouchEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tdialog.o(i._ZN7TDialog15touchClickEventEP11TTouchEvent))
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[d2]"></a>TDialog::touchPressEvent(TTouchEvent*)</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, tdialog.o(i._ZN7TDialog15touchPressEventEP11TTouchEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1724<LI>Call Chain = TDialog::touchPressEvent(TTouchEvent*) &rArr; TBufPainter::drawDialogTitle(long, long, long, const char*, bool) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::~TBufPainter()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::TBufPainter(unsigned char*, TRect*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::width()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::getName()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::isInRealArea(long, long)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::showAll(TWidget*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgInValid(TRect*, TRect*)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawDialogTitle(long, long, long, const char*, bool)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::first()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::next()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::first()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::next()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidgetList::remove(TWidget*)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[d7]"></a>TDialog::mouseReleaseEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tdialog.o(i._ZN7TDialog17mouseReleaseEventEP11TMouseEvent))
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[d3]"></a>TDialog::touchReleaseEvent(TTouchEvent*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tdialog.o(i._ZN7TDialog17touchReleaseEventEP11TTouchEvent))
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[d8]"></a>TDialog::mouseDoubleClickEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tdialog.o(i._ZN7TDialog21mouseDoubleClickEventEP11TMouseEvent))
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[12c]"></a>TDialog::show()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tdialog.o(i._ZN7TDialog4showEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TDialog::show() &rArr; TWidget::refresh() &rArr; TWidget::rectCut(TRect*) &rArr;  TWidget::rectCut(TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
</UL>
<P><STRONG><a name="[2fd]"></a>TDialog::restRect(long, long, long, long, TRect&, TRect&)</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, tdialog.o(i._ZN7TDialog8restRectEllllR5TRectS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TDialog::restRect(long, long, long, long, TRect&, TRect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::height()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::width()
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::setHeight(int)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::setWidth(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchMoveEvent(TTouchEvent*)
</UL>

<P><STRONG><a name="[e2]"></a>TDialog::moveEvent(TMoveEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tdialog.o(i._ZN7TDialog9moveEventEP10TMoveEvent))
<BR>[Address Reference Count : 4]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[2d3]"></a>TDialog::TDialog(long, long, TImage*, const char*, TWidget*, unsigned short)</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, tdialog.o(i._ZN7TDialogC1EllP6TImagePKcP7TWidgett))
<BR><BR>[Stack]<UL><LI>Max Depth = 1684<LI>Call Chain = TDialog::TDialog(long, long, TImage*, const char*, TWidget*, unsigned short) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::imgLoadInterface(long, long, TImage*, TRect*, unsigned char)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::~TBufPainter()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::TBufPainter(unsigned char*, TRect*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::width()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::getName()
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::TWidget__sub_object(long, long, long, long, const char*, TWidget*, bool)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgInValid(TRect*, TRect*)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTime::UserTime(long, long, TImage*, const char*, TWidget*, int)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalculate::UserCalculate(long, long, TImage*, const char*, TWidget*, int)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalendar::UserCalendar(long, long, TImage*, const char*, TWidget*, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openSetup()
</UL>

<P><STRONG><a name="[40a]"></a>TDialog::TDialog__sub_object(long, long, TImage*, const char*, TWidget*, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 72 bytes, tdialog.o(i._ZN7TDialogC1EllP6TImagePKcP7TWidgett), UNUSED)

<P><STRONG><a name="[12b]"></a>TDialog::~TDialog__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tdialog.o(i._ZN7TDialogD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TDialog::~TDialog__deallocating() &rArr; TDialog::~TDialog() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::~TDialog()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
</UL>
<P><STRONG><a name="[12a]"></a>TDialog::~TDialog()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tdialog.o(i._ZN7TDialogD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TDialog::~TDialog() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::~TWidget__sub_object()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::~TImage()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::first()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::next()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidgetList::remove(TWidget*)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::~TDialog__deallocating()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalendar::~UserCalendar()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalculate::~UserCalculate()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTime::~UserTime()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tdialog.o(.constdata__ZTV7TDialog)
</UL>
<P><STRONG><a name="[40b]"></a>TDialog::~TDialog__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, tdialog.o(i._ZN7TDialogD1Ev), UNUSED)

<P><STRONG><a name="[302]"></a>TObject::destroyChild(TObject*)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tobject.o(i._ZN7TObject12destroyChildEPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::remove(TObject*)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::last()
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::~TObject__sub_object()
</UL>

<P><STRONG><a name="[305]"></a>TObject::relink(tLNode&lang;TObject*&rang;*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tobject.o(i._ZN7TObject6relinkEP6tLNodeIPS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TObject::relink(tLNode&lang;TObject*&rang;*) &rArr; TList&lang;TObject*&rang;::relinkNode(tLNode&lang;TObject*&rang;*) &rArr; TList&lang;TObject*&rang;::unlink()
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::relinkNode(tLNode&lang;TObject*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgInValid(TRect*, TRect*)
</UL>

<P><STRONG><a name="[307]"></a>TObject::unlink(TObject*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tobject.o(i._ZN7TObject6unlinkEPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TObject::unlink(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::unlink()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgInValid(TRect*, TRect*)
</UL>

<P><STRONG><a name="[2d6]"></a>TObject::connect(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, tobject.o(i._ZN7TObject7connectEMS_FvllEPS_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TObject::connect(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long)) &rArr; TConnection::TConnection(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long)) &rArr; TFuncList::append(void(TObject::*)(long, long)) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFuncList::append(void(TObject::*)(long, long))
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFuncList::find(void(TObject::*)(long, long))
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnectList::find(void(TObject::*)(long, long))
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::TList()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::append(TConnection*)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnectList::at(unsigned long)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::append(TObject*)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection::TConnection(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::Desktop(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::UserPhoto(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserGame::UserGame(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalendar::UserCalendar(long, long, TImage*, const char*, TWidget*, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openSetup()
</UL>

<P><STRONG><a name="[2ad]"></a>TObject::getName()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcheckbox.o(i._ZN7TObject7getNameEv))
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::operator const char*() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::release()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_release(long, long)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_depress(long, long)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::TLabel(long, long, long, long, const char*, TWidget*, unsigned char, bool, unsigned long, unsigned long)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::TLabel(long, long, TImage*, const char*, unsigned char, TWidget*)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::TDialog(long, long, TImage*, const char*, TWidget*, unsigned short)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchPressEvent(TTouchEvent*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchMoveEvent(TTouchEvent*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, unsigned short, unsigned short, const char*, const char*, TWidget*, bool)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, unsigned char, const char*, TWidget*)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, const char*, TWidget*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::TIconButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::release()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_release(long, long)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_depress(long, long)
</UL>

<P><STRONG><a name="[30e]"></a>TObject::setName(const char*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tobject.o(i._ZN7TObject7setNameEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TObject::setName(const char*) &rArr; TString::setStr(const char*) &rArr; TString::resize(unsigned long) &rArr; TArray::resize(unsigned long) &rArr; TArray::duplicate(const char*, unsigned long) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::TString(const char*)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::setStr(const char*)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::TObject__sub_object(const char*, TObject*)
</UL>

<P><STRONG><a name="[311]"></a>TObject::addChild(TObject*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tobject.o(i._ZN7TObject8addChildEPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TObject::addChild(TObject*) &rArr; TList&lang;TObject*&rang;::append(TObject*) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::findRef(TObject*, bool)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::TList()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::append(TObject*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::TObject__sub_object(const char*, TObject*)
</UL>

<P><STRONG><a name="[2b1]"></a>TObject::callSlot(void(TObject::*)(long, long), long, long)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, tobject.o(i._ZN7TObject8callSlotEMS_FvllEll))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TObject::callSlot(void(TObject::*)(long, long), long, long) &rArr; TConnectList::find(void(TObject::*)(long, long))
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnectList::find(void(TObject::*)(long, long))
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnectList::at(unsigned long)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection::active(long, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_release(long, long)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_depress(long, long)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_release(long, long)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_depress(long, long)
</UL>

<P><STRONG><a name="[314]"></a>TObject::TObject__sub_object(const char*, TObject*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tobject.o(i._ZN7TObjectC2EPKcPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TObject::TObject__sub_object(const char*, TObject*) &rArr; TObject::setName(const char*) &rArr; TString::setStr(const char*) &rArr; TString::resize(unsigned long) &rArr; TArray::resize(unsigned long) &rArr; TArray::duplicate(const char*, unsigned long) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::addChild(TObject*)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::setName(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::TWidget__sub_object(long, long, long, long, const char*, TWidget*, bool)
</UL>

<P><STRONG><a name="[12e]"></a>TObject::~TObject__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tobject.o(i._ZN7TObjectD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TObject::~TObject__deallocating() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::~TObject__sub_object()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tobject.o(.constdata__ZTV7TObject)
</UL>
<P><STRONG><a name="[40c]"></a>TObject::~TObject()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, tobject.o(i._ZN7TObjectD2Ev), UNUSED)

<P><STRONG><a name="[12d]"></a>TObject::~TObject__sub_object()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tobject.o(i._ZN7TObjectD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::remove(TObject*)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::remove(TConnection*)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::last()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::destroyChild(TObject*)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection::~TConnection()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::~TWidget__sub_object()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::~TObject__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tobject.o(.constdata__ZTV7TObject)
</UL>
<P><STRONG><a name="[317]"></a>TString::resize(unsigned long)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tstring.o(i._ZN7TString6resizeEm))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TString::resize(unsigned long) &rArr; TArray::resize(unsigned long) &rArr; TArray::duplicate(const char*, unsigned long) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::resize(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::setStr(const char*)
</UL>

<P><STRONG><a name="[30f]"></a>TString::setStr(const char*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tstring.o(i._ZN7TString6setStrEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TString::setStr(const char*) &rArr; TString::resize(unsigned long) &rArr; TArray::resize(unsigned long) &rArr; TArray::duplicate(const char*, unsigned long) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::resize(unsigned long)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::store(const char*, unsigned long)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::setName(const char*)
</UL>

<P><STRONG><a name="[310]"></a>TString::TString(const char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tstring.o(i._ZN7TStringC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TString::TString(const char*) &rArr; TArray::duplicate(const char*, unsigned long) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::TArray()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::duplicate(const char*, unsigned long)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::setName(const char*)
</UL>

<P><STRONG><a name="[40d]"></a>TString::TString__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, tstring.o(i._ZN7TStringC1EPKc), UNUSED)

<P><STRONG><a name="[130]"></a>TString::~TString__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tstring.o(i._ZN7TStringD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TString::~TString__deallocating() &rArr; TString::~TString() &rArr; TArray::~TArray() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::~TString()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tstring.o(.constdata__ZTV7TString)
</UL>
<P><STRONG><a name="[12f]"></a>TString::~TString()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tstring.o(i._ZN7TStringD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TString::~TString() &rArr; TArray::~TArray() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::~TArray()
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::~TString__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tstring.o(.constdata__ZTV7TString)
</UL>
<P><STRONG><a name="[40e]"></a>TString::~TString__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tstring.o(i._ZN7TStringD1Ev), UNUSED)

<P><STRONG><a name="[2fe]"></a>TWidget::chgInValid(TRect*, TRect*)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, twidget.o(i._ZN7TWidget10chgInValidEP5TRectS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TWidget::chgInValid(TRect*, TRect*) &rArr; TWidget::chgAllInValid(TObjList*, TWidget*, TRect*, TRect*) &rArr;  TWidget::chgAllInValid(TObjList*, TWidget*, TRect*, TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::unlink(TObject*)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::relink(tLNode&lang;TObject*&rang;*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::addAchgInvalid(TWidget*, TRect*, TRect*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgAllInValid(TObjList*, TWidget*, TRect*, TRect*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::TDialog(long, long, TImage*, const char*, TWidget*, unsigned short)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchPressEvent(TTouchEvent*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchMoveEvent(TTouchEvent*)
</UL>

<P><STRONG><a name="[133]"></a>TWidget::closeEvent(TCloseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget10closeEventEP11TCloseEvent))
<BR>[Address Reference Count : 2]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
</UL>
<P><STRONG><a name="[124]"></a>TWidget::enterEvent(TEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget10enterEventEP6TEvent))
<BR>[Address Reference Count : 6]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[125]"></a>TWidget::leaveEvent(TEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget10leaveEventEP6TEvent))
<BR>[Address Reference Count : 6]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[126]"></a>TWidget::painTEvent(TPainTEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget10painTEventEP11TPainTEvent))
<BR>[Address Reference Count : 6]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[31a]"></a>TWidget::remInvalid(TWidget*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget10remInvalidEPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TWidget::remInvalid(TWidget*) &rArr; TList&lang;TWidget*&rang;::remove(TWidget*) &rArr; TList&lang;TWidget*&rang;::find(TWidget*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::remove(TWidget*)
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgAllInValid(TObjList*, TWidget*, TRect*, TRect*)
</UL>

<P><STRONG><a name="[2fc]"></a>TWidget::chgChildsXY(TWidget*)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, twidget.o(i._ZN7TWidget11chgChildsXYEPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = TWidget::chgChildsXY(TWidget*) &rArr;  TWidget::chgChildsXY(TWidget*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgChildsXY(TWidget*)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::moveTopLeft(long, long)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::first()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::next()
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgChildsXY(TWidget*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchMoveEvent(TTouchEvent*)
</UL>

<P><STRONG><a name="[a3]"></a>TWidget::eventFilter(TEvent*)</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget11eventFilterEP6TEvent))
<BR>[Address Reference Count : 15]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tdialog.o(.constdata__ZTV7TDialog)
<LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tlabel.o(.constdata__ZTV6TLabel)
<LI> tpushbutton.o(.constdata__ZTV11TPushButton)
<LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> ticonbutton.o(.constdata__ZTV11TIconButton)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
<LI> usercalculate.o(.constdata__ZTV13UserCalculate)
<LI> usercalendar.o(.constdata__ZTV12UserCalendar)
<LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[128]"></a>TWidget::resizeEvent(TResizeEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget11resizeEventEP12TResizeEvent))
<BR>[Address Reference Count : 6]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[122]"></a>TWidget::focusInEvent(TFocusEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget12focusInEventEP11TFocusEvent))
<BR>[Address Reference Count : 6]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[2d9]"></a>TWidget::isInRealArea(long, long)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, twidget.o(i._ZN7TWidget12isInRealAreaEll))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TWidget::isInRealArea(long, long) &rArr; TWidget::isInArea(long, long)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::first()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::next()
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::isInArea(long, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAbstractButton::touchReleaseEvent(TTouchEvent*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAbstractButton::touchPressEvent(TTouchEvent*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAbstractButton::touchMoveEvent(TTouchEvent*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchPressEvent(TTouchEvent*)
</UL>

<P><STRONG><a name="[319]"></a>TWidget::chgAllInValid(TObjList*, TWidget*, TRect*, TRect*)</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, twidget.o(i._ZN7TWidget13chgAllInValidEP8TObjListPS_P5TRectS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + In Cycle
<LI>Call Chain = TWidget::chgAllInValid(TObjList*, TWidget*, TRect*, TRect*) &rArr;  TWidget::chgAllInValid(TObjList*, TWidget*, TRect*, TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::first()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::next()
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::remInvalid(TWidget*)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::intersects(const TRect&) const
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::addAchgInvalid(TWidget*, TRect*, TRect*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgAllInValid(TObjList*, TWidget*, TRect*, TRect*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgInValid(TRect*, TRect*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgAllInValid(TObjList*, TWidget*, TRect*, TRect*)
</UL>

<P><STRONG><a name="[123]"></a>TWidget::focusOuTEvent(TFocusEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget13focusOuTEventEP11TFocusEvent))
<BR>[Address Reference Count : 6]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[120]"></a>TWidget::keyPressEvent(TKeyEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget13keyPressEventEP9TKeyEvent))
<BR>[Address Reference Count : 6]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[318]"></a>TWidget::addAchgInvalid(TWidget*, TRect*, TRect*)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, twidget.o(i._ZN7TWidget14addAchgInvalidEPS_P5TRectS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TWidget::addAchgInvalid(TWidget*, TRect*, TRect*) &rArr; TWidget::repaintInvaild(TRect*, TRect*) &rArr; TWidget::rectCut(TRect*) &rArr;  TWidget::rectCut(TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::TList()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::findRef(TWidget*, bool)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::append(TWidget*)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::repaintInvaild(TRect*, TRect*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgInValid(TRect*, TRect*)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgPareInValid()
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgAllInValid(TObjList*, TWidget*, TRect*, TRect*)
</UL>

<P><STRONG><a name="[31e]"></a>TWidget::chgPareInValid()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget14chgPareInValidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TWidget::chgPareInValid() &rArr; TWidget::addAchgInvalid(TWidget*, TRect*, TRect*) &rArr; TWidget::repaintInvaild(TRect*, TRect*) &rArr; TWidget::rectCut(TRect*) &rArr;  TWidget::rectCut(TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::addAchgInvalid(TWidget*, TRect*, TRect*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::TWidget__sub_object(long, long, long, long, const char*, TWidget*, bool)
</UL>

<P><STRONG><a name="[11f]"></a>TWidget::mouseMoveEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget14mouseMoveEventEP11TMouseEvent))
<BR>[Address Reference Count : 6]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[31d]"></a>TWidget::repaintInvaild(TRect*, TRect*)</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, twidget.o(i._ZN7TWidget14repaintInvaildEP5TRectS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TWidget::repaintInvaild(TRect*, TRect*) &rArr; TWidget::rectCut(TRect*) &rArr;  TWidget::rectCut(TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::TRect()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::isValid() const
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::rectCut(TRect*)
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::addAchgInvalid(TWidget*, TRect*, TRect*)
</UL>

<P><STRONG><a name="[11a]"></a>TWidget::touchMoveEvent(TTouchEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget14touchMoveEventEP11TTouchEvent))
<BR>[Address Reference Count : 6]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[121]"></a>TWidget::keyReleaseEvent(TKeyEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget15keyReleaseEventEP9TKeyEvent))
<BR>[Address Reference Count : 6]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[11e]"></a>TWidget::mouseClickEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget15mouseClickEventEP11TMouseEvent))
<BR>[Address Reference Count : 6]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[11b]"></a>TWidget::mousePressEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget15mousePressEventEP11TMouseEvent))
<BR>[Address Reference Count : 6]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[119]"></a>TWidget::touchClickEvent(TTouchEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget15touchClickEventEP11TTouchEvent))
<BR>[Address Reference Count : 6]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[117]"></a>TWidget::touchPressEvent(TTouchEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget15touchPressEventEP11TTouchEvent))
<BR>[Address Reference Count : 6]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[2a9]"></a>TWidget::imgLoadInterface(long, long, TImage*, TRect*, unsigned char)</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, twidget.o(i._ZN7TWidget16imgLoadInterfaceEllP6TImageP5TRecth))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TWidget::imgLoadInterface(long, long, TImage*, TRect*, unsigned char) &rArr; TImage::imgLoad(unsigned char*, TSize*, unsigned char*, TSize*, TRect*) &rArr; gui_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::width()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::imgLoad(unsigned char*, TSize*, unsigned char*, TSize*, TRect*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::release()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_release(long, long)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_depress(long, long)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::TLabel(long, long, TImage*, const char*, unsigned char, TWidget*)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::TDialog(long, long, TImage*, const char*, TWidget*, unsigned short)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchMoveEvent(TTouchEvent*)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, unsigned char, const char*, TWidget*)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, const char*, TWidget*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::TIconButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::release()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_release(long, long)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_depress(long, long)
</UL>

<P><STRONG><a name="[11c]"></a>TWidget::mouseReleaseEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget17mouseReleaseEventEP11TMouseEvent))
<BR>[Address Reference Count : 6]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[118]"></a>TWidget::touchReleaseEvent(TTouchEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget17touchReleaseEventEP11TTouchEvent))
<BR>[Address Reference Count : 6]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[2ab]"></a>TWidget::getPareBufCorreAddr()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tlabel.o(i._ZN7TWidget19getPareBufCorreAddrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TWidget::getPareBufCorreAddr()
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::width()
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::TLabel(long, long, long, long, const char*, TWidget*, unsigned char, bool, unsigned long, unsigned long)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::TIconButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::release()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_release(long, long)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_depress(long, long)
</UL>

<P><STRONG><a name="[11d]"></a>TWidget::mouseDoubleClickEvent(TMouseEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget21mouseDoubleClickEventEP11TMouseEvent))
<BR>[Address Reference Count : 6]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[2aa]"></a>TWidget::width()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcheckbox.o(i._ZN7TWidget5widthEv))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::imgLoadInterface(long, long, TImage*, TRect*, unsigned char)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::release()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_release(long, long)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_depress(long, long)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::getPareBufCorreAddr()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::TLabel(long, long, long, long, const char*, TWidget*, unsigned char, bool, unsigned long, unsigned long)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::TDialog(long, long, TImage*, const char*, TWidget*, unsigned short)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::restRect(long, long, long, long, TRect&, TRect&)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchPressEvent(TTouchEvent*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchMoveEvent(TTouchEvent*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::TIconButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::release()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_release(long, long)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_depress(long, long)
</UL>

<P><STRONG><a name="[2b4]"></a>TWidget::height()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcheckbox.o(i._ZN7TWidget6heightEv))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::release()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_release(long, long)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_depress(long, long)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::restRect(long, long, long, long, TRect&, TRect&)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchMoveEvent(TTouchEvent*)
</UL>

<P><STRONG><a name="[321]"></a>TWidget::rectCut(TRect*)</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, twidget.o(i._ZN7TWidget7rectCutEP5TRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = TWidget::rectCut(TRect*) &rArr;  TWidget::rectCut(TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::first()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::next()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::TRect()
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::intersect(const TRect&) const
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBuffer::transform(long, long, TRect*)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::isValid() const
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::rectCut(TRect*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::rectCut(TRect*)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::repaintInvaild(TRect*, TRect*)
</UL>

<P><STRONG><a name="[2b0]"></a>TWidget::refresh()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget7refreshEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TWidget::refresh() &rArr; TWidget::rectCut(TRect*) &rArr;  TWidget::rectCut(TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::rectCut(TRect*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::release()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::show()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_release(long, long)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::sig_depress(long, long)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::show()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::show()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchPressEvent(TTouchEvent*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::show()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::release()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::show()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_release(long, long)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::sig_depress(long, long)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWindow::show()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalendar::show()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalculate::show()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserGame::show()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::show()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::show()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTime::show()
</UL>

<P><STRONG><a name="[2c2]"></a>TWidget::showAll(TWidget*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, twidget.o(i._ZN7TWidget7showAllEPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = TWidget::showAll(TWidget*) &rArr;  TWidget::showAll(TWidget*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::showAll(TWidget*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::first()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::next()
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::show()
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::showAll(TWidget*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchPressEvent(TTouchEvent*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchMoveEvent(TTouchEvent*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWindow::closeEvent(TCloseEvent*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::prevPhoto()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::nextPhoto()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::showAll()
</UL>

<P><STRONG><a name="[2f2]"></a>TWidget::showAll()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, desktop.o(i._ZN7TWidget7showAllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TWidget::showAll() &rArr; TWidget::showAll(TWidget*) &rArr;  TWidget::showAll(TWidget*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::showAll(TWidget*)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openTimer()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openSetup()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openDate()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openCalculate()
</UL>

<P><STRONG><a name="[31b]"></a>TWidget::isInArea(long, long)</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, twidget.o(i._ZN7TWidget8isInAreaEll))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TWidget::isInArea(long, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::isInRealArea(long, long)
</UL>

<P><STRONG><a name="[127]"></a>TWidget::moveEvent(TMoveEvent*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twidget.o(i._ZN7TWidget9moveEventEP10TMoveEvent))
<BR>[Address Reference Count : 6]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
<LI> timagebox.o(.constdata__ZTV9TImageBox)
<LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[2da]"></a>TWidget::TWidget__sub_object(long, long, long, long, const char*, TWidget*, bool)</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, twidget.o(i._ZN7TWidgetC2EllllPKcPS_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = TWidget::TWidget__sub_object(long, long, long, long, const char*, TWidget*, bool) &rArr; TObject::TObject__sub_object(const char*, TObject*) &rArr; TObject::setName(const char*) &rArr; TString::setStr(const char*) &rArr; TString::resize(unsigned long) &rArr; TArray::resize(unsigned long) &rArr; TArray::duplicate(const char*, unsigned long) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::setHeight(int)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::setWidth(int)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::TRect()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::TObject__sub_object(const char*, TObject*)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBuffer::TBuffer(unsigned long, unsigned long)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgPareInValid()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAbstractButton::TAbstractButton__sub_object(long, long, long, long, bool, const char*, TWidget*)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFrame::TFrame__sub_object(long, long, long, long, const char*, TWidget*)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::TDialog(long, long, TImage*, const char*, TWidget*, unsigned short)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, unsigned short, unsigned short, const char*, const char*, TWidget*, bool)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, unsigned char, const char*, TWidget*)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, const char*, TWidget*)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWindow::TWindow(const char*, TApplication*, const char*, TWidget*)
</UL>

<P><STRONG><a name="[132]"></a>TWidget::~TWidget__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, twidget.o(i._ZN7TWidgetD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TWidget::~TWidget__deallocating() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::~TWidget__sub_object()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
</UL>
<P><STRONG><a name="[40f]"></a>TWidget::~TWidget()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, twidget.o(i._ZN7TWidgetD2Ev), UNUSED)

<P><STRONG><a name="[131]"></a>TWidget::~TWidget__sub_object()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, twidget.o(i._ZN7TWidgetD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::remove(TWidget*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::~TObject__sub_object()
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBuffer::~TBuffer()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAbstractButton::~TAbstractButton__sub_object()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFrame::~TFrame__sub_object()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::~TDialog()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::~TWidget__deallocating()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::~TImageBox()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWindow::~TWindow()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> twidget.o(.constdata__ZTV7TWidget)
</UL>
<P><STRONG><a name="[129]"></a>TWindow::closeEvent(TCloseEvent*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, twindow.o(i._ZN7TWindow10closeEventEP11TCloseEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TWindow::closeEvent(TCloseEvent*) &rArr; TWidget::showAll(TWidget*) &rArr;  TWidget::showAll(TWidget*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::showAll(TWidget*)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> twindow.o(.constdata__ZTV7TWindow)
<LI> desktop.o(.constdata__ZTV7Desktop)
<LI> userphoto.o(.constdata__ZTV9UserPhoto)
<LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[323]"></a>TWindow::slot_close()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, twindow.o(i._ZN7TWindow10slot_closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TWindow::slot_close()
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::setSignal(TWidget*, long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserGame::closeGame()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::closePhoto()
</UL>

<P><STRONG><a name="[136]"></a>TWindow::show()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, twindow.o(i._ZN7TWindow4showEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TWindow::show() &rArr; TWidget::refresh() &rArr; TWidget::rectCut(TRect*) &rArr;  TWidget::rectCut(TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> twindow.o(.constdata__ZTV7TWindow)
</UL>
<P><STRONG><a name="[2f7]"></a>TWindow::TWindow(const char*, TApplication*, const char*, TWidget*)</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, twindow.o(i._ZN7TWindowC1EPKcP12TApplicationS1_P7TWidget))
<BR><BR>[Stack]<UL><LI>Max Depth = 1692<LI>Call Chain = TWindow::TWindow(const char*, TApplication*, const char*, TWidget*) &rArr; TImage::TImage(unsigned char*, unsigned short, unsigned short, const char*) &rArr; lodepng_decode32_file(unsigned char**, unsigned*, unsigned*, const char*) &rArr; lodepng_decode_file(unsigned char**, unsigned*, unsigned*, const char*, LodePNGColorType, unsigned) &rArr; lodepng_load_file(unsigned char**, unsigned*, const char*) &rArr; lodepng_buffer_file(unsigned char*, unsigned, const char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::TWidget__sub_object(long, long, long, long, const char*, TWidget*, bool)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::~TImage()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::TImage(unsigned char*, unsigned short, unsigned short, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::Desktop(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::UserPhoto(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserGame::UserGame(const char*, TApplication*, const char*, TWidget*)
</UL>

<P><STRONG><a name="[410]"></a>TWindow::TWindow__sub_object(const char*, TApplication*, const char*, TWidget*)</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, twindow.o(i._ZN7TWindowC1EPKcP12TApplicationS1_P7TWidget), UNUSED)

<P><STRONG><a name="[135]"></a>TWindow::~TWindow__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, twindow.o(i._ZN7TWindowD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TWindow::~TWindow__deallocating() &rArr; TWindow::~TWindow() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWindow::~TWindow()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> twindow.o(.constdata__ZTV7TWindow)
</UL>
<P><STRONG><a name="[134]"></a>TWindow::~TWindow()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, twindow.o(i._ZN7TWindowD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TWindow::~TWindow() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::~TWidget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::~Desktop()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWindow::~TWindow__deallocating()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserGame::~UserGame()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::~UserPhoto()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> twindow.o(.constdata__ZTV7TWindow)
</UL>
<P><STRONG><a name="[411]"></a>TWindow::~TWindow__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, twindow.o(i._ZN7TWindowD1Ev), UNUSED)

<P><STRONG><a name="[2e2]"></a>tShared::deref()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tarray.o(i._ZN7tShared5derefEv))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::~TArray()
</UL>

<P><STRONG><a name="[139]"></a>TObjList::compareItems(TObject*, TObject*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tconnection.o(i._ZN8TObjList12compareItemsEP7TObjectS1_))
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata__ZTV8TObjList)
</UL>
<P><STRONG><a name="[137]"></a>TObjList::clear()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tconnection.o(i._ZN8TObjList5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TObjList::clear() &rArr; TList&lang;TObject*&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::clear()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata__ZTV8TObjList)
</UL>
<P><STRONG><a name="[13a]"></a>TObjList::count()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tconnection.o(i._ZN8TObjList5countEv))
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata__ZTV8TObjList)
</UL>
<P><STRONG><a name="[2a3]"></a>TObjList::TObjList()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tconnection.o(i._ZN8TObjListC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TObjList::TObjList()
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::TList()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection::TConnection(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
</UL>

<P><STRONG><a name="[412]"></a>TObjList::TObjList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tconnection.o(i._ZN8TObjListC1Ev), UNUSED)

<P><STRONG><a name="[138]"></a>TObjList::~TObjList__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tconnection.o(i._ZN8TObjListD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TObjList::~TObjList__deallocating() &rArr; TList&lang;TObject*&rang;::~TList() &rArr; TList&lang;TObject*&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::~TList()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata__ZTV8TObjList)
</UL>
<P><STRONG><a name="[13d]"></a>UserGame::show()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usergame.o(i._ZN8UserGame4showEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UserGame::show() &rArr; TWidget::refresh() &rArr; TWidget::rectCut(TRect*) &rArr;  TWidget::rectCut(TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[9d]"></a>UserGame::closeGame()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usergame.o(i._ZN8UserGame9closeGameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserGame::closeGame() &rArr; TWindow::slot_close()
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWindow::slot_close()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usergame.o(.constdata)
</UL>
<P><STRONG><a name="[2f4]"></a>UserGame::UserGame(const char*, TApplication*, const char*, TWidget*)</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, usergame.o(i._ZN8UserGameC1EPKcP12TApplicationS1_P7TWidget))
<BR><BR>[Stack]<UL><LI>Max Depth = 1724<LI>Call Chain = UserGame::UserGame(const char*, TApplication*, const char*, TWidget*) &rArr; TWindow::TWindow(const char*, TApplication*, const char*, TWidget*) &rArr; TImage::TImage(unsigned char*, unsigned short, unsigned short, const char*) &rArr; lodepng_decode32_file(unsigned char**, unsigned*, unsigned*, const char*) &rArr; lodepng_decode_file(unsigned char**, unsigned*, unsigned*, const char*, LodePNGColorType, unsigned) &rArr; lodepng_load_file(unsigned char**, unsigned*, const char*) &rArr; lodepng_buffer_file(unsigned char*, unsigned, const char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::connect(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::TImage(const char*)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWindow::TWindow(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openGame()
</UL>

<P><STRONG><a name="[413]"></a>UserGame::UserGame__sub_object(const char*, TApplication*, const char*, TWidget*)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, usergame.o(i._ZN8UserGameC1EPKcP12TApplicationS1_P7TWidget), UNUSED)

<P><STRONG><a name="[13c]"></a>UserGame::~UserGame__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usergame.o(i._ZN8UserGameD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UserGame::~UserGame__deallocating() &rArr; UserGame::~UserGame() &rArr; TWindow::~TWindow() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserGame::~UserGame()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[13b]"></a>UserGame::~UserGame()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usergame.o(i._ZN8UserGameD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UserGame::~UserGame() &rArr; TWindow::~TWindow() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWindow::~TWindow()
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserGame::~UserGame__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usergame.o(.constdata__ZTV8UserGame)
</UL>
<P><STRONG><a name="[414]"></a>UserGame::~UserGame__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, usergame.o(i._ZN8UserGameD1Ev), UNUSED)

<P><STRONG><a name="[140]"></a>UserTime::show()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usertime.o(i._ZN8UserTime4showEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UserTime::show() &rArr; TWidget::refresh() &rArr; TWidget::rectCut(TRect*) &rArr;  TWidget::rectCut(TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[2f6]"></a>UserTime::UserTime(long, long, TImage*, const char*, TWidget*, int)</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, usertime.o(i._ZN8UserTimeC1EllP6TImagePKcP7TWidgeti))
<BR><BR>[Stack]<UL><LI>Max Depth = 1748<LI>Call Chain = UserTime::UserTime(long, long, TImage*, const char*, TWidget*, int) &rArr; TLabel::TLabel(long, long, long, long, const char*, TWidget*, unsigned char, bool, unsigned long, unsigned long) &rArr; TBufPainter::drawAlignText(long, long, const char*, unsigned char, unsigned long) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::TLabel(long, long, long, long, const char*, TWidget*, unsigned char, bool, unsigned long, unsigned long)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::TDialog(long, long, TImage*, const char*, TWidget*, unsigned short)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openTimer()
</UL>

<P><STRONG><a name="[415]"></a>UserTime::UserTime__sub_object(long, long, TImage*, const char*, TWidget*, int)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, usertime.o(i._ZN8UserTimeC1EllP6TImagePKcP7TWidgeti), UNUSED)

<P><STRONG><a name="[13f]"></a>UserTime::~UserTime__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usertime.o(i._ZN8UserTimeD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UserTime::~UserTime__deallocating() &rArr; UserTime::~UserTime() &rArr; TDialog::~TDialog() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTime::~UserTime()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[13e]"></a>UserTime::~UserTime()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usertime.o(i._ZN8UserTimeD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UserTime::~UserTime() &rArr; TDialog::~TDialog() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::~TDialog()
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTime::~UserTime__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usertime.o(.constdata__ZTV8UserTime)
</UL>
<P><STRONG><a name="[416]"></a>UserTime::~UserTime__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, usertime.o(i._ZN8UserTimeD1Ev), UNUSED)

<P><STRONG><a name="[30b]"></a>TFuncList::find(void(TObject::*)(long, long))</STRONG> (Thumb, 80 bytes, Stack size 44 bytes, tfunclist.o(i._ZN9TFuncList4findEM7TObjectFvllE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TFuncList::find(void(TObject::*)(long, long))
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::connect(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
</UL>

<P><STRONG><a name="[2a7]"></a>TFuncList::clear()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tfunclist.o(i._ZN9TFuncList5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TFuncList::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFuncList::~TFuncList()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection::~TConnection()
</UL>

<P><STRONG><a name="[2a4]"></a>TFuncList::append(void(TObject::*)(long, long))</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tfunclist.o(i._ZN9TFuncList6appendEM7TObjectFvllE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TFuncList::append(void(TObject::*)(long, long)) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tFuncNode::tFuncNode(void(TObject::*)(long, long))
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::connect(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection::TConnection(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
</UL>

<P><STRONG><a name="[2a0]"></a>TFuncList::locate(unsigned long)</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, tfunclist.o(i._ZN9TFuncList6locateEm))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TFuncList::locate(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection::active(long, long)
</UL>

<P><STRONG><a name="[2a2]"></a>TFuncList::TFuncList()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tfunclist.o(i._ZN9TFuncListC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection::TConnection(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
</UL>

<P><STRONG><a name="[417]"></a>TFuncList::TFuncList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tfunclist.o(i._ZN9TFuncListC1Ev), UNUSED)

<P><STRONG><a name="[2a8]"></a>TFuncList::~TFuncList()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tfunclist.o(i._ZN9TFuncListD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TFuncList::~TFuncList() &rArr; TFuncList::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFuncList::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection::~TConnection()
</UL>

<P><STRONG><a name="[418]"></a>TFuncList::~TFuncList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tfunclist.o(i._ZN9TFuncListD1Ev), UNUSED)

<P><STRONG><a name="[143]"></a>TImageBox::show()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timagebox.o(i._ZN9TImageBox4showEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TImageBox::show() &rArr; TWidget::refresh() &rArr; TWidget::rectCut(TRect*) &rArr;  TWidget::rectCut(TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timagebox.o(.constdata__ZTV9TImageBox)
</UL>
<P><STRONG><a name="[2d5]"></a>TImageBox::TImageBox(long, long, TImage*, const char*, TWidget*)</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, timagebox.o(i._ZN9TImageBoxC1EllP6TImagePKcP7TWidget))
<BR><BR>[Stack]<UL><LI>Max Depth = 1684<LI>Call Chain = TImageBox::TImageBox(long, long, TImage*, const char*, TWidget*) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::imgLoadInterface(long, long, TImage*, TRect*, unsigned char)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::~TBufPainter()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::TBufPainter(unsigned char*, TRect*)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::getName()
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::TWidget__sub_object(long, long, long, long, const char*, TWidget*, bool)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::~TImage()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::height() const
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::width() const
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalendar::UserCalendar(long, long, TImage*, const char*, TWidget*, int)
</UL>

<P><STRONG><a name="[419]"></a>TImageBox::TImageBox__sub_object(long, long, TImage*, const char*, TWidget*)</STRONG> (Thumb, 0 bytes, Stack size 72 bytes, timagebox.o(i._ZN9TImageBoxC1EllP6TImagePKcP7TWidget), UNUSED)

<P><STRONG><a name="[2f3]"></a>TImageBox::TImageBox(long, long, TImage*, unsigned char, const char*, TWidget*)</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, timagebox.o(i._ZN9TImageBoxC1EllP6TImagehPKcP7TWidget))
<BR><BR>[Stack]<UL><LI>Max Depth = 1684<LI>Call Chain = TImageBox::TImageBox(long, long, TImage*, unsigned char, const char*, TWidget*) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::imgLoadInterface(long, long, TImage*, TRect*, unsigned char)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::~TBufPainter()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::TBufPainter(unsigned char*, TRect*)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::getName()
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::TWidget__sub_object(long, long, long, long, const char*, TWidget*, bool)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::~TImage()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::height() const
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::width() const
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openTimer()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openSetup()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openPhoto()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openGame()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openDate()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openCalculate()
</UL>

<P><STRONG><a name="[41a]"></a>TImageBox::TImageBox__sub_object(long, long, TImage*, unsigned char, const char*, TWidget*)</STRONG> (Thumb, 0 bytes, Stack size 72 bytes, timagebox.o(i._ZN9TImageBoxC1EllP6TImagehPKcP7TWidget), UNUSED)

<P><STRONG><a name="[325]"></a>TImageBox::TImageBox(long, long, unsigned short, unsigned short, const char*, const char*, TWidget*, bool)</STRONG> (Thumb, 256 bytes, Stack size 112 bytes, timagebox.o(i._ZN9TImageBoxC1EllttPKcS1_P7TWidgetb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1740<LI>Call Chain = TImageBox::TImageBox(long, long, unsigned short, unsigned short, const char*, const char*, TWidget*, bool) &rArr; TImage::TImage(unsigned char*, unsigned short, unsigned short, const char*) &rArr; lodepng_decode32_file(unsigned char**, unsigned*, unsigned*, const char*) &rArr; lodepng_decode_file(unsigned char**, unsigned*, unsigned*, const char*, LodePNGColorType, unsigned) &rArr; lodepng_load_file(unsigned char**, unsigned*, const char*) &rArr; lodepng_buffer_file(unsigned char*, unsigned, const char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::~TBufPainter()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::TBufPainter(unsigned char*, TRect*)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::getName()
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::TWidget__sub_object(long, long, long, long, const char*, TWidget*, bool)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::~TImage()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::TImage(unsigned char*, unsigned short, unsigned short, const char*)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::height() const
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::prevPhoto()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::nextPhoto()
</UL>

<P><STRONG><a name="[41b]"></a>TImageBox::TImageBox__sub_object(long, long, unsigned short, unsigned short, const char*, const char*, TWidget*, bool)</STRONG> (Thumb, 0 bytes, Stack size 112 bytes, timagebox.o(i._ZN9TImageBoxC1EllttPKcS1_P7TWidgetb), UNUSED)

<P><STRONG><a name="[142]"></a>TImageBox::~TImageBox__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timagebox.o(i._ZN9TImageBoxD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TImageBox::~TImageBox__deallocating() &rArr; TImageBox::~TImageBox() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::~TImageBox()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timagebox.o(.constdata__ZTV9TImageBox)
</UL>
<P><STRONG><a name="[141]"></a>TImageBox::~TImageBox()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timagebox.o(i._ZN9TImageBoxD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TImageBox::~TImageBox() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::~TWidget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::~TImageBox__deallocating()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::prevPhoto()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::nextPhoto()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timagebox.o(.constdata__ZTV9TImageBox)
</UL>
<P><STRONG><a name="[41c]"></a>TImageBox::~TImageBox__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, timagebox.o(i._ZN9TImageBoxD1Ev), UNUSED)

<P><STRONG><a name="[9a]"></a>UserPhoto::closePhoto()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, userphoto.o(i._ZN9UserPhoto10closePhotoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserPhoto::closePhoto() &rArr; TWindow::slot_close()
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWindow::slot_close()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userphoto.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>UserPhoto::show()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, userphoto.o(i._ZN9UserPhoto4showEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UserPhoto::show() &rArr; TWidget::refresh() &rArr; TWidget::rectCut(TRect*) &rArr;  TWidget::rectCut(TRect*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::refresh()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userphoto.o(.constdata__ZTV9UserPhoto)
</UL>
<P><STRONG><a name="[326]"></a>UserPhoto::scanfile(const char*)</STRONG> (Thumb, 256 bytes, Stack size 576 bytes, userphoto.o(i._ZN9UserPhoto8scanfileEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2036 + In Cycle
<LI>Call Chain = UserPhoto::scanfile(const char*) &rArr;  UserPhoto::scanfile(const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::scanfile(const char*)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::scanfile(const char*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::UserPhoto(const char*, TApplication*, const char*, TWidget*)
</UL>

<P><STRONG><a name="[9c]"></a>UserPhoto::nextPhoto()</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, userphoto.o(i._ZN9UserPhoto9nextPhotoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1812<LI>Call Chain = UserPhoto::nextPhoto() &rArr; TImageBox::TImageBox(long, long, unsigned short, unsigned short, const char*, const char*, TWidget*, bool) &rArr; TImage::TImage(unsigned char*, unsigned short, unsigned short, const char*) &rArr; lodepng_decode32_file(unsigned char**, unsigned*, unsigned*, const char*) &rArr; lodepng_decode_file(unsigned char**, unsigned*, unsigned*, const char*, LodePNGColorType, unsigned) &rArr; lodepng_load_file(unsigned char**, unsigned*, const char*) &rArr; lodepng_buffer_file(unsigned char*, unsigned, const char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::showAll(TWidget*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::~TImageBox()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, unsigned short, unsigned short, const char*, const char*, TWidget*, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userphoto.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>UserPhoto::prevPhoto()</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, userphoto.o(i._ZN9UserPhoto9prevPhotoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1812<LI>Call Chain = UserPhoto::prevPhoto() &rArr; TImageBox::TImageBox(long, long, unsigned short, unsigned short, const char*, const char*, TWidget*, bool) &rArr; TImage::TImage(unsigned char*, unsigned short, unsigned short, const char*) &rArr; lodepng_decode32_file(unsigned char**, unsigned*, unsigned*, const char*) &rArr; lodepng_decode_file(unsigned char**, unsigned*, unsigned*, const char*, LodePNGColorType, unsigned) &rArr; lodepng_load_file(unsigned char**, unsigned*, const char*) &rArr; lodepng_buffer_file(unsigned char*, unsigned, const char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::showAll(TWidget*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::~TImageBox()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, unsigned short, unsigned short, const char*, const char*, TWidget*, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userphoto.o(.constdata)
</UL>
<P><STRONG><a name="[2f5]"></a>UserPhoto::UserPhoto(const char*, TApplication*, const char*, TWidget*)</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, userphoto.o(i._ZN9UserPhotoC1EPKcP12TApplicationS1_P7TWidget))
<BR><BR>[Stack]<UL><LI>Max Depth = 2092<LI>Call Chain = UserPhoto::UserPhoto(const char*, TApplication*, const char*, TWidget*) &rArr; UserPhoto::scanfile(const char*) &rArr;  UserPhoto::scanfile(const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::TPushButton(long, long, TImage*, TImage*, const char*, TWidget*)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::TLabel(long, long, long, long, const char*, TWidget*, unsigned char, bool, unsigned long, unsigned long)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::connect(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::TImage(const char*)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWindow::TWindow(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::scanfile(const char*)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openPhoto()
</UL>

<P><STRONG><a name="[41d]"></a>UserPhoto::UserPhoto__sub_object(const char*, TApplication*, const char*, TWidget*)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, userphoto.o(i._ZN9UserPhotoC1EPKcP12TApplicationS1_P7TWidget), UNUSED)

<P><STRONG><a name="[145]"></a>UserPhoto::~UserPhoto__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, userphoto.o(i._ZN9UserPhotoD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UserPhoto::~UserPhoto__deallocating() &rArr; UserPhoto::~UserPhoto() &rArr; TWindow::~TWindow() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::~UserPhoto()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userphoto.o(.constdata__ZTV9UserPhoto)
</UL>
<P><STRONG><a name="[144]"></a>UserPhoto::~UserPhoto()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, userphoto.o(i._ZN9UserPhotoD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UserPhoto::~UserPhoto() &rArr; TWindow::~TWindow() &rArr; TWidget::~TWidget__sub_object() &rArr; TObject::~TObject__sub_object() &rArr; TObject::destroyChild(TObject*) &rArr; TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWindow::~TWindow()
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::~UserPhoto__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userphoto.o(.constdata__ZTV9UserPhoto)
</UL>
<P><STRONG><a name="[41e]"></a>UserPhoto::~UserPhoto__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, userphoto.o(i._ZN9UserPhotoD1Ev), UNUSED)

<P><STRONG><a name="[324]"></a>tFuncNode::tFuncNode(void(TObject::*)(long, long))</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tfunclist.o(i._ZN9tFuncNodeC1EM7TObjectFvllE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tFuncNode::tFuncNode(void(TObject::*)(long, long))
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFuncList::append(void(TObject::*)(long, long))
</UL>

<P><STRONG><a name="[41f]"></a>tFuncNode::tFuncNode__sub_object(void(TObject::*)(long, long))</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, tfunclist.o(i._ZN9tFuncNodeC1EM7TObjectFvllE), UNUSED)

<P><STRONG><a name="[31c]"></a>TRect::intersects(const TRect&) const</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, trect.o(i._ZNK5TRect10intersectsERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TRect::intersects(const TRect&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgAllInValid(TObjList*, TWidget*, TRect*, TRect*)
</UL>

<P><STRONG><a name="[293]"></a>TRect::width() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tbufpainter.o(i._ZNK5TRect5widthEv))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawAlignText(long, long, const char*, unsigned char, unsigned long)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, unsigned short, unsigned short, const char*, const char*, TWidget*, bool)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, unsigned char, const char*, TWidget*)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, const char*, TWidget*)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::paintMeta(TRect*)
</UL>

<P><STRONG><a name="[294]"></a>TRect::height() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tbufpainter.o(i._ZNK5TRect6heightEv))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::drawAlignText(long, long, const char*, unsigned char, unsigned long)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, unsigned short, unsigned short, const char*, const char*, TWidget*, bool)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, unsigned char, const char*, TWidget*)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, const char*, TWidget*)
</UL>

<P><STRONG><a name="[31f]"></a>TRect::isValid() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, twidget.o(i._ZNK5TRect7isValidEv))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::rectCut(TRect*)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::repaintInvaild(TRect*, TRect*)
</UL>

<P><STRONG><a name="[322]"></a>TRect::intersect(const TRect&) const</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, trect.o(i._ZNK5TRect9intersectERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TRect::intersect(const TRect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRect::TRect()
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::rectCut(TRect*)
</UL>

<P><STRONG><a name="[30d]"></a>TString::operator const char*() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tstring.o(i._ZNK7TStringcvPKcEv))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::getName()
</UL>

<P><STRONG><a name="[2dd]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::~TArray()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::duplicate(const char*, unsigned long)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFont::~TFont()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()
</UL>

<P><STRONG><a name="[29d]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TString::~TString__deallocating()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFuncList::clear()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::~TArray()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::~TWidget__sub_object()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAbstractButton::~TAbstractButton__sub_object()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAbstractButton::~TAbstractButton__deallocating()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPushButton::~TPushButton__deallocating()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::~TLabel()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLabel::~TLabel__deallocating()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFrame::~TFrame__deallocating()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::remove(TWidget*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::~TDialog()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::~TDialog__deallocating()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidgetList::~TWidgetList__deallocating()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEvent::~TEvent__deallocating()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTouchEvent::~TTouchEvent()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTouchEvent::~TTouchEvent__deallocating()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCloseEvent::~TCloseEvent__deallocating()
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::remove(TObject*)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::~TList__deallocating()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::remove(TConnection*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::clear()
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCollection&lang;TConnection*&rang;::deleteItem(void*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::~TObject__deallocating()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnectList::~TConnectList__deallocating()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::~TList__deallocating()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::clear()
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCollection&lang;TObject*&rang;::deleteItem(void*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObjList::~TObjList__deallocating()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection::~TConnection()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::~TObject__sub_object()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::~TList__deallocating()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::clear()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCollection&lang;TWidget*&rang;::deleteItem(void*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::~TWidget__deallocating()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFont::~TFont__deallocating()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::~TImageBox__deallocating()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, unsigned char, const char*, TWidget*)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImageBox::TImageBox(long, long, TImage*, const char*, TWidget*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIconButton::~TIconButton__deallocating()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWindow::~TWindow__deallocating()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalendar::~UserCalendar__deallocating()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalculate::~UserCalculate__deallocating()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserGame::~UserGame__deallocating()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::~UserPhoto__deallocating()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::~Desktop__deallocating()
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTime::~UserTime__deallocating()
</UL>

<P><STRONG><a name="[2dc]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::duplicate(const char*, unsigned long)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::resize(unsigned long)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFont::TFont(const char*, unsigned short, unsigned short, unsigned char)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_rwcats_cpp_64e8068e
</UL>

<P><STRONG><a name="[29b]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::Desktop(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::TApplication(TDirver*)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFuncList::append(void(TObject::*)(long, long))
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::newData()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::TBufPainter(unsigned char*, TRect*)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::TWidget__sub_object(long, long, long, long, const char*, TWidget*, bool)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::translate()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::append(TConnection*)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::addChild(TObject*)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::setName(const char*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::connect(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::append(TObject*)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection::TConnection(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::append(TWidget*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::addAchgInvalid(TWidget*, TRect*, TRect*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::UserPhoto(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTime::UserTime(long, long, TImage*, const char*, TWidget*, int)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserGame::UserGame(const char*, TApplication*, const char*, TWidget*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalculate::UserCalculate(long, long, TImage*, const char*, TWidget*, int)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCalendar::UserCalendar(long, long, TImage*, const char*, TWidget*, int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openTimer()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openSetup()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openPhoto()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openGame()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openDate()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Desktop::openCalculate()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[32f]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[420]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[17e]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2_tgui(void*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIMEOUT_UserCallback
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TIMEOUT_UserCallback
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Read_Version
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Write
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Test
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Get_Info
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::translate()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEvent::peErrMsg()
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection::active(long, long)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::Decode()
</UL>

<P><STRONG><a name="[ea]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 4]<UL><LI> tabstractbutton.o(.constdata__ZTV15TAbstractButton)
<LI> tframe.o(.constdata__ZTV6TFrame)
<LI> tobject.o(.constdata__ZTV7TObject)
<LI> twidget.o(.constdata__ZTV7TWidget)
</UL>
<P><STRONG><a name="[15f]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::~TImage()
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBuffer::~TBuffer()
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[15a]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBuffer::TBuffer(unsigned long, unsigned long)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc(unsigned)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[421]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[422]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[423]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[33c]"></a>ai_draw_init</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, piclib.o(i.ai_draw_init))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode_buf
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_decode_buf
</UL>

<P><STRONG><a name="[2ef]"></a>ai_load_picfile</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, piclib.o(i.ai_load_picfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1580<LI>Call Chain = ai_load_picfile &rArr; stdbmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_filetype
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::TImage(unsigned char*, unsigned short, unsigned short, const char*)
</UL>

<P><STRONG><a name="[339]"></a>bmp_decode_buf</STRONG> (Thumb, 612 bytes, Stack size 72 bytes, bmp.o(i.bmp_decode_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1548<LI>Call Chain = bmp_decode_buf &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_element_ok
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_decode_file
</UL>

<P><STRONG><a name="[2ea]"></a>bmp_decode_file</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, piclib.o(i.bmp_decode_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 1572<LI>Call Chain = bmp_decode_file &rArr; bmp_decode_buf &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piclib_init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_decode_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::Decode()
</UL>

<P><STRONG><a name="[38c]"></a>c_upper</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, piclib.o(i.c_upper))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_filetype
</UL>

<P><STRONG><a name="[353]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[370]"></a>delay_ms</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, delay_conf.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
</UL>

<P><STRONG><a name="[34d]"></a>dir_sdi</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[35a]"></a>disk_initialize</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WAKEUP
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASHConfig
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[35c]"></a>disk_ioctl</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = disk_ioctl &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[35d]"></a>disk_read</STRONG> (Thumb, 152 bytes, Stack size 536 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + In Cycle
<LI>Call Chain = disk_read &rArr;  disk_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[35b]"></a>disk_status</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, diskio.o(i.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = disk_status &rArr; SPI_FLASH_ReadID &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[35e]"></a>disk_write</STRONG> (Thumb, 160 bytes, Stack size 536 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + In Cycle
<LI>Call Chain = disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[32b]"></a>f_chdir</STRONG> (Thumb, 90 bytes, Stack size 576 bytes, ff.o(i.f_chdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1428<LI>Call Chain = f_chdir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::scanfile(const char*)
</UL>

<P><STRONG><a name="[24b]"></a>f_close</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFont::getWordCode(unsigned char*)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode_buf
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_decode_buf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_buffer_file(unsigned char*, unsigned, const char*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_filesize(const char*)
</UL>

<P><STRONG><a name="[32d]"></a>f_closedir</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = f_closedir &rArr; validate &rArr; disk_status &rArr; SPI_FLASH_ReadID &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::scanfile(const char*)
</UL>

<P><STRONG><a name="[329]"></a>f_getcwd</STRONG> (Thumb, 290 bytes, Stack size 632 bytes, ff.o(i.f_getcwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1460<LI>Call Chain = f_getcwd &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::scanfile(const char*)
</UL>

<P><STRONG><a name="[24a]"></a>f_lseek</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFont::getWordCode(unsigned char*)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_in_func
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getdatablock
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_filesize(const char*)
</UL>

<P><STRONG><a name="[208]"></a>f_mount</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2_tgui(void*)
</UL>

<P><STRONG><a name="[249]"></a>f_open</STRONG> (Thumb, 352 bytes, Stack size 608 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1476<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFont::getWordCode(unsigned char*)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode_buf
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_decode_buf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_buffer_file(unsigned char*, unsigned, const char*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_filesize(const char*)
</UL>

<P><STRONG><a name="[327]"></a>f_opendir</STRONG> (Thumb, 116 bytes, Stack size 552 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1404<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::scanfile(const char*)
</UL>

<P><STRONG><a name="[26c]"></a>f_read</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFont::getWordCode(unsigned char*)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_in_func
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readextension
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readcolortbl
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getinfo
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getdatablock
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_dispimage
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_check_head
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_decode_buf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_buffer_file(unsigned char*, unsigned, const char*)
</UL>

<P><STRONG><a name="[32c]"></a>f_readdir</STRONG> (Thumb, 94 bytes, Stack size 544 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1372<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserPhoto::scanfile(const char*)
</UL>

<P><STRONG><a name="[362]"></a>f_sync</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[348]"></a>ff_convert</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, unicode.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[341]"></a>ff_wtoupper</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, unicode.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[83]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usart_conf.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[2ce]"></a>getState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tgui_conf.o(i.getState))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTouchDirver::obtainData()
</UL>

<P><STRONG><a name="[2d0]"></a>getTouchX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tgui_conf.o(i.getTouchX))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTouchDirver::obtainData()
</UL>

<P><STRONG><a name="[2d1]"></a>getTouchY</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tgui_conf.o(i.getTouchY))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTouchDirver::obtainData()
</UL>

<P><STRONG><a name="[343]"></a>get_fat</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[366]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[36c]"></a>gif_check_head</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gif.o(i.gif_check_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = gif_check_head &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
</UL>

<P><STRONG><a name="[376]"></a>gif_clear2bkcolor</STRONG> (Thumb, 320 bytes, Stack size 72 bytes, gif.o(i.gif_clear2bkcolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gif_clear2bkcolor
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
</UL>

<P><STRONG><a name="[338]"></a>gif_decode</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, gif.o(i.gif_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1516<LI>Call Chain = gif_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_recovergctbl
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getinfo
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_check_head
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
</UL>

<P><STRONG><a name="[371]"></a>gif_dispimage</STRONG> (Thumb, 430 bytes, Stack size 88 bytes, gif.o(i.gif_dispimage))
<BR><BR>[Stack]<UL><LI>Max Depth = 964<LI>Call Chain = gif_dispimage &rArr; gif_getnextbyte &rArr; gif_getnextcode &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_initlzw
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getnextbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
</UL>

<P><STRONG><a name="[36e]"></a>gif_drawimage</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, gif.o(i.gif_drawimage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028<LI>Call Chain = gif_drawimage &rArr; gif_dispimage &rArr; gif_getnextbyte &rArr; gif_getnextcode &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_savegctbl
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readextension
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readcolortbl
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_dispimage
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_clear2bkcolor
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
</UL>

<P><STRONG><a name="[378]"></a>gif_getdatablock</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gif.o(i.gif_getdatablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readextension
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getnextcode
</UL>

<P><STRONG><a name="[36d]"></a>gif_getinfo</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gif.o(i.gif_getinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = gif_getinfo &rArr; gif_readcolortbl &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readcolortbl
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
</UL>

<P><STRONG><a name="[373]"></a>gif_getnextbyte</STRONG> (Thumb, 590 bytes, Stack size 32 bytes, gif.o(i.gif_getnextbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 876<LI>Call Chain = gif_getnextbyte &rArr; gif_getnextcode &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getnextcode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_dispimage
</UL>

<P><STRONG><a name="[379]"></a>gif_getnextcode</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, gif.o(i.gif_getnextcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = gif_getnextcode &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getdatablock
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getnextbyte
</UL>

<P><STRONG><a name="[37a]"></a>gif_getrgb565</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gif.o(i.gif_getrgb565))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readcolortbl
</UL>

<P><STRONG><a name="[372]"></a>gif_initlzw</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, gif.o(i.gif_initlzw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gif_initlzw
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_dispimage
</UL>

<P><STRONG><a name="[375]"></a>gif_readcolortbl</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, gif.o(i.gif_readcolortbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = gif_readcolortbl &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getrgb565
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getinfo
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
</UL>

<P><STRONG><a name="[377]"></a>gif_readextension</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, gif.o(i.gif_readextension))
<BR><BR>[Stack]<UL><LI>Max Depth = 860<LI>Call Chain = gif_readextension &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getdatablock
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
</UL>

<P><STRONG><a name="[36f]"></a>gif_recovergctbl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gif.o(i.gif_recovergctbl))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
</UL>

<P><STRONG><a name="[374]"></a>gif_savegctbl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gif.o(i.gif_savegctbl))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
</UL>

<P><STRONG><a name="[18a]"></a>guiTouchDown</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tgui_conf.o(i.guiTouchDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = guiTouchDown
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Touch_Down
</UL>

<P><STRONG><a name="[18c]"></a>guiTouchUp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tgui_conf.o(i.guiTouchUp))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Touch_Up
</UL>

<P><STRONG><a name="[2ec]"></a>gui_memcpy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tgui_conf.o(i.gui_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gui_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBuffer::obPareBack(unsigned char*, unsigned long, long, long, unsigned short, unsigned short)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBuffer::transform(long, long, TRect*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::imgLoad(unsigned char*, TSize*, unsigned char*, TSize*, TRect*)
</UL>

<P><STRONG><a name="[299]"></a>gui_set_rect</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, tgui_conf.o(i.gui_set_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gui_set_rect &rArr; DMA2D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_StartTransfer
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Init
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_GetFlagStatus
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TBufPainter::paintMeta(TRect*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piclib_fill_colors
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piclib_fill_color
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piclib_draw_point
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piclib_draw_hline
</UL>

<P><STRONG><a name="[33d]"></a>is_element_ok</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, piclib.o(i.is_element_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_element_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_out_func_point
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_decode_buf
</UL>

<P><STRONG><a name="[37f]"></a>jd_decomp</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, tjpgd.o(i.jd_decomp))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = jd_decomp &rArr; mcu_load &rArr; huffext
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_output
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode_buf
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
</UL>

<P><STRONG><a name="[383]"></a>jd_prepare</STRONG> (Thumb, 730 bytes, Stack size 32 bytes, tjpgd.o(i.jd_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = jd_prepare &rArr; create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_qt_tbl
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode_buf
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
</UL>

<P><STRONG><a name="[384]"></a>jpeg_freeall</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tjpgd.o(i.jpeg_freeall))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jpeg_freeall &rArr; pic_memfree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode_buf
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
</UL>

<P><STRONG><a name="[85]"></a>jpeg_in_func</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tjpgd.o(i.jpeg_in_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = jpeg_in_func &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tjpgd.o(i.jpg_decode)
<LI> tjpgd.o(i.jpg_decode_buf)
</UL>
<P><STRONG><a name="[385]"></a>jpeg_mallocall</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tjpgd.o(i.jpeg_mallocall))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = jpeg_mallocall &rArr; pic_memalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode_buf
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
</UL>

<P><STRONG><a name="[87]"></a>jpeg_out_func_fill</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tjpgd.o(i.jpeg_out_func_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_out_func_fill
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tjpgd.o(i.jpg_decode)
<LI> tjpgd.o(i.jpg_decode_buf)
</UL>
<P><STRONG><a name="[86]"></a>jpeg_out_func_point</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, tjpgd.o(i.jpeg_out_func_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = jpeg_out_func_point &rArr; is_element_ok
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_element_ok
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tjpgd.o(i.jpg_decode)
<LI> tjpgd.o(i.jpg_decode_buf)
</UL>
<P><STRONG><a name="[336]"></a>jpg_decode</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, tjpgd.o(i.jpg_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1508<LI>Call Chain = jpg_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mallocall
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_freeall
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
</UL>

<P><STRONG><a name="[386]"></a>jpg_decode_buf</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, tjpgd.o(i.jpg_decode_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1508<LI>Call Chain = jpg_decode_buf &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mallocall
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_freeall
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode_file
</UL>

<P><STRONG><a name="[2e9]"></a>jpg_decode_file</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, piclib.o(i.jpg_decode_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 1532<LI>Call Chain = jpg_decode_file &rArr; jpg_decode_buf &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piclib_init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::Decode()
</UL>

<P><STRONG><a name="[7d]"></a>main</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; LCD_Init &rArr; SDRAMConfig &rArr; SDRAM_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_close()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1Config
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RED_Config
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GREEN_Config
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_BLUE_Config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_set_rect
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Basic_Config
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[335]"></a>ob_filetype</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, piclib.o(i.ob_filetype))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ob_filetype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_upper
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
</UL>

<P><STRONG><a name="[33a]"></a>pic_memalloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, piclib.o(i.pic_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pic_memalloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mallocall
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode_buf
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_decode_buf
</UL>

<P><STRONG><a name="[33b]"></a>pic_memfree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, piclib.o(i.pic_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pic_memfree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_freeall
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_decode_buf
</UL>

<P><STRONG><a name="[8e]"></a>piclib_draw_hline</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, piclib.o(i.piclib_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = piclib_draw_hline &rArr; gui_set_rect &rArr; DMA2D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_set_rect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> piclib.o(i.piclib_init)
</UL>
<P><STRONG><a name="[8c]"></a>piclib_draw_point</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, piclib.o(i.piclib_draw_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = piclib_draw_point &rArr; gui_set_rect &rArr; DMA2D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_set_rect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> piclib.o(i.piclib_init)
</UL>
<P><STRONG><a name="[8d]"></a>piclib_fill_color</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, piclib.o(i.piclib_fill_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = piclib_fill_color &rArr; gui_set_rect &rArr; DMA2D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_set_rect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> piclib.o(i.piclib_init)
</UL>
<P><STRONG><a name="[8f]"></a>piclib_fill_colors</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, piclib.o(i.piclib_fill_colors))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = piclib_fill_colors &rArr; gui_set_rect &rArr; DMA2D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_set_rect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> piclib.o(i.piclib_init)
</UL>
<P><STRONG><a name="[2ee]"></a>piclib_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, piclib.o(i.piclib_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = piclib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode_file
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_decode_file
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TImage::TImage(unsigned char*, unsigned short, unsigned short, const char*)
</UL>

<P><STRONG><a name="[8b]"></a>piclib_read_point</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, piclib.o(i.piclib_read_point))
<BR>[Address Reference Count : 1]<UL><LI> piclib.o(i.piclib_init)
</UL>
<P><STRONG><a name="[344]"></a>put_fat</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[3b6]"></a>pvPortMalloc</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[3c4]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[3a5]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[244]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TArray::resize(unsigned long)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc(void*, unsigned)
</UL>

<P><STRONG><a name="[337]"></a>stdbmp_decode</STRONG> (Thumb, 558 bytes, Stack size 72 bytes, bmp.o(i.stdbmp_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1548<LI>Call Chain = stdbmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_element_ok
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
</UL>

<P><STRONG><a name="[38e]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[396]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[3a4]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[390]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[38f]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[392]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[394]"></a>vPortExitCritical</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[3a0]"></a>vPortFree</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[3c0]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[3b9]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[398]"></a>vQueueAddToRegistry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[3af]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[3b5]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[3bc]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[3bb]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[3bd]"></a>vTaskPriorityInherit</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[3c5]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[388]"></a>vTaskStartScheduler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39a]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[150]"></a>vTaskSwitchContext</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[3bf]"></a>xPortStartScheduler</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[397]"></a>xQueueGenericCreate</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[3ad]"></a>xQueueGenericReceive</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[3a2]"></a>xQueueGenericReset</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[3c7]"></a>xQueueGenericSend</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[3c8]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[3c6]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[387]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[3c3]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[3b0]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[1f5]"></a>xTaskIncrementTick</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[39f]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[3b4]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[39b]"></a>xTaskResumeAll</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[3be]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[3aa]"></a>xTimerGenericCommand</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[3ca]"></a>tCollection&lang;TConnection*&rang;::deleteItem(void*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tobject.o(t._ZN11tCollectionIP11TConnectionE10deleteItemEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tCollection&lang;TConnection*&rang;::deleteItem(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::deleteItem(void*)
</UL>

<P><STRONG><a name="[3cb]"></a>tCollection&lang;TObject*&rang;::deleteItem(void*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tconnection.o(t._ZN11tCollectionIP7TObjectE10deleteItemEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tCollection&lang;TObject*&rang;::deleteItem(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::deleteItem(void*)
</UL>

<P><STRONG><a name="[3cc]"></a>tCollection&lang;TWidget*&rang;::deleteItem(void*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, twidget.o(t._ZN11tCollectionIP7TWidgetE10deleteItemEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tCollection&lang;TWidget*&rang;::deleteItem(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::deleteItem(void*)
</UL>

<P><STRONG><a name="[84]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwcats.o(i.__sti___10_rwcats_cpp_64e8068e)
</UL>
<P><STRONG><a name="[424]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev), UNUSED)

<P><STRONG><a name="[c9]"></a>TList&lang;TConnection*&rang;::deleteItem(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tobject.o(t._ZN5TListIP11TConnectionE10deleteItemEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TList&lang;TConnection*&rang;::deleteItem(void*) &rArr; tCollection&lang;TConnection*&rang;::deleteItem(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCollection&lang;TConnection*&rang;::deleteItem(void*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tobject.o(.constdata__ZTV5TListIP11TConnectionE)
<LI> tobject.o(.constdata__ZTV12TConnectList)
</UL>
<P><STRONG><a name="[ca]"></a>TList&lang;TConnection*&rang;::compareItems(TConnection*, TConnection*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tobject.o(t._ZN5TListIP11TConnectionE12compareItemsES1_S1_))
<BR>[Address Reference Count : 2]<UL><LI> tobject.o(.constdata__ZTV5TListIP11TConnectionE)
<LI> tobject.o(.constdata__ZTV12TConnectList)
</UL>
<P><STRONG><a name="[3cd]"></a>TList&lang;TConnection*&rang;::find(TConnection*, bool)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tobject.o(t._ZN5TListIP11TConnectionE4findES1_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TList&lang;TConnection*&rang;::find(TConnection*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::remove(TConnection*)
</UL>

<P><STRONG><a name="[315]"></a>TList&lang;TConnection*&rang;::last()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tobject.o(t._ZN5TListIP11TConnectionE4lastEv))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::~TObject__sub_object()
</UL>

<P><STRONG><a name="[2cd]"></a>TList&lang;TConnection*&rang;::next()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tconnectlist.o(t._ZN5TListIP11TConnectionE4nextEv))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnectList::find(void(TObject::*)(long, long))
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::~TList()
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::unlink()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::clear()
</UL>

<P><STRONG><a name="[ed]"></a>TList&lang;TConnection*&rang;::clear()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tobject.o(t._ZN5TListIP11TConnectionE5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TList&lang;TConnection*&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::first()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::next()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::~TList()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tobject.o(.constdata__ZTV5TListIP11TConnectionE)
</UL>
<P><STRONG><a name="[2cc]"></a>TList&lang;TConnection*&rang;::first()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tconnectlist.o(t._ZN5TListIP11TConnectionE5firstEv))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnectList::find(void(TObject::*)(long, long))
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::~TList()
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::unlink()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::clear()
</UL>

<P><STRONG><a name="[30c]"></a>TList&lang;TConnection*&rang;::append(TConnection*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tobject.o(t._ZN5TListIP11TConnectionE6appendES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TList&lang;TConnection*&rang;::append(TConnection*) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::connect(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
</UL>

<P><STRONG><a name="[2ca]"></a>TList&lang;TConnection*&rang;::locate(unsigned long)</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, tobject.o(t._ZN5TListIP11TConnectionE6locateEm))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TList&lang;TConnection*&rang;::locate(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnectList::at(unsigned long)
</UL>

<P><STRONG><a name="[316]"></a>TList&lang;TConnection*&rang;::remove(TConnection*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tobject.o(t._ZN5TListIP11TConnectionE6removeES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TList&lang;TConnection*&rang;::remove(TConnection*) &rArr; TList&lang;TConnection*&rang;::find(TConnection*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::unlink()
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::find(TConnection*, bool)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::~TObject__sub_object()
</UL>

<P><STRONG><a name="[3ce]"></a>TList&lang;TConnection*&rang;::unlink()</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tobject.o(t._ZN5TListIP11TConnectionE6unlinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TList&lang;TConnection*&rang;::unlink()
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::first()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::next()
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::remove(TConnection*)
</UL>

<P><STRONG><a name="[30a]"></a>TList&lang;TConnection*&rang;::TList()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tobject.o(t._ZN5TListIP11TConnectionEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::connect(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
</UL>

<P><STRONG><a name="[425]"></a>TList&lang;TConnection*&rang;::TList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tobject.o(t._ZN5TListIP11TConnectionEC1Ev), UNUSED)

<P><STRONG><a name="[ef]"></a>TList&lang;TConnection*&rang;::~TList__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tobject.o(t._ZN5TListIP11TConnectionED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TList&lang;TConnection*&rang;::~TList__deallocating() &rArr; TList&lang;TConnection*&rang;::~TList() &rArr; TList&lang;TConnection*&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::~TList()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tobject.o(.constdata__ZTV5TListIP11TConnectionE)
</UL>
<P><STRONG><a name="[ee]"></a>TList&lang;TConnection*&rang;::~TList()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tobject.o(t._ZN5TListIP11TConnectionED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TList&lang;TConnection*&rang;::~TList() &rArr; TList&lang;TConnection*&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::first()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::next()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TConnection*&rang;::~TList__deallocating()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnectList::~TConnectList__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tobject.o(.constdata__ZTV5TListIP11TConnectionE)
</UL>
<P><STRONG><a name="[426]"></a>TList&lang;TConnection*&rang;::~TList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, tobject.o(t._ZN5TListIP11TConnectionED1Ev), UNUSED)

<P><STRONG><a name="[f3]"></a>TList&lang;TObject*&rang;::deleteItem(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tconnection.o(t._ZN5TListIP7TObjectE10deleteItemEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TList&lang;TObject*&rang;::deleteItem(void*) &rArr; tCollection&lang;TObject*&rang;::deleteItem(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCollection&lang;TObject*&rang;::deleteItem(void*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tconnection.o(.constdata__ZTV5TListIP7TObjectE)
<LI> tconnection.o(.constdata__ZTV8TObjList)
</UL>
<P><STRONG><a name="[306]"></a>TList&lang;TObject*&rang;::relinkNode(tLNode&lang;TObject*&rang;*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tobject.o(t._ZN5TListIP7TObjectE10relinkNodeEP6tLNodeIS1_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TList&lang;TObject*&rang;::relinkNode(tLNode&lang;TObject*&rang;*) &rArr; TList&lang;TObject*&rang;::unlink()
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::unlink()
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::relink(tLNode&lang;TObject*&rang;*)
</UL>

<P><STRONG><a name="[f4]"></a>TList&lang;TObject*&rang;::compareItems(TObject*, TObject*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tconnection.o(t._ZN5TListIP7TObjectE12compareItemsES1_S1_))
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata__ZTV5TListIP7TObjectE)
</UL>
<P><STRONG><a name="[308]"></a>TList&lang;TObject*&rang;::find(TObject*, bool)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tobject.o(t._ZN5TListIP7TObjectE4findES1_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::remove(TObject*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::unlink(TObject*)
</UL>

<P><STRONG><a name="[303]"></a>TList&lang;TObject*&rang;::last()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tobject.o(t._ZN5TListIP7TObjectE4lastEv))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::destroyChild(TObject*)
</UL>

<P><STRONG><a name="[2c5]"></a>TList&lang;TObject*&rang;::next()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tdialog.o(t._ZN5TListIP7TObjectE4nextEv))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::showAll(TWidget*)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgChildsXY(TWidget*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::~TDialog()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchPressEvent(TTouchEvent*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::visitAll(TObject*)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::unlink()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::~TList()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::clear()
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgAllInValid(TObjList*, TWidget*, TRect*, TRect*)
</UL>

<P><STRONG><a name="[f0]"></a>TList&lang;TObject*&rang;::clear()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tconnection.o(t._ZN5TListIP7TObjectE5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TList&lang;TObject*&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::first()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::next()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::~TList()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObjList::clear()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata__ZTV5TListIP7TObjectE)
</UL>
<P><STRONG><a name="[2c4]"></a>TList&lang;TObject*&rang;::first()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tdialog.o(t._ZN5TListIP7TObjectE5firstEv))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::showAll(TWidget*)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgChildsXY(TWidget*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::~TDialog()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchPressEvent(TTouchEvent*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::visitAll(TObject*)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::unlink()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::~TList()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::clear()
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::chgAllInValid(TObjList*, TWidget*, TRect*, TRect*)
</UL>

<P><STRONG><a name="[2a5]"></a>TList&lang;TObject*&rang;::append(TObject*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tconnection.o(t._ZN5TListIP7TObjectE6appendES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TList&lang;TObject*&rang;::append(TObject*) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::addChild(TObject*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::connect(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection::TConnection(void(TObject::*)(long, long), TObject*, void(TObject::*)(long, long))
</UL>

<P><STRONG><a name="[29f]"></a>TList&lang;TObject*&rang;::locate(unsigned long)</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, tconnection.o(t._ZN5TListIP7TObjectE6locateEm))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TList&lang;TObject*&rang;::locate(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection::active(long, long)
</UL>

<P><STRONG><a name="[304]"></a>TList&lang;TObject*&rang;::remove(TObject*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tobject.o(t._ZN5TListIP7TObjectE6removeES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TList&lang;TObject*&rang;::remove(TObject*) &rArr; TList&lang;TObject*&rang;::find(TObject*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::unlink()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::find(TObject*, bool)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::destroyChild(TObject*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::~TObject__sub_object()
</UL>

<P><STRONG><a name="[309]"></a>TList&lang;TObject*&rang;::unlink()</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tobject.o(t._ZN5TListIP7TObjectE6unlinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TList&lang;TObject*&rang;::unlink()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::first()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::next()
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::remove(TObject*)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::relinkNode(tLNode&lang;TObject*&rang;*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::unlink(TObject*)
</UL>

<P><STRONG><a name="[313]"></a>TList&lang;TObject*&rang;::findRef(TObject*, bool)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tobject.o(t._ZN5TListIP7TObjectE7findRefES1_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TList&lang;TObject*&rang;::findRef(TObject*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::addChild(TObject*)
</UL>

<P><STRONG><a name="[312]"></a>TList&lang;TObject*&rang;::TList()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tconnection.o(t._ZN5TListIP7TObjectEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObject::addChild(TObject*)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObjList::TObjList()
</UL>

<P><STRONG><a name="[427]"></a>TList&lang;TObject*&rang;::TList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tconnection.o(t._ZN5TListIP7TObjectEC1Ev), UNUSED)

<P><STRONG><a name="[f2]"></a>TList&lang;TObject*&rang;::~TList__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tconnection.o(t._ZN5TListIP7TObjectED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TList&lang;TObject*&rang;::~TList__deallocating() &rArr; TList&lang;TObject*&rang;::~TList() &rArr; TList&lang;TObject*&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::~TList()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata__ZTV5TListIP7TObjectE)
</UL>
<P><STRONG><a name="[f1]"></a>TList&lang;TObject*&rang;::~TList()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tconnection.o(t._ZN5TListIP7TObjectED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TList&lang;TObject*&rang;::~TList() &rArr; TList&lang;TObject*&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::first()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::next()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TObject*&rang;::~TList__deallocating()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TObjList::~TObjList__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata__ZTV5TListIP7TObjectE)
</UL>
<P><STRONG><a name="[428]"></a>TList&lang;TObject*&rang;::~TList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, tconnection.o(t._ZN5TListIP7TObjectED1Ev), UNUSED)

<P><STRONG><a name="[c5]"></a>TList&lang;TWidget*&rang;::deleteItem(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, twidget.o(t._ZN5TListIP7TWidgetE10deleteItemEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TList&lang;TWidget*&rang;::deleteItem(void*) &rArr; tCollection&lang;TWidget*&rang;::deleteItem(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCollection&lang;TWidget*&rang;::deleteItem(void*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> twidget.o(.constdata__ZTV5TListIP7TWidgetE)
<LI> twidget.o(.constdata__ZTV11TWidgetList)
</UL>
<P><STRONG><a name="[c6]"></a>TList&lang;TWidget*&rang;::compareItems(TWidget*, TWidget*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, twidget.o(t._ZN5TListIP7TWidgetE12compareItemsES1_S1_))
<BR>[Address Reference Count : 2]<UL><LI> twidget.o(.constdata__ZTV5TListIP7TWidgetE)
<LI> twidget.o(.constdata__ZTV11TWidgetList)
</UL>
<P><STRONG><a name="[3cf]"></a>TList&lang;TWidget*&rang;::find(TWidget*, bool)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tdialog.o(t._ZN5TListIP7TWidgetE4findES1_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TList&lang;TWidget*&rang;::find(TWidget*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::remove(TWidget*)
</UL>

<P><STRONG><a name="[2c8]"></a>TList&lang;TWidget*&rang;::last()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tapplication.o(t._ZN5TListIP7TWidgetE4lastEv))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::~TApplication()
</UL>

<P><STRONG><a name="[2ff]"></a>TList&lang;TWidget*&rang;::next()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tdialog.o(t._ZN5TListIP7TWidgetE4nextEv))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::isInRealArea(long, long)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::unlink()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchPressEvent(TTouchEvent*)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::~TList()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::clear()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::rectCut(TRect*)
</UL>

<P><STRONG><a name="[f5]"></a>TList&lang;TWidget*&rang;::clear()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, twidget.o(t._ZN5TListIP7TWidgetE5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TList&lang;TWidget*&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::first()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::next()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidgetList::clear()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::~TList()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> twidget.o(.constdata__ZTV5TListIP7TWidgetE)
</UL>
<P><STRONG><a name="[2bc]"></a>TList&lang;TWidget*&rang;::first()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tdialog.o(t._ZN5TListIP7TWidgetE5firstEv))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::isInRealArea(long, long)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::unlink()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDialog::touchPressEvent(TTouchEvent*)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::chgWidRoot()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::~TList()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::clear()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::rectCut(TRect*)
</UL>

<P><STRONG><a name="[2ba]"></a>TList&lang;TWidget*&rang;::append(TWidget*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, twidget.o(t._ZN5TListIP7TWidgetE6appendES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TList&lang;TWidget*&rang;::append(TWidget*) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::addWindow(TWidget*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::chgWidRoot(TWidget*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::addAchgInvalid(TWidget*, TRect*, TRect*)
</UL>

<P><STRONG><a name="[2b7]"></a>TList&lang;TWidget*&rang;::remove(TWidget*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tdialog.o(t._ZN5TListIP7TWidgetE6removeES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TList&lang;TWidget*&rang;::remove(TWidget*) &rArr; TList&lang;TWidget*&rang;::find(TWidget*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::unlink()
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::find(TWidget*, bool)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::~TApplication()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::~TWidget__sub_object()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidgetList::remove(TWidget*)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::remInvalid(TWidget*)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::remWindow(TWidget*)
</UL>

<P><STRONG><a name="[3d0]"></a>TList&lang;TWidget*&rang;::unlink()</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tdialog.o(t._ZN5TListIP7TWidgetE6unlinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TList&lang;TWidget*&rang;::unlink()
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::first()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::next()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::remove(TWidget*)
</UL>

<P><STRONG><a name="[2b9]"></a>TList&lang;TWidget*&rang;::findRef(TWidget*, bool)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, twidget.o(t._ZN5TListIP7TWidgetE7findRefES1_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TList&lang;TWidget*&rang;::findRef(TWidget*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::chgWidRoot(TWidget*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::addAchgInvalid(TWidget*, TRect*, TRect*)
</UL>

<P><STRONG><a name="[2c7]"></a>TList&lang;TWidget*&rang;::TList()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, twidget.o(t._ZN5TListIP7TWidgetEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TApplication::TApplication(TDirver*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidget::addAchgInvalid(TWidget*, TRect*, TRect*)
</UL>

<P><STRONG><a name="[429]"></a>TList&lang;TWidget*&rang;::TList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, twidget.o(t._ZN5TListIP7TWidgetEC1Ev), UNUSED)

<P><STRONG><a name="[f7]"></a>TList&lang;TWidget*&rang;::~TList__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, twidget.o(t._ZN5TListIP7TWidgetED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TList&lang;TWidget*&rang;::~TList__deallocating() &rArr; TList&lang;TWidget*&rang;::~TList() &rArr; TList&lang;TWidget*&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::~TList()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> twidget.o(.constdata__ZTV5TListIP7TWidgetE)
</UL>
<P><STRONG><a name="[f6]"></a>TList&lang;TWidget*&rang;::~TList()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, twidget.o(t._ZN5TListIP7TWidgetED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TList&lang;TWidget*&rang;::~TList() &rArr; TList&lang;TWidget*&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::first()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::next()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TWidgetList::~TWidgetList__deallocating()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TList&lang;TWidget*&rang;::~TList__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> twidget.o(.constdata__ZTV5TListIP7TWidgetE)
</UL>
<P><STRONG><a name="[42a]"></a>TList&lang;TWidget*&rang;::~TList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, twidget.o(t._ZN5TListIP7TWidgetED1Ev), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1f6]"></a>SetSysClock</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1f0]"></a>SPI_TIMEOUT_UserCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, flash_conf.o(i.SPI_TIMEOUT_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[1a7]"></a>LCD_GPIO_Config</STRONG> (Thumb, 728 bytes, Stack size 48 bytes, lcd_conf.o(i.LCD_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1c0]"></a>SDRAM_GPIO_Config</STRONG> (Thumb, 874 bytes, Stack size 48 bytes, sdram_conf.o(i.SDRAM_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDRAM_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAMConfig
</UL>

<P><STRONG><a name="[1c3]"></a>SDRAM_InitSequence</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, sdram_conf.o(i.SDRAM_InitSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDRAM_InitSequence &rArr; SDRAM_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SetRefreshCount
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAMCmdConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_GetFlagStatus
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAMConfig
</UL>

<P><STRONG><a name="[1c6]"></a>SDRAM_delay</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, sdram_conf.o(i.SDRAM_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDRAM_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_InitSequence
</UL>

<P><STRONG><a name="[202]"></a>USART1_NVICConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usart_conf.o(i.USART1_NVICConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART1_NVICConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1Config
</UL>

<P><STRONG><a name="[89]"></a>task2_tgui(void*)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(i._Z10task2_tguiPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1892<LI>Call Chain = task2_tgui(void*) &rArr; TGuiRun() &rArr; Desktop::Desktop(const char*, TApplication*, const char*, TWidget*) &rArr; TIconButton::TIconButton(long, long, TImage*, TImage*, const char*, TWidget*) &rArr; TBufPainter::drawCenterText(long, long, long, long, const char*, unsigned long, unsigned long, bool) &rArr; TBufPainter::drawString(long, long, const char*, unsigned long) &rArr; TBufPainter::displayCHChar(long, long, unsigned char*, bool) &rArr; TFont::getWordCode(unsigned char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TGuiRun()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[20a]"></a>wifi_close()</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, main.o(i._Z10wifi_closev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wifi_close() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>task3_driver(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._Z12task3_driverPv))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3_driver(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3_driver(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[88]"></a>task1_led(void*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i._Z9task1_ledPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = task1_led(void*) &rArr; Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RED_Toggle
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1fb]"></a>TIM_Mode_Config</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tim_conf.o(i.TIM_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_Mode_Config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Basic_Config
</UL>

<P><STRONG><a name="[1fa]"></a>TIMx_NVIC_Config</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tim_conf.o(i.TIMx_NVIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIMx_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Basic_Config
</UL>

<P><STRONG><a name="[160]"></a>CmdError</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sdio_sd_conf.o(i.CmdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[163]"></a>CmdResp1Error</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, sdio_sd_conf.o(i.CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[166]"></a>CmdResp2Error</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sdio_sd_conf.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[167]"></a>CmdResp3Error</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sdio_sd_conf.o(i.CmdResp3Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp3Error
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[168]"></a>CmdResp6Error</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, sdio_sd_conf.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[169]"></a>CmdResp7Error</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sdio_sd_conf.o(i.CmdResp7Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[178]"></a>FindSCR</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, sdio_sd_conf.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[1bc]"></a>SDEnWideBus</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, sdio_sd_conf.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[33e]"></a>check_fs</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[349]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[340]"></a>cmp_lfn</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[342]"></a>create_chain</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[347]"></a>create_name</STRONG> (Thumb, 610 bytes, Stack size 48 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_name &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[34c]"></a>dir_alloc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[34f]"></a>dir_find</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[34e]"></a>dir_next</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[354]"></a>dir_read</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
</UL>

<P><STRONG><a name="[356]"></a>dir_register</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 868<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[35f]"></a>find_volume</STRONG> (Thumb, 828 bytes, Stack size 48 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[359]"></a>fit_lfn</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, ff.o(i.fit_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[360]"></a>follow_path</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
</UL>

<P><STRONG><a name="[358]"></a>gen_numname</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[364]"></a>get_fileinfo</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
</UL>

<P><STRONG><a name="[365]"></a>get_ldnumber</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[361]"></a>ld_clust</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ff.o(i.ld_clust))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[351]"></a>mem_cmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[357]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[34a]"></a>mem_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[33f]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[355]"></a>pick_lfn</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pick_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[368]"></a>remove_chain</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[367]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[350]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[369]"></a>sync_fs</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[352]"></a>sync_window</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[363]"></a>validate</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = validate &rArr; disk_status &rArr; SPI_FLASH_ReadID &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[39d]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[39e]"></a>prvCopyDataToQueue</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[3a1]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[3a7]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[3a8]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[3b3]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[38d]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[391]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[399]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[39c]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[91]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[3a3]"></a>prvInitialiseNewTask</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[393]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[3c9]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[395]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[3b2]"></a>prvGetNextExpireTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[3a6]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[3a9]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[3ab]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[3ae]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[3ac]"></a>prvSampleTimeNow</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[3b1]"></a>prvSwitchTimerLists</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[92]"></a>prvTimerTask</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[90]"></a>prvTaskExitError</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[3b7]"></a>prvHeapInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[3b8]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[17c]"></a>GTP_Get_Info</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, gt9xx.o(i.GTP_Get_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GTP_Get_Info &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_ReadBytes &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[17d]"></a>GTP_I2C_Read</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, gt9xx.o(i.GTP_I2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_ReadBytes &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Read_Version
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Test
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Get_Info
</UL>

<P><STRONG><a name="[180]"></a>GTP_I2C_Test</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gt9xx.o(i.GTP_I2C_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GTP_I2C_Test &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_ReadBytes &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
</UL>

<P><STRONG><a name="[181]"></a>GTP_I2C_Write</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, gt9xx.o(i.GTP_I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GTP_I2C_Write &rArr; I2C_Transfer &rArr; I2C_ReadBytes &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Init_Panel
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
</UL>

<P><STRONG><a name="[189]"></a>GTP_Touch_Down</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gt9xx.o(i.GTP_Touch_Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GTP_Touch_Down &rArr; guiTouchDown
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiTouchDown
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
</UL>

<P><STRONG><a name="[18b]"></a>GTP_Touch_Up</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gt9xx.o(i.GTP_Touch_Up))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTP_Touch_Up
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiTouchUp
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goodix_TS_Work_Func
</UL>

<P><STRONG><a name="[188]"></a>Goodix_TS_Work_Func</STRONG> (Thumb, 310 bytes, Stack size 128 bytes, gt9xx.o(i.Goodix_TS_Work_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Goodix_TS_Work_Func &rArr; GTP_I2C_Read &rArr; I2C_Transfer &rArr; I2C_ReadBytes &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Touch_Up
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_Touch_Down
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Write
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_TouchProcess
</UL>

<P><STRONG><a name="[17f]"></a>I2C_Transfer</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gt9xx.o(i.I2C_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_Transfer &rArr; I2C_ReadBytes &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Write
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTP_I2C_Read
</UL>

<P><STRONG><a name="[1a3]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, touch_i2c.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetChip
</UL>

<P><STRONG><a name="[18e]"></a>I2C_GPIO_Config</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, touch_i2c.o(i.I2C_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
</UL>

<P><STRONG><a name="[196]"></a>I2C_Mode_Config</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, touch_i2c.o(i.I2C_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_Mode_Config &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Touch_Init
</UL>

<P><STRONG><a name="[19a]"></a>I2C_TIMEOUT_UserCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, touch_i2c.o(i.I2C_TIMEOUT_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBytes
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBytes
</UL>

<P><STRONG><a name="[346]"></a>alloc_pool</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tjpgd.o(i.alloc_pool))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_qt_tbl
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl
</UL>

<P><STRONG><a name="[38a]"></a>bitext</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, tjpgd.o(i.bitext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bitext
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[38b]"></a>block_idct</STRONG> (Thumb, 474 bytes, Stack size 36 bytes, tjpgd.o(i.block_idct))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = block_idct
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[345]"></a>create_huffman_tbl</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, tjpgd.o(i.create_huffman_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
</UL>

<P><STRONG><a name="[34b]"></a>create_qt_tbl</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tjpgd.o(i.create_qt_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = create_qt_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
</UL>

<P><STRONG><a name="[389]"></a>huffext</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, tjpgd.o(i.huffext))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = huffext
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[381]"></a>mcu_load</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, tjpgd.o(i.mcu_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mcu_load &rArr; huffext
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffext
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_idct
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitext
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[382]"></a>mcu_output</STRONG> (Thumb, 696 bytes, Stack size 80 bytes, tjpgd.o(i.mcu_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mcu_output
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[380]"></a>restart</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tjpgd.o(i.restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = restart
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[205]"></a>string_set(char**, const char*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lodepng.o(i._Z10string_setPPcPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = string_set(char**, const char*) &rArr; string_resize(char**, unsigned) &rArr; lodepng_realloc(void*, unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_resize(char**, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext(LodePNGInfo*, const char*, const char*, const char*, const char*)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text(LodePNGInfo*, const char*, const char*)
</UL>

<P><STRONG><a name="[20b]"></a>string_init(char**)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lodepng.o(i._Z11string_initPPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = string_init(char**) &rArr; string_resize(char**, unsigned) &rArr; lodepng_realloc(void*, unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_resize(char**, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext(LodePNGInfo*, const char*, const char*, const char*, const char*)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text(LodePNGInfo*, const char*, const char*)
</UL>

<P><STRONG><a name="[20e]"></a>addColorBits(unsigned char*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lodepng.o(i._Z12addColorBitsPhjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = addColorBits(unsigned char*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgba8ToPixel(unsigned char*, unsigned, const LodePNGColorMode*, ColorTree*, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[20c]"></a>lodepng_free(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lodepng.o(i._Z12lodepng_freePv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lodepng_free(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_palette_clear(LodePNGColorMode*)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_file(unsigned char**, unsigned*, unsigned*, const char*, LodePNGColorType, unsigned)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext(LodePNGInfo*, const char*, const char*, const char*, const char*)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text(LodePNGInfo*, const char*, const char*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGUnknownChunks_cleanup(LodePNGInfo*)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedDistanceTree(HuffmanTree*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedLitLenTree(HuffmanTree*)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic(HuffmanTree*, HuffmanTree*, const unsigned char*, unsigned*, unsigned)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGIText_cleanup(LodePNGInfo*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGText_cleanup(LodePNGInfo*)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_cleanup(HuffmanTree*)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup(ColorTree*)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uivector_cleanup(void*)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_cleanup(void*)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cleanup(char**)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt(LodePNGInfo*, const unsigned char*, unsigned)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_PLTE(LodePNGColorMode*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[20d]"></a>rgba8ToPixel(unsigned char*, unsigned, const LodePNGColorMode*, ColorTree*, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, lodepng.o(i._Z12rgba8ToPixelPhjPK16LodePNGColorModeP9ColorTreehhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rgba8ToPixel(unsigned char*, unsigned, const LodePNGColorMode*, ColorTree*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; color_tree_get(ColorTree*, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_get(ColorTree*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addColorBits(unsigned char*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert(unsigned char*, const unsigned char*, const LodePNGColorMode*, const LodePNGColorMode*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[210]"></a>decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)</STRONG> (Thumb, 1062 bytes, Stack size 96 bytes, lodepng.o(i._Z13decodeGenericPPhPjS1_P12LodePNGStatePKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned) &rArr; postProcessScanlines(unsigned char*, unsigned char*, unsigned, unsigned, const LodePNGInfo*) &rArr; Adam7_deinterlace(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned) &rArr; Adam7_getpassvalues(unsigned*, unsigned*, unsigned*, unsigned*, unsigned*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_type_equals(const unsigned char*, const char*)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_next_const(const unsigned char*)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_data_const(const unsigned char*)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_check_crc(const unsigned char*)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_ancillary(const unsigned char*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size(unsigned, unsigned, const LodePNGColorMode*)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length(const unsigned char*)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_append(unsigned char**, unsigned*, const unsigned char*)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect(unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size_idat(unsigned, unsigned, const LodePNGColorMode*)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines(unsigned char*, unsigned char*, unsigned, unsigned, const LodePNGInfo*)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_reserve(ucvector*, unsigned)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_cleanup(void*)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize(ucvector*, unsigned)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tRNS(LodePNGColorMode*, const unsigned char*, unsigned)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tIME(LodePNGInfo*, const unsigned char*, unsigned)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt(LodePNGInfo*, const unsigned char*, unsigned)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_pHYs(LodePNGInfo*, const unsigned char*, unsigned)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_bKGD(LodePNGInfo*, const unsigned char*, unsigned)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_PLTE(LodePNGColorMode*, const unsigned char*, unsigned)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc(unsigned)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_init(ucvector*)
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[236]"></a>rgba16ToPixel(unsigned char*, unsigned, const LodePNGColorMode*, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, lodepng.o(i._Z13rgba16ToPixelPhjPK16LodePNGColorModetttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rgba16ToPixel(unsigned char*, unsigned, const LodePNGColorMode*, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert(unsigned char*, const unsigned char*, const LodePNGColorMode*, const LodePNGColorMode*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[207]"></a>string_resize(char**, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lodepng.o(i._Z13string_resizePPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = string_resize(char**, unsigned) &rArr; lodepng_realloc(void*, unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc(void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_init(char**)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_set(char**, const char*)
</UL>

<P><STRONG><a name="[212]"></a>ucvector_init(ucvector*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lodepng.o(i._Z13ucvector_initP8ucvector))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[27d]"></a>uivector_init(uivector*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lodepng.o(i._Z13uivector_initP8uivector), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths2(HuffmanTree*)
</UL>

<P><STRONG><a name="[22b]"></a>color_tree_add(ColorTree*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned)</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, lodepng.o(i._Z14color_tree_addP9ColorTreehhhhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = color_tree_add(ColorTree*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned) &rArr; lodepng_malloc(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_init(ColorTree*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert(unsigned char*, const unsigned char*, const LodePNGColorMode*, const LodePNGColorMode*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[20f]"></a>color_tree_get(ColorTree*, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, lodepng.o(i._Z14color_tree_getP9ColorTreehhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = color_tree_get(ColorTree*, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgba8ToPixel(unsigned char*, unsigned, const LodePNGColorMode*, ColorTree*, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[228]"></a>lodepng_malloc(unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lodepng.o(i._Z14lodepng_mallocj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lodepng_malloc(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_copy(LodePNGColorMode*, const LodePNGColorMode*)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file(unsigned char**, unsigned*, const char*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths2(HuffmanTree*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths(HuffmanTree*, const unsigned*, unsigned, unsigned)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedDistanceTree(HuffmanTree*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedLitLenTree(HuffmanTree*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_make2DTree(HuffmanTree*)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic(HuffmanTree*, HuffmanTree*, const unsigned char*, unsigned*, unsigned)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt(LodePNGInfo*, const unsigned char*, unsigned)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_PLTE(LodePNGColorMode*, const unsigned char*, unsigned)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_add(ColorTree*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[252]"></a>paethPredictor(short, short, short)</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, lodepng.o(i._Z14paethPredictorsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = paethPredictor(short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilterScanline(unsigned char*, const unsigned char*, const unsigned char*, unsigned, unsigned char, unsigned)
</UL>

<P><STRONG><a name="[217]"></a>readChunk_PLTE(LodePNGColorMode*, const unsigned char*, unsigned)</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lodepng.o(i._Z14readChunk_PLTEP16LodePNGColorModePKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = readChunk_PLTE(LodePNGColorMode*, const unsigned char*, unsigned) &rArr; lodepng_malloc(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc(unsigned)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[219]"></a>readChunk_bKGD(LodePNGInfo*, const unsigned char*, unsigned)</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, lodepng.o(i._Z14readChunk_bKGDP11LodePNGInfoPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readChunk_bKGD(LodePNGInfo*, const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[21c]"></a>readChunk_iTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)</STRONG> (Thumb, 396 bytes, Stack size 72 bytes, lodepng.o(i._Z14readChunk_iTXtP11LodePNGInfoPK25LodePNGDecompressSettingsPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = readChunk_iTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned) &rArr; zlib_decompress(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; lodepng_zlib_decompress(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; inflate(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; lodepng_inflate(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; lodepng_inflatev(ucvector*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; inflateHuffmanBlock(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned, unsigned) &rArr; getTreeInflateDynamic(HuffmanTree*, HuffmanTree*, const unsigned char*, unsigned*, unsigned) &rArr; HuffmanTree_makeFromLengths(HuffmanTree*, const unsigned*, unsigned, unsigned) &rArr; lodepng_malloc(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext(LodePNGInfo*, const char*, const char*, const char*, const char*)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_push_back(ucvector*, unsigned char)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_cleanup(void*)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize(ucvector*, unsigned)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc(unsigned)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_init(ucvector*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[21e]"></a>readChunk_pHYs(LodePNGInfo*, const unsigned char*, unsigned)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lodepng.o(i._Z14readChunk_pHYsP11LodePNGInfoPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readChunk_pHYs(LodePNGInfo*, const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[21a]"></a>readChunk_tEXt(LodePNGInfo*, const unsigned char*, unsigned)</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, lodepng.o(i._Z14readChunk_tEXtP11LodePNGInfoPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = readChunk_tEXt(LodePNGInfo*, const unsigned char*, unsigned) &rArr; lodepng_add_text(LodePNGInfo*, const char*, const char*) &rArr; string_set(char**, const char*) &rArr; string_resize(char**, unsigned) &rArr; lodepng_realloc(void*, unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text(LodePNGInfo*, const char*, const char*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc(unsigned)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[21d]"></a>readChunk_tIME(LodePNGInfo*, const unsigned char*, unsigned)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lodepng.o(i._Z14readChunk_tIMEP11LodePNGInfoPKhj))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[218]"></a>readChunk_tRNS(LodePNGColorMode*, const unsigned char*, unsigned)</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, lodepng.o(i._Z14readChunk_tRNSP16LodePNGColorModePKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = readChunk_tRNS(LodePNGColorMode*, const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[21b]"></a>readChunk_zTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, lodepng.o(i._Z14readChunk_zTXtP11LodePNGInfoPK25LodePNGDecompressSettingsPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = readChunk_zTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned) &rArr; zlib_decompress(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; lodepng_zlib_decompress(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; inflate(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; lodepng_inflate(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; lodepng_inflatev(ucvector*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; inflateHuffmanBlock(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned, unsigned) &rArr; getTreeInflateDynamic(HuffmanTree*, HuffmanTree*, const unsigned char*, unsigned*, unsigned) &rArr; HuffmanTree_makeFromLengths(HuffmanTree*, const unsigned*, unsigned, unsigned) &rArr; lodepng_malloc(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text(LodePNGInfo*, const char*, const char*)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_push_back(ucvector*, unsigned char)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_cleanup(void*)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc(unsigned)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_init(ucvector*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[234]"></a>string_cleanup(char**)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lodepng.o(i._Z14string_cleanupPPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = string_cleanup(char**) &rArr; lodepng_free(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGIText_cleanup(LodePNGInfo*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGText_cleanup(LodePNGInfo*)
</UL>

<P><STRONG><a name="[286]"></a>update_adler32(unsigned, const unsigned char*, unsigned)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lodepng.o(i._Z14update_adler32jPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_adler32(unsigned, const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adler32(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[22c]"></a>color_tree_init(ColorTree*)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lodepng.o(i._Z15color_tree_initP9ColorTree))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert(unsigned char*, const unsigned char*, const LodePNGColorMode*, const LodePNGColorMode*, unsigned, unsigned)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_add(ColorTree*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned)
</UL>

<P><STRONG><a name="[22a]"></a>lodepng_realloc(void*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lodepng.o(i._Z15lodepng_reallocPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lodepng_realloc(void*, unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_append(unsigned char**, unsigned*, const unsigned char*)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext(LodePNGInfo*, const char*, const char*, const char*, const char*)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text(LodePNGInfo*, const char*, const char*)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uivector_reserve(uivector*, unsigned)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_reserve(ucvector*, unsigned)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_resize(char**, unsigned)
</UL>

<P><STRONG><a name="[216]"></a>ucvector_resize(ucvector*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lodepng.o(i._Z15ucvector_resizeP8ucvectorj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ucvector_resize(ucvector*, unsigned) &rArr; ucvector_reserve(ucvector*, unsigned) &rArr; lodepng_realloc(void*, unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_reserve(ucvector*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateNoCompression(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned, unsigned)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_push_back(ucvector*, unsigned char)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[245]"></a>uivector_resize(uivector*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lodepng.o(i._Z15uivector_resizeP8uivectorj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uivector_reserve(uivector*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uivector_resizev(uivector*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[225]"></a>zlib_decompress(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lodepng.o(i._Z15zlib_decompressPPhPjPKhjPK25LodePNGDecompressSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = zlib_decompress(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; lodepng_zlib_decompress(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; inflate(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; lodepng_inflate(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; lodepng_inflatev(ucvector*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; inflateHuffmanBlock(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned, unsigned) &rArr; getTreeInflateDynamic(HuffmanTree*, HuffmanTree*, const unsigned char*, unsigned*, unsigned) &rArr; HuffmanTree_makeFromLengths(HuffmanTree*, const unsigned*, unsigned, unsigned) &rArr; lodepng_malloc(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompress(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[268]"></a>HuffmanTree_init(HuffmanTree*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lodepng.o(i._Z16HuffmanTree_initP11HuffmanTree))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic(HuffmanTree*, HuffmanTree*, const unsigned char*, unsigned*, unsigned)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[258]"></a>LodePNGText_init(LodePNGInfo*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lodepng.o(i._Z16LodePNGText_initP11LodePNGInfo))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init(LodePNGInfo*)
</UL>

<P><STRONG><a name="[248]"></a>lodepng_filesize(const char*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lodepng.o(i._Z16lodepng_filesizePKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1492<LI>Call Chain = lodepng_filesize(const char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file(unsigned char**, unsigned*, const char*)
</UL>

<P><STRONG><a name="[23e]"></a>lodepng_inflatev(ucvector*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, lodepng.o(i._Z16lodepng_inflatevP8ucvectorPKhjPK25LodePNGDecompressSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lodepng_inflatev(ucvector*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; inflateHuffmanBlock(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned, unsigned) &rArr; getTreeInflateDynamic(HuffmanTree*, HuffmanTree*, const unsigned char*, unsigned*, unsigned) &rArr; HuffmanTree_makeFromLengths(HuffmanTree*, const unsigned*, unsigned, unsigned) &rArr; lodepng_malloc(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateNoCompression(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned, unsigned)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitFromStream(unsigned*, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflate(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)
</UL>

<P><STRONG><a name="[226]"></a>ucvector_cleanup(void*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lodepng.o(i._Z16ucvector_cleanupPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ucvector_cleanup(void*) &rArr; lodepng_free(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[224]"></a>ucvector_reserve(ucvector*, unsigned)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lodepng.o(i._Z16ucvector_reserveP8ucvectorj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ucvector_reserve(ucvector*, unsigned) &rArr; lodepng_realloc(void*, unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc(void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize(ucvector*, unsigned)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[24f]"></a>uivector_cleanup(void*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lodepng.o(i._Z16uivector_cleanupPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths2(HuffmanTree*)
</UL>

<P><STRONG><a name="[246]"></a>uivector_reserve(uivector*, unsigned)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lodepng.o(i._Z16uivector_reserveP8uivectorj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc(void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uivector_resize(uivector*, unsigned)
</UL>

<P><STRONG><a name="[250]"></a>uivector_resizev(uivector*, unsigned, unsigned)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lodepng.o(i._Z16uivector_resizevP8uivectorjj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uivector_resize(uivector*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths2(HuffmanTree*)
</UL>

<P><STRONG><a name="[251]"></a>unfilterScanline(unsigned char*, const unsigned char*, const unsigned char*, unsigned, unsigned char, unsigned)</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, lodepng.o(i._Z16unfilterScanlinePhPKhS1_jhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = unfilterScanline(unsigned char*, const unsigned char*, const unsigned char*, unsigned, unsigned char, unsigned) &rArr; paethPredictor(short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paethPredictor(short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilter(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[253]"></a>Adam7_deinterlace(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 332 bytes, Stack size 224 bytes, lodepng.o(i._Z17Adam7_deinterlacePhPKhjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Adam7_deinterlace(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned) &rArr; Adam7_getpassvalues(unsigned*, unsigned*, unsigned*, unsigned*, unsigned*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitFromReversedStream(unsigned*, const unsigned char*)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBitOfReversedStream0(unsigned*, unsigned char*, unsigned char)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_getpassvalues(unsigned*, unsigned*, unsigned*, unsigned*, unsigned*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines(unsigned char*, unsigned char*, unsigned, unsigned, const LodePNGInfo*)
</UL>

<P><STRONG><a name="[259]"></a>LodePNGIText_init(LodePNGInfo*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lodepng.o(i._Z17LodePNGIText_initP11LodePNGInfo))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init(LodePNGInfo*)
</UL>

<P><STRONG><a name="[24c]"></a>readBitFromStream(unsigned*, const unsigned char*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lodepng.o(i._Z17readBitFromStreamPjPKh))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev(ucvector*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)
</UL>

<P><STRONG><a name="[25d]"></a>removePaddingBits(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, lodepng.o(i._Z17removePaddingBitsPhPKhjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = removePaddingBits(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned) &rArr; setBitOfReversedStream(unsigned*, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitFromReversedStream(unsigned*, const unsigned char*)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBitOfReversedStream(unsigned*, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines(unsigned char*, unsigned char*, unsigned, unsigned, const LodePNGInfo*)
</UL>

<P><STRONG><a name="[243]"></a>checkColorValidity(LodePNGColorType, unsigned)</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, lodepng.o(i._Z18checkColorValidity16LodePNGColorTypej))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect(unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[239]"></a>color_tree_cleanup(ColorTree*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lodepng.o(i._Z18color_tree_cleanupP9ColorTree))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + In Cycle
<LI>Call Chain = color_tree_cleanup(ColorTree*) &rArr;  color_tree_cleanup(ColorTree*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup(ColorTree*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert(unsigned char*, const unsigned char*, const LodePNGColorMode*, const LodePNGColorMode*, unsigned, unsigned)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup(ColorTree*)
</UL>

<P><STRONG><a name="[238]"></a>getPixelColorRGBA8(unsigned char*, unsigned char*, unsigned char*, unsigned char*, const unsigned char*, unsigned, const LodePNGColorMode*)</STRONG> (Thumb, 554 bytes, Stack size 40 bytes, lodepng.o(i._Z18getPixelColorRGBA8PhS_S_S_PKhjPK16LodePNGColorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getPixelColorRGBA8(unsigned char*, unsigned char*, unsigned char*, unsigned char*, const unsigned char*, unsigned, const LodePNGColorMode*) &rArr; readBitsFromReversedStream(unsigned*, const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitsFromReversedStream(unsigned*, const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert(unsigned char*, const unsigned char*, const LodePNGColorMode*, const LodePNGColorMode*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[26b]"></a>readBitsFromStream(unsigned*, const unsigned char*, unsigned)</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, lodepng.o(i._Z18readBitsFromStreamPjPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = readBitsFromStream(unsigned*, const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic(HuffmanTree*, HuffmanTree*, const unsigned char*, unsigned*, unsigned)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[231]"></a>ucvector_push_back(ucvector*, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lodepng.o(i._Z18ucvector_push_backP8ucvectorh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ucvector_push_back(ucvector*, unsigned char) &rArr; ucvector_resize(ucvector*, unsigned) &rArr; ucvector_reserve(ucvector*, unsigned) &rArr; lodepng_realloc(void*, unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize(ucvector*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt(LodePNGInfo*, const LodePNGDecompressSettings*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[254]"></a>Adam7_getpassvalues(unsigned*, unsigned*, unsigned*, unsigned*, unsigned*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 262 bytes, Stack size 36 bytes, lodepng.o(i._Z19Adam7_getpassvaluesPjS_S_S_S_jjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Adam7_getpassvalues(unsigned*, unsigned*, unsigned*, unsigned*, unsigned*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines(unsigned char*, unsigned char*, unsigned, unsigned, const LodePNGInfo*)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_deinterlace(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[263]"></a>HuffmanTree_cleanup(HuffmanTree*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lodepng.o(i._Z19HuffmanTree_cleanupP11HuffmanTree))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HuffmanTree_cleanup(HuffmanTree*) &rArr; lodepng_free(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic(HuffmanTree*, HuffmanTree*, const unsigned char*, unsigned*, unsigned)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[264]"></a>LodePNGText_cleanup(LodePNGInfo*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lodepng.o(i._Z19LodePNGText_cleanupP11LodePNGInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LodePNGText_cleanup(LodePNGInfo*) &rArr; string_cleanup(char**) &rArr; lodepng_free(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cleanup(char**)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup(LodePNGInfo*)
</UL>

<P><STRONG><a name="[26f]"></a>getNumColorChannels(LodePNGColorType)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lodepng.o(i._Z19getNumColorChannels16LodePNGColorType))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp_lct(LodePNGColorType, unsigned)
</UL>

<P><STRONG><a name="[235]"></a>getPixelColorRGBA16(unsigned short*, unsigned short*, unsigned short*, unsigned short*, const unsigned char*, unsigned, const LodePNGColorMode*)</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, lodepng.o(i._Z19getPixelColorRGBA16PtS_S_S_PKhjPK16LodePNGColorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getPixelColorRGBA16(unsigned short*, unsigned short*, unsigned short*, unsigned short*, const unsigned char*, unsigned, const LodePNGColorMode*)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert(unsigned char*, const unsigned char*, const LodePNGColorMode*, const LodePNGColorMode*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[237]"></a>getPixelColorsRGBA8(unsigned char*, unsigned, unsigned, const unsigned char*, const LodePNGColorMode*)</STRONG> (Thumb, 694 bytes, Stack size 40 bytes, lodepng.o(i._Z19getPixelColorsRGBA8PhjjPKhPK16LodePNGColorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getPixelColorsRGBA8(unsigned char*, unsigned, unsigned, const unsigned char*, const LodePNGColorMode*) &rArr; readBitsFromReversedStream(unsigned*, const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitsFromReversedStream(unsigned*, const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert(unsigned char*, const unsigned char*, const LodePNGColorMode*, const LodePNGColorMode*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[265]"></a>getTreeInflateFixed(HuffmanTree*, HuffmanTree*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lodepng.o(i._Z19getTreeInflateFixedP11HuffmanTreeS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = getTreeInflateFixed(HuffmanTree*, HuffmanTree*) &rArr; generateFixedDistanceTree(HuffmanTree*) &rArr; HuffmanTree_makeFromLengths(HuffmanTree*, const unsigned*, unsigned, unsigned) &rArr; lodepng_malloc(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedDistanceTree(HuffmanTree*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedLitLenTree(HuffmanTree*)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[26a]"></a>huffmanDecodeSymbol(const unsigned char*, unsigned*, const HuffmanTree*, unsigned)</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, lodepng.o(i._Z19huffmanDecodeSymbolPKhPjPK11HuffmanTreej))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = huffmanDecodeSymbol(const unsigned char*, unsigned*, const HuffmanTree*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic(HuffmanTree*, HuffmanTree*, const unsigned char*, unsigned*, unsigned)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[24d]"></a>inflateHuffmanBlock(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned, unsigned)</STRONG> (Thumb, 396 bytes, Stack size 96 bytes, lodepng.o(i._Z19inflateHuffmanBlockP8ucvectorPKhPjS3_jj))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = inflateHuffmanBlock(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned, unsigned) &rArr; getTreeInflateDynamic(HuffmanTree*, HuffmanTree*, const unsigned char*, unsigned*, unsigned) &rArr; HuffmanTree_makeFromLengths(HuffmanTree*, const unsigned*, unsigned, unsigned) &rArr; lodepng_malloc(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic(HuffmanTree*, HuffmanTree*, const unsigned char*, unsigned*, unsigned)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffmanDecodeSymbol(const unsigned char*, unsigned*, const HuffmanTree*, unsigned)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateFixed(HuffmanTree*, HuffmanTree*)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_cleanup(HuffmanTree*)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitsFromStream(unsigned*, const unsigned char*, unsigned)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_init(HuffmanTree*)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize(ucvector*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev(ucvector*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)
</UL>

<P><STRONG><a name="[25c]"></a>lodepng_buffer_file(unsigned char*, unsigned, const char*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lodepng.o(i._Z19lodepng_buffer_filePhjPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1492<LI>Call Chain = lodepng_buffer_file(unsigned char*, unsigned, const char*) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr;  disk_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file(unsigned char**, unsigned*, const char*)
</UL>

<P><STRONG><a name="[23b]"></a>lodepng_get_bpp_lct(LodePNGColorType, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lodepng.o(i._Z19lodepng_get_bpp_lct16LodePNGColorTypej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lodepng_get_bpp_lct(LodePNGColorType, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumColorChannels(LodePNGColorType)
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp(const LodePNGColorMode*)
</UL>

<P><STRONG><a name="[270]"></a>LodePNGIText_cleanup(LodePNGInfo*)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lodepng.o(i._Z20LodePNGIText_cleanupP11LodePNGInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LodePNGIText_cleanup(LodePNGInfo*) &rArr; string_cleanup(char**) &rArr; lodepng_free(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cleanup(char**)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup(LodePNGInfo*)
</UL>

<P><STRONG><a name="[24e]"></a>inflateNoCompression(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned)</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, lodepng.o(i._Z20inflateNoCompressionP8ucvectorPKhPjS3_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = inflateNoCompression(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned) &rArr; ucvector_resize(ucvector*, unsigned) &rArr; ucvector_reserve(ucvector*, unsigned) &rArr; lodepng_realloc(void*, unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize(ucvector*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev(ucvector*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)
</UL>

<P><STRONG><a name="[229]"></a>postProcessScanlines(unsigned char*, unsigned char*, unsigned, unsigned, const LodePNGInfo*)</STRONG> (Thumb, 250 bytes, Stack size 224 bytes, lodepng.o(i._Z20postProcessScanlinesPhS_jjPK11LodePNGInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = postProcessScanlines(unsigned char*, unsigned char*, unsigned, unsigned, const LodePNGInfo*) &rArr; Adam7_deinterlace(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned) &rArr; Adam7_getpassvalues(unsigned*, unsigned*, unsigned*, unsigned*, unsigned*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp(const LodePNGColorMode*)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilter(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_getpassvalues(unsigned*, unsigned*, unsigned*, unsigned*, unsigned*, unsigned, unsigned, unsigned)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removePaddingBits(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_deinterlace(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[23d]"></a>ucvector_init_buffer(ucvector*, unsigned char*, unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lodepng.o(i._Z20ucvector_init_bufferP8ucvectorPhj))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflate(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)
</UL>

<P><STRONG><a name="[269]"></a>getTreeInflateDynamic(HuffmanTree*, HuffmanTree*, const unsigned char*, unsigned*, unsigned)</STRONG> (Thumb, 640 bytes, Stack size 80 bytes, lodepng.o(i._Z21getTreeInflateDynamicP11HuffmanTreeS0_PKhPjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = getTreeInflateDynamic(HuffmanTree*, HuffmanTree*, const unsigned char*, unsigned*, unsigned) &rArr; HuffmanTree_makeFromLengths(HuffmanTree*, const unsigned*, unsigned, unsigned) &rArr; lodepng_malloc(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths(HuffmanTree*, const unsigned*, unsigned, unsigned)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffmanDecodeSymbol(const unsigned char*, unsigned*, const HuffmanTree*, unsigned)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_cleanup(HuffmanTree*)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitsFromStream(unsigned*, const unsigned char*, unsigned)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_init(HuffmanTree*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc(unsigned)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[278]"></a>HuffmanTree_make2DTree(HuffmanTree*)</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, lodepng.o(i._Z22HuffmanTree_make2DTreeP11HuffmanTree), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths2(HuffmanTree*)
</UL>

<P><STRONG><a name="[25e]"></a>setBitOfReversedStream(unsigned*, unsigned char*, unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, lodepng.o(i._Z22setBitOfReversedStreamPjPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = setBitOfReversedStream(unsigned*, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removePaddingBits(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[266]"></a>generateFixedLitLenTree(HuffmanTree*)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lodepng.o(i._Z23generateFixedLitLenTreeP11HuffmanTree))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = generateFixedLitLenTree(HuffmanTree*) &rArr; HuffmanTree_makeFromLengths(HuffmanTree*, const unsigned*, unsigned, unsigned) &rArr; lodepng_malloc(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths(HuffmanTree*, const unsigned*, unsigned, unsigned)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc(unsigned)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateFixed(HuffmanTree*, HuffmanTree*)
</UL>

<P><STRONG><a name="[256]"></a>setBitOfReversedStream0(unsigned*, unsigned char*, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lodepng.o(i._Z23setBitOfReversedStream0PjPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setBitOfReversedStream0(unsigned*, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_deinterlace(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[22e]"></a>lodepng_color_mode_equal(const LodePNGColorMode*, const LodePNGColorMode*)</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, lodepng.o(i._Z24lodepng_color_mode_equalPK16LodePNGColorModeS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lodepng_color_mode_equal(const LodePNGColorMode*, const LodePNGColorMode*)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert(unsigned char*, const unsigned char*, const LodePNGColorMode*, const LodePNGColorMode*, unsigned, unsigned)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[25a]"></a>LodePNGUnknownChunks_init(LodePNGInfo*)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lodepng.o(i._Z25LodePNGUnknownChunks_initP11LodePNGInfo))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init(LodePNGInfo*)
</UL>

<P><STRONG><a name="[267]"></a>generateFixedDistanceTree(HuffmanTree*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lodepng.o(i._Z25generateFixedDistanceTreeP11HuffmanTree))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = generateFixedDistanceTree(HuffmanTree*) &rArr; HuffmanTree_makeFromLengths(HuffmanTree*, const unsigned*, unsigned, unsigned) &rArr; lodepng_malloc(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths(HuffmanTree*, const unsigned*, unsigned, unsigned)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc(unsigned)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateFixed(HuffmanTree*, HuffmanTree*)
</UL>

<P><STRONG><a name="[223]"></a>lodepng_get_raw_size_idat(unsigned, unsigned, const LodePNGColorMode*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lodepng.o(i._Z25lodepng_get_raw_size_idatjjPK16LodePNGColorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lodepng_get_raw_size_idat(unsigned, unsigned, const LodePNGColorMode*) &rArr; lodepng_get_bpp(const LodePNGColorMode*) &rArr; lodepng_get_bpp_lct(LodePNGColorType, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp(const LodePNGColorMode*)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric(unsigned char**, unsigned*, unsigned*, LodePNGState*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[255]"></a>readBitFromReversedStream(unsigned*, const unsigned char*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lodepng.o(i._Z25readBitFromReversedStreamPjPKh))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitsFromReversedStream(unsigned*, const unsigned char*, unsigned)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removePaddingBits(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_deinterlace(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[25f]"></a>readBitsFromReversedStream(unsigned*, const unsigned char*, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lodepng.o(i._Z26readBitsFromReversedStreamPjPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readBitsFromReversedStream(unsigned*, const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitFromReversedStream(unsigned*, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorsRGBA8(unsigned char*, unsigned, unsigned, const unsigned char*, const LodePNGColorMode*)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorRGBA8(unsigned char*, unsigned char*, unsigned char*, unsigned char*, const unsigned char*, unsigned, const LodePNGColorMode*)
</UL>

<P><STRONG><a name="[274]"></a>HuffmanTree_makeFromLengths(HuffmanTree*, const unsigned*, unsigned, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lodepng.o(i._Z27HuffmanTree_makeFromLengthsP11HuffmanTreePKjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HuffmanTree_makeFromLengths(HuffmanTree*, const unsigned*, unsigned, unsigned) &rArr; lodepng_malloc(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedDistanceTree(HuffmanTree*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedLitLenTree(HuffmanTree*)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic(HuffmanTree*, HuffmanTree*, const unsigned char*, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[27c]"></a>HuffmanTree_makeFromLengths2(HuffmanTree*)</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, lodepng.o(i._Z28HuffmanTree_makeFromLengths2P11HuffmanTree), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_make2DTree(HuffmanTree*)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uivector_resizev(uivector*, unsigned, unsigned)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uivector_cleanup(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc(unsigned)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uivector_init(uivector*)
</UL>

<P><STRONG><a name="[272]"></a>LodePNGUnknownChunks_cleanup(LodePNGInfo*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lodepng.o(i._Z28LodePNGUnknownChunks_cleanupP11LodePNGInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LodePNGUnknownChunks_cleanup(LodePNGInfo*) &rArr; lodepng_free(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup(LodePNGInfo*)
</UL>

<P><STRONG><a name="[27b]"></a>adler32(const unsigned char*, unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lodepng.o(i._Z7adler32PKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adler32(const unsigned char*, unsigned) &rArr; update_adler32(unsigned, const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_adler32(unsigned, const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompress(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)
</UL>

<P><STRONG><a name="[27a]"></a>inflate(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lodepng.o(i._Z7inflatePPhPjPKhjPK25LodePNGDecompressSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = inflate(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; lodepng_inflate(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; lodepng_inflatev(ucvector*, const unsigned char*, unsigned, const LodePNGDecompressSettings*) &rArr; inflateHuffmanBlock(ucvector*, const unsigned char*, unsigned*, unsigned*, unsigned, unsigned) &rArr; getTreeInflateDynamic(HuffmanTree*, HuffmanTree*, const unsigned char*, unsigned*, unsigned) &rArr; HuffmanTree_makeFromLengths(HuffmanTree*, const unsigned*, unsigned, unsigned) &rArr; lodepng_malloc(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflate(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompress(unsigned char**, unsigned*, const unsigned char*, unsigned, const LodePNGDecompressSettings*)
</UL>

<P><STRONG><a name="[273]"></a>unfilter(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, lodepng.o(i._Z8unfilterPhPKhjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = unfilter(unsigned char*, const unsigned char*, unsigned, unsigned, unsigned) &rArr; unfilterScanline(unsigned char*, const unsigned char*, const unsigned char*, unsigned, unsigned char, unsigned) &rArr; paethPredictor(short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilterScanline(unsigned char*, const unsigned char*, const unsigned char*, unsigned, unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines(unsigned char*, unsigned char*, unsigned, unsigned, const LodePNGInfo*)
</UL>

<P><STRONG><a name="[330]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[334]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[333]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[332]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[147]"></a>__sti___8_char_cpp_a3dc957a</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, char.o(i.__sti___8_char_cpp_a3dc957a))
<BR>[Address Reference Count : 1]<UL><LI> char.o(.init_array)
</UL>
<P><STRONG><a name="[148]"></a>__sti___10_locale_cpp_ff99fc7b</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, locale.o(i.__sti___10_locale_cpp_ff99fc7b))
<BR>[Address Reference Count : 1]<UL><LI> locale.o(.init_array)
</UL>
<P><STRONG><a name="[81]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL>
<P><STRONG><a name="[149]"></a>__sti___10_rwcats_cpp_64e8068e</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rwcats.o(i.__sti___10_rwcats_cpp_64e8068e))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __sti___10_rwcats_cpp_64e8068e &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwcats.o(.init_array)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
